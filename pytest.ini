[tool:pytest]
# Printernizer Test Configuration
testpaths = tests/backend
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --cov-report=term-missing
    --cov-report=html:coverage/backend
    --cov-report=json:coverage/backend-coverage.json
    --cov-report=xml:coverage/backend-coverage.xml
    --junit-xml=test-reports/backend-junit.xml
    --html=test-reports/backend-report.html
    --self-contained-html

# Coverage configuration
[tool:coverage:run]
source = backend/
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */settings/*

[tool:coverage:report]
# Coverage reporting options
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[tool:coverage:html]
directory = coverage/backend
title = Printernizer Backend Coverage Report

# Test markers for categorization
markers =
    unit: Unit tests for individual functions/methods
    integration: Integration tests across multiple components
    e2e: End-to-end tests for complete user workflows
    performance: Performance and load testing
    german: German business logic and compliance tests
    security: Security and vulnerability tests
    slow: Tests that take longer than 5 seconds
    network: Tests that require network connectivity
    database: Tests that interact with database
    websocket: WebSocket communication tests
    bambu: Bambu Lab printer specific tests
    prusa: Prusa printer specific tests
    files: File management and download tests
    vat: German VAT calculation tests
    currency: German currency handling tests
    timezone: German timezone handling tests
    hgb: German Commercial Code compliance tests
    gobd: German Digital Records Act compliance tests
    elster: German ELSTER tax filing tests

# Minimum test durations for performance monitoring
minversion = 7.0
timeout = 300
timeout_method = thread

# Parallel execution settings (when using pytest-xdist)
# Run with: pytest -n auto
# Or: pytest -n 4 (for 4 parallel workers)

# Filtering options
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Specific warnings to ignore
    ignore:.*:pytest.PytestUnraisableExceptionWarning
    ignore:.*:pytest.PytestCollectionWarning

# Log configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test discovery
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".git",
    ".pytest_cache",
    "node_modules",
    "frontend",
    "__pycache__"
]

# Pytest plugins
required_plugins =
    pytest-cov>=4.1.0
    pytest-html>=3.2.0
    pytest-json-report>=1.5.0
    pytest-mock>=3.11.0
    pytest-timeout>=2.1.0
    pytest-asyncio>=0.21.0