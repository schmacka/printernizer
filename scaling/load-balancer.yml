# Printernizer Load Balancing and Scalability Configuration
# High-availability setup for production deployment

apiVersion: v1
kind: Service
metadata:
  name: printernizer-backend-lb
  namespace: printernizer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: printernizer-backend
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8000
    protocol: TCP
    name: https
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
# Frontend Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: printernizer-frontend-lb
  namespace: printernizer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: LoadBalancer
  selector:
    app: printernizer-frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 80
    protocol: TCP
    name: https

---
# Redis Cluster for High Availability
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: printernizer
spec:
  serviceName: "redis-cluster"
  replicas: 3
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: cluster
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: printernizer
data:
  redis.conf: |
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    appendfsync everysec
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    tcp-keepalive 60
    timeout 300

---
# Redis Cluster Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: printernizer
spec:
  clusterIP: None
  selector:
    app: redis-cluster
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 16379
    targetPort: 16379
    name: cluster

---
# Vertical Pod Autoscaler for Backend
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: printernizer-backend-vpa
  namespace: printernizer
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: printernizer-backend
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: printernizer-backend
      minAllowed:
        cpu: 100m
        memory: 128Mi
      maxAllowed:
        cpu: 1000m
        memory: 1Gi
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: printernizer-backend-pdb
  namespace: printernizer
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: printernizer-backend

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: printernizer-frontend-pdb
  namespace: printernizer
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: printernizer-frontend

---
# Network Policy for Load Balancer Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: load-balancer-access
  namespace: printernizer
spec:
  podSelector:
    matchLabels:
      app: printernizer-backend
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000

---
# Priority Class for Critical Pods
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: printernizer-high-priority
value: 1000
globalDefault: false
description: "High priority class for Printernizer critical components"

---
# Updated Backend Deployment with HA Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: printernizer-backend-ha
  namespace: printernizer
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: printernizer-backend
      tier: backend
  template:
    metadata:
      labels:
        app: printernizer-backend
        tier: backend
    spec:
      priorityClassName: printernizer-high-priority
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - printernizer-backend
              topologyKey: kubernetes.io/hostname
      containers:
      - name: printernizer-backend
        image: ghcr.io/porcus3d/printernizer-backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: REDIS_URL
          value: "redis://redis-cluster:6379/0"
        - name: WORKERS
          value: "2"  # Reduced per pod for better distribution
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2