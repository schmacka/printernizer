{
  "exact_duplicates": [
    {
      "type": "exact_name",
      "name": "__init__",
      "count": 52,
      "locations": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "__init__",
          "full_name": "FunctionAnalyzer.__init__",
          "class": "FunctionAnalyzer",
          "signature": "(self, filepath: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 23,
          "line_end": 29,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\bambu_credentials.py",
          "name": "__init__",
          "full_name": "BambuCredentials.__init__",
          "class": "BambuCredentials",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 18,
          "line_end": 19,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "__init__",
          "full_name": "BambuDownloadManager.__init__",
          "class": "BambuDownloadManager",
          "signature": "(self, download_base_dir: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize download manager.\n\nArgs:\n    download_base_dir: Base directory for downloaded files",
          "line_start": 54,
          "line_end": 73,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\error_analysis_agent.py",
          "name": "__init__",
          "full_name": "ErrorAnalysisAgent.__init__",
          "class": "ErrorAnalysisAgent",
          "signature": "(self, log_file_path)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 31,
          "line_end": 48,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "__init__",
          "full_name": "BambuFTPTester.__init__",
          "class": "BambuFTPTester",
          "signature": "(self, ip_address: str, access_code: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize tester with printer credentials.",
          "line_start": 49,
          "line_end": 53,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "__init__",
          "full_name": "BambuFTP.__init__",
          "class": "BambuFTP",
          "signature": "(self, host, port)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 15,
          "line_end": 19,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "__init__",
          "full_name": "ErrorStoreService.__init__",
          "class": "ErrorStoreService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 48,
          "line_end": 51,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "__init__",
          "full_name": "ConnectionManager.__init__",
          "class": "ConnectionManager",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 21,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "__init__",
          "full_name": "Database.__init__",
          "class": "Database",
          "signature": "(self, db_path: Optional[str])",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize database connection.",
          "line_start": 22,
          "line_end": 29,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "__init__",
          "full_name": "BambuLabPrinter.__init__",
          "class": "BambuLabPrinter",
          "signature": "(self, printer_id: str, name: str, ip_address: str, access_code: str, serial_number: str, file_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize Bambu Lab printer.",
          "line_start": 39,
          "line_end": 72,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "__init__",
          "full_name": "PrinterFile.__init__",
          "class": "PrinterFile",
          "signature": "(self, filename: str, size: Optional[int], modified: Optional[datetime], path: Optional[str], file_type: Optional[str])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 33,
          "line_end": 40,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "__init__",
          "full_name": "JobInfo.__init__",
          "class": "JobInfo",
          "signature": "(self, job_id: str, name: str, status: JobStatus, progress: Optional[int], estimated_time: Optional[int], elapsed_time: Optional[int])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 63,
          "line_end": 73,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "__init__",
          "full_name": "BasePrinter.__init__",
          "class": "BasePrinter",
          "signature": "(self, printer_id: str, name: str, ip_address: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize base printer.",
          "line_start": 146,
          "line_end": 166,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "__init__",
          "full_name": "PrusaPrinter.__init__",
          "class": "PrusaPrinter",
          "signature": "(self, printer_id: str, name: str, ip_address: str, api_key: str, file_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize Prusa printer.",
          "line_start": 23,
          "line_end": 30,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\analytics_service.py",
          "name": "__init__",
          "full_name": "AnalyticsService.__init__",
          "class": "AnalyticsService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize analytics service.",
          "line_start": 16,
          "line_end": 18,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "__init__",
          "full_name": "BambuFTPFile.__init__",
          "class": "BambuFTPFile",
          "signature": "(self, name: str, size: int, permissions: str, modified: Optional[datetime], raw_line: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 32,
          "line_end": 39,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "__init__",
          "full_name": "BambuFTPService.__init__",
          "class": "BambuFTPService",
          "signature": "(self, ip_address: str, access_code: str, port: int)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize Bambu FTP service.\n\nArgs:\n    ip_address: Printer IP address\n    access_code: Bambu Lab access code (used as password)\n    port: FTP port (default 990 for implicit TLS)",
          "line_start": 80,
          "line_end": 100,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_parser.py",
          "name": "__init__",
          "full_name": "BambuParser.__init__",
          "class": "BambuParser",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the Bambu parser.",
          "line_start": 82,
          "line_end": 84,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "__init__",
          "full_name": "ConfigService.__init__",
          "class": "ConfigService",
          "signature": "(self, config_path: Optional[str], database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize configuration service.",
          "line_start": 192,
          "line_end": 203,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\event_service.py",
          "name": "__init__",
          "full_name": "EventService.__init__",
          "class": "EventService",
          "signature": "(self, printer_service, job_service, file_service, database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize event service with dependencies.",
          "line_start": 16,
          "line_end": 43,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "__init__",
          "full_name": "FileService.__init__",
          "class": "FileService",
          "signature": "(self, database: Database, event_service: EventService, file_watcher: Optional[FileWatcherService], printer_service, config_service, library_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize file service.",
          "line_start": 24,
          "line_end": 41,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "__init__",
          "full_name": "PrintFileHandler.__init__",
          "class": "PrintFileHandler",
          "signature": "(self, file_watcher: 'FileWatcherService')",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize file handler.",
          "line_start": 54,
          "line_end": 59,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "__init__",
          "full_name": "FileWatcherService.__init__",
          "class": "FileWatcherService",
          "signature": "(self, config_service: ConfigService, event_service: EventService, library_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize file watcher service.",
          "line_start": 126,
          "line_end": 139,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "__init__",
          "full_name": "IdeaService.__init__",
          "class": "IdeaService",
          "signature": "(self, db: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 20,
          "line_end": 22,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "__init__",
          "full_name": "JobService.__init__",
          "class": "JobService",
          "signature": "(self, database: Database, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize job service.",
          "line_start": 20,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "__init__",
          "full_name": "LibraryService.__init__",
          "class": "LibraryService",
          "signature": "(self, database, config_service, event_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize library service.\n\nArgs:\n    database: Database instance for storage\n    config_service: Configuration service\n    event_service: Event service for notifications",
          "line_start": 24,
          "line_end": 50,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "__init__",
          "full_name": "MaterialService.__init__",
          "class": "MaterialService",
          "signature": "(self, db: Database, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize material service.",
          "line_start": 39,
          "line_end": 44,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\migration_service.py",
          "name": "__init__",
          "full_name": "MigrationService.__init__",
          "class": "MigrationService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize migration service.",
          "line_start": 19,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\monitoring_service.py",
          "name": "__init__",
          "full_name": "MonitoringService.__init__",
          "class": "MonitoringService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 21,
          "line_end": 38,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "__init__",
          "full_name": "PreviewRenderService.__init__",
          "class": "PreviewRenderService",
          "signature": "(self, cache_dir: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize preview render service.",
          "line_start": 37,
          "line_end": 84,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "__init__",
          "full_name": "PrinterService.__init__",
          "class": "PrinterService",
          "signature": "(self, database: Database, event_service: EventService, config_service: ConfigService, file_service)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize printer service.",
          "line_start": 24,
          "line_end": 33,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\threemf_analyzer.py",
          "name": "__init__",
          "full_name": "ThreeMFAnalyzer.__init__",
          "class": "ThreeMFAnalyzer",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the 3MF analyzer.",
          "line_start": 18,
          "line_end": 20,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "__init__",
          "full_name": "ThumbnailService.__init__",
          "class": "ThumbnailService",
          "signature": "(self, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize thumbnail service.",
          "line_start": 27,
          "line_end": 35,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "__init__",
          "full_name": "TrendingService.__init__",
          "class": "TrendingService",
          "signature": "(self, db: Database, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize trending service.",
          "line_start": 34,
          "line_end": 53,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "__init__",
          "full_name": "UrlParserService.__init__",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 19,
          "line_end": 20,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "__init__",
          "full_name": "WatchFolderDbService.__init__",
          "class": "WatchFolderDbService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the database service.",
          "line_start": 21,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "__init__",
          "full_name": "ErrorHandler.__init__",
          "class": "ErrorHandler",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 45,
          "line_end": 47,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "PrinternizerException.__init__",
          "class": "PrinternizerException",
          "signature": "(self, message: str, error_code: str, status_code: int, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize exception with structured error information.",
          "line_start": 12,
          "line_end": 25,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "ConfigurationError.__init__",
          "class": "ConfigurationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 31,
          "line_end": 37,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "DatabaseError.__init__",
          "class": "DatabaseError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 43,
          "line_end": 49,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "PrinterConnectionError.__init__",
          "class": "PrinterConnectionError",
          "signature": "(self, printer_id: str, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 55,
          "line_end": 61,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "FileOperationError.__init__",
          "class": "FileOperationError",
          "signature": "(self, operation: str, filename: str, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 67,
          "line_end": 73,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "ValidationError.__init__",
          "class": "ValidationError",
          "signature": "(self, field: str, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 79,
          "line_end": 85,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "AuthenticationError.__init__",
          "class": "AuthenticationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 91,
          "line_end": 97,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "AuthorizationError.__init__",
          "class": "AuthorizationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 103,
          "line_end": 109,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "NotFoundError.__init__",
          "class": "NotFoundError",
          "signature": "(self, resource_type: str, resource_id: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 115,
          "line_end": 121,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\gcode_analyzer.py",
          "name": "__init__",
          "full_name": "GcodeAnalyzer.__init__",
          "class": "GcodeAnalyzer",
          "signature": "(self, optimize_enabled: bool)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize G-code analyzer.\n\nArgs:\n    optimize_enabled: Whether to enable print optimization",
          "line_start": 36,
          "line_end": 43,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "__init__",
          "full_name": "CircularReference.__init__",
          "class": "CircularReference",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 788,
          "line_end": 789,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "__init__",
          "full_name": "WebSocketLoadTester.__init__",
          "class": "WebSocketLoadTester",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 427,
          "line_end": 431,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "__init__",
          "full_name": "DatabaseConnectionPool.__init__",
          "class": "DatabaseConnectionPool",
          "signature": "(self, max_connections)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 667,
          "line_end": 677,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "__init__",
          "full_name": "Milestone12TestRunner.__init__",
          "class": "Milestone12TestRunner",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 28,
          "line_end": 45,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "__init__",
          "full_name": "PrinternizerTestRunner.__init__",
          "class": "PrinternizerTestRunner",
          "signature": "(self, project_root)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 19,
          "line_end": 27,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "main",
      "count": 13,
      "locations": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main analysis execution",
          "line_start": 351,
          "line_end": 398,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 325,
          "line_end": 421,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\error_analysis_agent.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point for the error analysis agent.",
          "line_start": 460,
          "line_end": 488,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\quick_bambu_check.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 9,
          "line_end": 51,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\simple_bambu_test.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 109,
          "line_end": 111,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_bambu_credentials.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 226,
          "line_end": 294,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_bambu_ftp_direct.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 294,
          "line_end": 334,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 361,
          "line_end": 394,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\verify_bambu_download.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 185,
          "line_end": 227,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_essential_tests.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run essential tests for Printernizer Milestone 1.1.",
          "line_start": 13,
          "line_end": 128,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point.",
          "line_start": 222,
          "line_end": 255,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point for test runner",
          "line_start": 650,
          "line_end": 705,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "verify_phase2_integration.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run integration verification checks.",
          "line_start": 35,
          "line_end": 153,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "download_file",
      "count": 9,
      "locations": [
        {
          "file": "scripts\\test_bambu_ftp_direct.py",
          "name": "download_file",
          "full_name": "download_file",
          "class": null,
          "signature": "(ftp: ftplib.FTP_TLS, remote_filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from the FTP server.\n\nArgs:\n    ftp: Connected FTP instance\n    remote_filename: Name of file to download\n    local_path: Local path to save the file\n\nReturns:\n    True if download successful, False otherwise",
          "line_start": 169,
          "line_end": 214,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "download_file",
          "full_name": "BambuFTP.download_file",
          "class": "BambuFTP",
          "signature": "(self, filename, local_path)",
          "return_type": "",
          "decorators": [],
          "docstring": "Download a file.",
          "line_start": 127,
          "line_end": 180,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "download_file",
          "full_name": "download_file",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/{file_id}/download')"
          ],
          "docstring": "Download a file from printer to local storage.",
          "line_start": 167,
          "line_end": 204,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "download_file",
          "full_name": "BambuLabPrinter.download_file",
          "class": "BambuLabPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Bambu Lab printer.",
          "line_start": 1299,
          "line_end": 1316,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "download_file",
          "full_name": "PrinterInterface.download_file",
          "class": "PrinterInterface",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Download a file from the printer.",
          "line_start": 108,
          "line_end": 110,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "download_file",
          "full_name": "PrusaPrinter.download_file",
          "class": "PrusaPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Prusa printer.",
          "line_start": 477,
          "line_end": 575,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "download_file",
          "full_name": "BambuFTPService.download_file",
          "class": "BambuFTPService",
          "signature": "(self, remote_filename: str, local_path: str, directory: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from the FTP server.\n\nArgs:\n    remote_filename: Name of file to download on the server\n    local_path: Local path where file should be saved\n    directory: Remote directory containing the file (default: /cache)\n\nReturns:\n    True if download successful, False otherwise",
          "line_start": 296,
          "line_end": 366,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "download_file",
          "full_name": "FileService.download_file",
          "class": "FileService",
          "signature": "(self, printer_id: str, filename: str, destination_path: Optional[str])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Download file from printer.",
          "line_start": 192,
          "line_end": 365,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "download_file",
          "full_name": "TestFileAPIPerformance.download_file",
          "class": "TestFileAPIPerformance",
          "signature": "(file_id)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 496,
          "line_end": 503,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_files",
      "count": 8,
      "locations": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "list_files",
          "full_name": "BambuFTP.list_files",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "List files in current directory.",
          "line_start": 69,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "list_files",
          "full_name": "list_files",
          "class": null,
          "signature": "(printer_id: Optional[str], status: Optional[FileStatus], source: Optional[FileSource], has_thumbnail: Optional[bool], search: Optional[str], limit: Optional[int], order_by: Optional[str], order_dir: Optional[str], page: Optional[int], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=FileListResponse)"
          ],
          "docstring": "List files from printers and local storage.",
          "line_start": 61,
          "line_end": 120,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_files",
          "full_name": "Database.list_files",
          "class": "Database",
          "signature": "(self, printer_id: Optional[str], status: Optional[str], source: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List files with optional filtering.",
          "line_start": 613,
          "line_end": 652,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "list_files",
          "full_name": "BambuLabPrinter.list_files",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Bambu Lab printer.",
          "line_start": 840,
          "line_end": 857,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "list_files",
          "full_name": "PrinterInterface.list_files",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "List files available on the printer.",
          "line_start": 103,
          "line_end": 105,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "list_files",
          "full_name": "PrusaPrinter.list_files",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Prusa printer.",
          "line_start": 316,
          "line_end": 397,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "list_files",
          "full_name": "BambuFTPService.list_files",
          "class": "BambuFTPService",
          "signature": "(self, directory: str)",
          "return_type": "List[BambuFTPFile]",
          "decorators": [],
          "docstring": "List files in the specified directory.\n\nArgs:\n    directory: Directory path to list (default: /cache)\n\nReturns:\n    List of BambuFTPFile objects\n\nRaises:\n    ConnectionError: If FTP connection fails\n    PermissionError: If directory access is denied",
          "line_start": 194,
          "line_end": 245,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "list_files",
          "full_name": "LibraryService.list_files",
          "class": "LibraryService",
          "signature": "(self, filters: Dict[str, Any], page: int, limit: int)",
          "return_type": "Tuple[List[Dict[str, Any]], Dict[str, Any]]",
          "decorators": [],
          "docstring": "List files in library with filters and pagination.\n\nArgs:\n    filters: Filter dictionary:\n        - source_type: Filter by source type\n        - file_type: Filter by file extension\n        - status: Filter by status\n        - search: Search query (filename)\n        - has_thumbnail: Filter by thumbnail presence\n        - has_metadata: Filter by metadata presence\n    page: Page number (1-indexed)\n    limit: Items per page\n\nReturns:\n    Tuple of (files list, pagination info)",
          "line_start": 449,
          "line_end": 468,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "connect",
      "count": 5,
      "locations": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "connect",
          "full_name": "BambuFTP.connect",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Connect to FTP server with SSL.",
          "line_start": 21,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "connect",
          "full_name": "ConnectionManager.connect",
          "class": "ConnectionManager",
          "signature": "(self, websocket: WebSocket)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 25,
          "line_end": 28,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "connect",
          "full_name": "BambuLabPrinter.connect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish connection to Bambu Lab printer.",
          "line_start": 98,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "connect",
          "full_name": "PrinterInterface.connect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Establish connection to the printer.",
          "line_start": 83,
          "line_end": 85,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "connect",
          "full_name": "PrusaPrinter.connect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish HTTP connection to Prusa printer.",
          "line_start": 32,
          "line_end": 113,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "initialize",
      "count": 5,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "initialize",
          "full_name": "Database.initialize",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize database and create tables.",
          "line_start": 31,
          "line_end": 44,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "initialize",
          "full_name": "LibraryService.initialize",
          "class": "LibraryService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize library folders and verify configuration.",
          "line_start": 52,
          "line_end": 87,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "initialize",
          "full_name": "MaterialService.initialize",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize material service and create tables.",
          "line_start": 46,
          "line_end": 54,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "initialize",
          "full_name": "PrinterService.initialize",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize printer service and load configured printers.",
          "line_start": 35,
          "line_end": 39,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "initialize",
          "full_name": "TrendingService.initialize",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize trending service and create tables.",
          "line_start": 55,
          "line_end": 63,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "to_dict",
      "count": 5,
      "locations": [
        {
          "file": "src\\models\\idea.py",
          "name": "to_dict",
          "full_name": "Idea.to_dict",
          "class": "Idea",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert idea to dictionary.",
          "line_start": 49,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\idea.py",
          "name": "to_dict",
          "full_name": "TrendingItem.to_dict",
          "class": "TrendingItem",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert trending item to dictionary.",
          "line_start": 138,
          "line_end": 154,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "to_dict",
          "full_name": "WatchFolder.to_dict",
          "class": "WatchFolder",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 47,
          "line_end": 64,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "to_dict",
          "full_name": "BambuFTPFile.to_dict",
          "class": "BambuFTPFile",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 64,
          "line_end": 74,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "to_dict",
          "full_name": "PrinterConfig.to_dict",
          "class": "PrinterConfig",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert PrinterConfig to dictionary.",
          "line_start": 62,
          "line_end": 72,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "take_snapshot",
      "count": 4,
      "locations": [
        {
          "file": "src\\api\\routers\\camera.py",
          "name": "take_snapshot",
          "full_name": "take_snapshot",
          "class": null,
          "signature": "(printer_id: UUID, snapshot_data: SnapshotCreate, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/camera/snapshot', response_model=SnapshotResponse)"
          ],
          "docstring": "Take a camera snapshot and save it.",
          "line_start": 119,
          "line_end": 194,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "take_snapshot",
          "full_name": "BambuLabPrinter.take_snapshot",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Bambu Lab printer.",
          "line_start": 1746,
          "line_end": 1779,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "take_snapshot",
          "full_name": "PrinterInterface.take_snapshot",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Take a camera snapshot and return image data.",
          "line_start": 138,
          "line_end": 140,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "take_snapshot",
          "full_name": "PrusaPrinter.take_snapshot",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Prusa printer.",
          "line_start": 780,
          "line_end": 784,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "health_check",
      "count": 4,
      "locations": [
        {
          "file": "src\\api\\routers\\health.py",
          "name": "health_check",
          "full_name": "health_check",
          "class": null,
          "signature": "(request: Request, config: ConfigService, db: Database)",
          "return_type": "",
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ],
          "docstring": "Enhanced health check endpoint with detailed service status.\nReturns system status and comprehensive information about all services.",
          "line_start": 38,
          "line_end": 158,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "health_check",
          "full_name": "Database.health_check",
          "class": "Database",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check database health.",
          "line_start": 282,
          "line_end": 293,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "health_check",
          "full_name": "BasePrinter.health_check",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if printer is healthy and responsive.",
          "line_start": 253,
          "line_end": 259,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "health_check",
          "full_name": "PrinterService.health_check",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Check health of all printer connections.",
          "line_start": 623,
          "line_end": 651,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_printer",
      "count": 4,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "get_printer",
          "full_name": "get_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/{printer_id}', response_model=PrinterResponse)"
          ],
          "docstring": "Get printer details by ID.",
          "line_start": 177,
          "line_end": 197,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_printer",
          "full_name": "Database.get_printer",
          "class": "Database",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get printer by ID.",
          "line_start": 325,
          "line_end": 332,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printer",
          "full_name": "ConfigService.get_printer",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[PrinterConfig]",
          "decorators": [],
          "docstring": "Get specific printer configuration.",
          "line_start": 311,
          "line_end": 313,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer",
          "full_name": "PrinterService.get_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Printer]",
          "decorators": [],
          "docstring": "Get specific printer by ID as domain model.",
          "line_start": 305,
          "line_end": 331,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_trending",
      "count": 4,
      "locations": [
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "get_trending",
          "full_name": "get_trending",
          "class": null,
          "signature": "(platform: Optional[str], category: Optional[str], limit: int, trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[TrendingModel])"
          ],
          "docstring": "Get trending models from cache.",
          "line_start": 52,
          "line_end": 87,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_trending",
          "full_name": "Database.get_trending",
          "class": "Database",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending items from cache.",
          "line_start": 1023,
          "line_end": 1042,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_trending",
          "full_name": "IdeaService.get_trending",
          "class": "IdeaService",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending models from cache.",
          "line_start": 272,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "get_trending",
          "full_name": "TrendingService.get_trending",
          "class": "TrendingService",
          "signature": "(self, platform: Optional[str], category: Optional[str], limit: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending models from cache.",
          "line_start": 466,
          "line_end": 492,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "disconnect",
      "count": 4,
      "locations": [
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "disconnect",
          "full_name": "ConnectionManager.disconnect",
          "class": "ConnectionManager",
          "signature": "(self, websocket: WebSocket)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 30,
          "line_end": 35,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "disconnect",
          "full_name": "BambuLabPrinter.disconnect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Bambu Lab printer.",
          "line_start": 236,
          "line_end": 260,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "disconnect",
          "full_name": "PrinterInterface.disconnect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Disconnect from the printer.",
          "line_start": 88,
          "line_end": 90,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "disconnect",
          "full_name": "PrusaPrinter.disconnect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Prusa printer.",
          "line_start": 115,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "from_dict",
      "count": 4,
      "locations": [
        {
          "file": "src\\models\\idea.py",
          "name": "from_dict",
          "full_name": "Idea.from_dict",
          "class": "Idea",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'Idea'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create idea from dictionary.",
          "line_start": 74,
          "line_end": 96,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\models\\idea.py",
          "name": "from_dict",
          "full_name": "TrendingItem.from_dict",
          "class": "TrendingItem",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'TrendingItem'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create trending item from dictionary.",
          "line_start": 157,
          "line_end": 173,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "from_dict",
          "full_name": "WatchFolder.from_dict",
          "class": "WatchFolder",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'WatchFolder'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create instance from dictionary.",
          "line_start": 67,
          "line_end": 84,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "from_dict",
          "full_name": "PrinterConfig.from_dict",
          "class": "PrinterConfig",
          "signature": "(cls, printer_id: str, config: Dict[str, Any])",
          "return_type": "'PrinterConfig'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create PrinterConfig from dictionary.",
          "line_start": 49,
          "line_end": 60,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_status",
      "count": 4,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_status",
          "full_name": "BambuLabPrinter.get_status",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Bambu Lab.",
          "line_start": 262,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_status",
          "full_name": "PrinterInterface.get_status",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current printer status.",
          "line_start": 93,
          "line_end": 95,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_status",
          "full_name": "PrusaPrinter.get_status",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Prusa.",
          "line_start": 133,
          "line_end": 236,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\event_service.py",
          "name": "get_status",
          "full_name": "EventService.get_status",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get current event service status.",
          "line_start": 452,
          "line_end": 474,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_statistics",
      "count": 4,
      "locations": [
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_statistics",
          "full_name": "IdeaService.get_statistics",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get idea statistics.",
          "line_start": 197,
          "line_end": 203,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_statistics",
          "full_name": "MaterialService.get_statistics",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "MaterialStats",
          "decorators": [],
          "docstring": "Get material statistics.",
          "line_start": 304,
          "line_end": 384,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "get_statistics",
          "full_name": "PreviewRenderService.get_statistics",
          "class": "PreviewRenderService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get rendering statistics.",
          "line_start": 537,
          "line_end": 549,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "get_statistics",
          "full_name": "TrendingService.get_statistics",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get trending cache statistics with performance metrics.",
          "line_start": 595,
          "line_end": 650,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "analyze_file",
      "count": 3,
      "locations": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "analyze_file",
          "full_name": "analyze_file",
          "class": null,
          "signature": "(filepath: str)",
          "return_type": "Dict",
          "decorators": [],
          "docstring": "Analyze a single Python file",
          "line_start": 145,
          "line_end": 169,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "analyze_file",
          "full_name": "analyze_file",
          "class": null,
          "signature": "(file_id: str, include_recommendations: bool, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}/analysis')"
          ],
          "docstring": "Get detailed file analysis with optimization recommendations.\n\nProvides actionable insights about:\n- Printability score and success probability\n- Risk factors and potential issues\n- Optimization suggestions for speed, quality, or cost\n- Printer compatibility recommendations",
          "line_start": 661,
          "line_end": 760,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\threemf_analyzer.py",
          "name": "analyze_file",
          "full_name": "ThreeMFAnalyzer.analyze_file",
          "class": "ThreeMFAnalyzer",
          "signature": "(self, file_path: Path)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Analyze 3MF file and extract comprehensive metadata.\n\nArgs:\n    file_path: Path to the 3MF file\n    \nReturns:\n    Dictionary containing extracted metadata organized by category",
          "line_start": 22,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_error_statistics",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_error_statistics",
          "full_name": "ErrorStoreService.get_error_statistics",
          "class": "ErrorStoreService",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics for the specified time period.",
          "line_start": 111,
          "line_end": 162,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_error_statistics",
          "full_name": "get_error_statistics",
          "class": null,
          "signature": "(hours: int)",
          "return_type": "",
          "decorators": [
            "router.get('/statistics')"
          ],
          "docstring": "Get error statistics for monitoring dashboard.",
          "line_start": 238,
          "line_end": 251,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "get_error_statistics",
          "full_name": "ErrorHandler.get_error_statistics",
          "class": "ErrorHandler",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics from log file.",
          "line_start": 164,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_file_statistics",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_file_statistics",
          "full_name": "get_file_statistics",
          "class": null,
          "signature": "(file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/statistics')"
          ],
          "docstring": "Get file management statistics.",
          "line_start": 124,
          "line_end": 139,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_file_statistics",
          "full_name": "Database.get_file_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file statistics by source.",
          "line_start": 790,
          "line_end": 820,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_statistics",
          "full_name": "FileService.get_file_statistics",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file management statistics.",
          "line_start": 458,
          "line_end": 536,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_file_by_id",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_file_by_id",
          "full_name": "get_file_by_id",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}', response_model=FileResponse)"
          ],
          "docstring": "Get file information by ID.",
          "line_start": 143,
          "line_end": 163,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_by_id",
          "full_name": "FileService.get_file_by_id",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file information by ID.",
          "line_start": 688,
          "line_end": 707,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_file_by_id",
          "full_name": "LibraryService.get_file_by_id",
          "class": "LibraryService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file from library by ID.\n\nArgs:\n    file_id: File database ID\n\nReturns:\n    File record or None if not found",
          "line_start": 437,
          "line_end": 447,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_watch_folder_settings",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders/settings', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 363,
          "line_end": 378,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 234,
          "line_end": 246,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_watch_folder_settings",
          "full_name": "ConfigService.get_watch_folder_settings",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get all watch folder related settings.",
          "line_start": 441,
          "line_end": 452,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "reload_watch_folders",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "reload_watch_folders",
          "full_name": "reload_watch_folders",
          "class": null,
          "signature": "(file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/reload')"
          ],
          "docstring": "Reload watch folders configuration.",
          "line_start": 421,
          "line_end": 433,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileService.reload_watch_folders",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Reload watch folders configuration.",
          "line_start": 446,
          "line_end": 456,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileWatcherService.reload_watch_folders",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Reload watch folders from configuration.",
          "line_start": 520,
          "line_end": 537,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "validate_watch_folder",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 437,
          "line_end": 450,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 250,
          "line_end": 263,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "validate_watch_folder",
          "full_name": "ConfigService.validate_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Validate a watch folder path.",
          "line_start": 422,
          "line_end": 439,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "delete_file",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "delete_file",
          "full_name": "delete_file",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{file_id}')"
          ],
          "docstring": "Delete a file (for local files, also deletes physical file).",
          "line_start": 574,
          "line_end": 597,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "delete_file",
          "full_name": "FileService.delete_file",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a file record (for local files and downloaded files, also delete physical file).",
          "line_start": 732,
          "line_end": 780,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "delete_file",
          "full_name": "LibraryService.delete_file",
          "class": "LibraryService",
          "signature": "(self, checksum: str, delete_physical: bool)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete file from library.\n\nArgs:\n    checksum: File checksum\n    delete_physical: Whether to delete physical file\n\nReturns:\n    True if successful",
          "line_start": 518,
          "line_end": 558,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_supported_platforms",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\idea_url.py",
          "name": "get_supported_platforms",
          "full_name": "get_supported_platforms",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/platforms', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Get information about supported platforms.",
          "line_start": 77,
          "line_end": 98,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "get_supported_platforms",
          "full_name": "get_supported_platforms",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "router.get('/platforms')"
          ],
          "docstring": "Get list of supported platforms for trending discovery.",
          "line_start": 91,
          "line_end": 108,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "get_supported_platforms",
          "full_name": "UrlParserService.get_supported_platforms",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "list[str]",
          "decorators": [],
          "docstring": "Get list of supported platforms.",
          "line_start": 256,
          "line_end": 258,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "create_idea",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "create_idea",
          "full_name": "create_idea",
          "class": null,
          "signature": "(idea_data: IdeaCreate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=Dict[str, str])"
          ],
          "docstring": "Create a new idea.",
          "line_start": 71,
          "line_end": 95,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_idea",
          "full_name": "Database.create_idea",
          "class": "Database",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new idea record.",
          "line_start": 823,
          "line_end": 851,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "create_idea",
          "full_name": "IdeaService.create_idea",
          "class": "IdeaService",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Create a new idea.",
          "line_start": 24,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_ideas",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "list_ideas",
          "full_name": "list_ideas",
          "class": null,
          "signature": "(status: Optional[str], is_business: Optional[bool], category: Optional[str], source_type: Optional[str], page: int, page_size: int, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=Dict[str, Any])"
          ],
          "docstring": "List ideas with filtering and pagination.",
          "line_start": 99,
          "line_end": 127,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_ideas",
          "full_name": "Database.list_ideas",
          "class": "Database",
          "signature": "(self, status: Optional[str], is_business: Optional[bool], category: Optional[str], source_type: Optional[str], limit: Optional[int], offset: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List ideas with optional filtering and pagination.",
          "line_start": 862,
          "line_end": 900,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "list_ideas",
          "full_name": "IdeaService.list_ideas",
          "class": "IdeaService",
          "signature": "(self, filters: Optional[Dict[str, Any]], page: int, page_size: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "List ideas with filtering and pagination.",
          "line_start": 88,
          "line_end": 132,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_idea",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_idea",
          "full_name": "get_idea",
          "class": null,
          "signature": "(idea_id: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/{idea_id}', response_model=Dict[str, Any])"
          ],
          "docstring": "Get a specific idea by ID.",
          "line_start": 131,
          "line_end": 152,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_idea",
          "full_name": "Database.get_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 853,
          "line_end": 860,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_idea",
          "full_name": "IdeaService.get_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Idea]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 63,
          "line_end": 86,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_idea",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "update_idea",
          "full_name": "update_idea",
          "class": null,
          "signature": "(idea_id: str, idea_data: IdeaUpdate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.put('/{idea_id}', response_model=Dict[str, str])"
          ],
          "docstring": "Update an existing idea.",
          "line_start": 156,
          "line_end": 189,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_idea",
          "full_name": "Database.update_idea",
          "class": "Database",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea with provided fields.",
          "line_start": 902,
          "line_end": 924,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea",
          "full_name": "IdeaService.update_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update an idea.",
          "line_start": 134,
          "line_end": 163,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "delete_idea",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "delete_idea",
          "full_name": "delete_idea",
          "class": null,
          "signature": "(idea_id: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{idea_id}', response_model=Dict[str, str])"
          ],
          "docstring": "Delete an idea.",
          "line_start": 193,
          "line_end": 222,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_idea",
          "full_name": "Database.delete_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea record.",
          "line_start": 926,
          "line_end": 935,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "delete_idea",
          "full_name": "IdeaService.delete_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea.",
          "line_start": 165,
          "line_end": 175,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_idea_status",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "update_idea_status",
          "full_name": "update_idea_status",
          "class": null,
          "signature": "(idea_id: str, status_data: IdeaStatusUpdate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.patch('/{idea_id}/status', response_model=Dict[str, str])"
          ],
          "docstring": "Update idea status.",
          "line_start": 226,
          "line_end": 256,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_idea_status",
          "full_name": "Database.update_idea_status",
          "class": "Database",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 937,
          "line_end": 942,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea_status",
          "full_name": "IdeaService.update_idea_status",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 177,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_all_tags",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_all_tags",
          "full_name": "get_all_tags",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/tags/all', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Get all available tags with usage counts.",
          "line_start": 287,
          "line_end": 297,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_all_tags",
          "full_name": "Database.get_all_tags",
          "class": "Database",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all unique tags with counts.",
          "line_start": 983,
          "line_end": 993,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_all_tags",
          "full_name": "IdeaService.get_all_tags",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all available tags with usage counts.",
          "line_start": 189,
          "line_end": 195,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "save_trending_as_idea",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "save_trending_as_idea",
          "full_name": "save_trending_as_idea",
          "class": null,
          "signature": "(trending_id: str, save_data: TrendingSave, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/trending/{trending_id}/save', response_model=Dict[str, str])"
          ],
          "docstring": "Save a trending model as a personal idea.",
          "line_start": 368,
          "line_end": 391,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "save_trending_as_idea",
          "full_name": "save_trending_as_idea",
          "class": null,
          "signature": "(trending_id: str, request: SaveTrendingRequest, trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.post('/{trending_id}/save', response_model=dict, status_code=201)"
          ],
          "docstring": "Save a trending item as a personal idea.",
          "line_start": 157,
          "line_end": 178,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "save_trending_as_idea",
          "full_name": "IdeaService.save_trending_as_idea",
          "class": "IdeaService",
          "signature": "(self, trending_id: str, additional_data: Optional[Dict[str, Any]])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Save a trending model as a personal idea.",
          "line_start": 283,
          "line_end": 318,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_jobs",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "list_jobs",
          "full_name": "list_jobs",
          "class": null,
          "signature": "(printer_id: Optional[str], job_status: Optional[str], is_business: Optional[bool], limit: int, offset: int, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[JobResponse])"
          ],
          "docstring": "List jobs with optional filtering.",
          "line_start": 78,
          "line_end": 101,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_jobs",
          "full_name": "Database.list_jobs",
          "class": "Database",
          "signature": "(self, printer_id: Optional[str], status: Optional[str], is_business: Optional[bool], limit: Optional[int], offset: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List jobs with optional filtering and pagination.",
          "line_start": 396,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "list_jobs",
          "full_name": "JobService.list_jobs",
          "class": "JobService",
          "signature": "(self, printer_id, status, is_business, limit: int, offset: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List jobs with optional filtering.",
          "line_start": 80,
          "line_end": 140,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_job",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "get_job",
          "full_name": "get_job",
          "class": null,
          "signature": "(job_id: str, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.get('/{job_id}', response_model=JobResponse)"
          ],
          "docstring": "Get job details by ID.",
          "line_start": 105,
          "line_end": 125,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_job",
          "full_name": "Database.get_job",
          "class": "Database",
          "signature": "(self, job_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get job by ID.",
          "line_start": 384,
          "line_end": 394,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_job",
          "full_name": "JobService.get_job",
          "class": "JobService",
          "signature": "(self, job_id)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get specific job by ID.",
          "line_start": 142,
          "line_end": 165,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "delete_job",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "delete_job",
          "full_name": "delete_job",
          "class": null,
          "signature": "(job_id: UUID, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{job_id}', status_code=status.HTTP_204_NO_CONTENT)"
          ],
          "docstring": "Delete a job record.",
          "line_start": 129,
          "line_end": 148,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_job",
          "full_name": "Database.delete_job",
          "class": "Database",
          "signature": "(self, job_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a job record from the database.",
          "line_start": 545,
          "line_end": 554,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "delete_job",
          "full_name": "JobService.delete_job",
          "class": "JobService",
          "signature": "(self, job_id)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a job record.",
          "line_start": 167,
          "line_end": 191,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_printers",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "list_printers",
          "full_name": "list_printers",
          "class": null,
          "signature": "(printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[PrinterResponse])"
          ],
          "docstring": "List all configured printers.",
          "line_start": 130,
          "line_end": 142,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_printers",
          "full_name": "Database.list_printers",
          "class": "Database",
          "signature": "(self, active_only: bool)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List all printers.",
          "line_start": 334,
          "line_end": 345,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "list_printers",
          "full_name": "PrinterService.list_printers",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "List[Printer]",
          "decorators": [],
          "docstring": "Get list of all configured printers as Printer objects.",
          "line_start": 254,
          "line_end": 286,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "create_printer",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "create_printer",
          "full_name": "create_printer",
          "class": null,
          "signature": "(printer_data: PrinterCreateRequest, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=PrinterResponse, status_code=status.HTTP_201_CREATED)"
          ],
          "docstring": "Create a new printer configuration.",
          "line_start": 146,
          "line_end": 173,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_printer",
          "full_name": "Database.create_printer",
          "class": "Database",
          "signature": "(self, printer_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new printer record.",
          "line_start": 304,
          "line_end": 323,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "create_printer",
          "full_name": "PrinterService.create_printer",
          "class": "PrinterService",
          "signature": "(self, name: str, printer_type: PrinterType, connection_config: Dict[str, Any], location: Optional[str], description: Optional[str])",
          "return_type": "Printer",
          "decorators": [],
          "docstring": "Create a new printer configuration.",
          "line_start": 671,
          "line_end": 721,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_printer_files",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "get_printer_files",
          "full_name": "get_printer_files",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/{printer_id}/files')"
          ],
          "docstring": "Get files from a specific printer.",
          "line_start": 398,
          "line_end": 414,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_printer_files",
          "full_name": "FileService.get_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get files available on specific printer.",
          "line_start": 154,
          "line_end": 190,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer_files",
          "full_name": "PrinterService.get_printer_files",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of files available on printer.",
          "line_start": 502,
          "line_end": 524,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "cleanup_expired",
      "count": 3,
      "locations": [
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "cleanup_expired",
          "full_name": "cleanup_expired",
          "class": null,
          "signature": "(trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.delete('/cleanup', status_code=204)"
          ],
          "docstring": "Clean up expired trending cache entries.",
          "line_start": 225,
          "line_end": 232,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup_expired",
          "full_name": "ThumbnailService.cleanup_expired",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clean up expired thumbnail cache files.",
          "line_start": 210,
          "line_end": 231,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup_expired",
          "full_name": "TrendingService.cleanup_expired",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Remove expired cache entries.",
          "line_start": 524,
          "line_end": 546,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "_create_tables",
      "count": 3,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "_create_tables",
          "full_name": "Database._create_tables",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create database tables if they don't exist.",
          "line_start": 46,
          "line_end": 192,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "_create_tables",
          "full_name": "MaterialService._create_tables",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create material-related database tables.",
          "line_start": 56,
          "line_end": 106,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "_create_tables",
          "full_name": "TrendingService._create_tables",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create trending-related database tables.",
          "line_start": 65,
          "line_end": 93,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "create_job",
      "count": 3,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "create_job",
          "full_name": "Database.create_job",
          "class": "Database",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new job record.",
          "line_start": 361,
          "line_end": 382,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "create_job",
          "full_name": "JobService.create_job",
          "class": "JobService",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "str",
          "decorators": [],
          "docstring": "Create a new print job.",
          "line_start": 230,
          "line_end": 285,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "create_job",
          "full_name": "TestConcurrencyErrorHandling.create_job",
          "class": "TestConcurrencyErrorHandling",
          "signature": "(result_list)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 509,
          "line_end": 514,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_job_info",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_job_info",
          "full_name": "BambuLabPrinter.get_job_info",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Bambu Lab.",
          "line_start": 750,
          "line_end": 789,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_job_info",
          "full_name": "PrinterInterface.get_job_info",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current job information.",
          "line_start": 98,
          "line_end": 100,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_job_info",
          "full_name": "PrusaPrinter.get_job_info",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Prusa.",
          "line_start": 253,
          "line_end": 297,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "pause_print",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "pause_print",
          "full_name": "BambuLabPrinter.pause_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Bambu Lab printer.",
          "line_start": 1642,
          "line_end": 1663,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "pause_print",
          "full_name": "PrinterInterface.pause_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Pause the current print job.",
          "line_start": 113,
          "line_end": 115,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "pause_print",
          "full_name": "PrusaPrinter.pause_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Prusa printer.",
          "line_start": 696,
          "line_end": 718,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "resume_print",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "resume_print",
          "full_name": "BambuLabPrinter.resume_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Bambu Lab printer.",
          "line_start": 1665,
          "line_end": 1686,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "resume_print",
          "full_name": "PrinterInterface.resume_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Resume the paused print job.",
          "line_start": 118,
          "line_end": 120,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "resume_print",
          "full_name": "PrusaPrinter.resume_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Prusa printer.",
          "line_start": 720,
          "line_end": 742,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "stop_print",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "stop_print",
          "full_name": "BambuLabPrinter.stop_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Bambu Lab printer.",
          "line_start": 1688,
          "line_end": 1709,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "stop_print",
          "full_name": "PrinterInterface.stop_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Stop/cancel the current print job.",
          "line_start": 123,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "stop_print",
          "full_name": "PrusaPrinter.stop_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Prusa printer.",
          "line_start": 744,
          "line_end": 766,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "has_camera",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "has_camera",
          "full_name": "BambuLabPrinter.has_camera",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Bambu Lab printer has camera support.",
          "line_start": 1711,
          "line_end": 1723,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "has_camera",
          "full_name": "PrinterInterface.has_camera",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Check if printer has camera support.",
          "line_start": 128,
          "line_end": 130,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "has_camera",
          "full_name": "PrusaPrinter.has_camera",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Prusa printer has camera support.",
          "line_start": 768,
          "line_end": 772,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_camera_stream_url",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_camera_stream_url",
          "full_name": "BambuLabPrinter.get_camera_stream_url",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Bambu Lab printer.",
          "line_start": 1725,
          "line_end": 1744,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_camera_stream_url",
          "full_name": "PrinterInterface.get_camera_stream_url",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get camera stream URL if available.",
          "line_start": 133,
          "line_end": 135,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_camera_stream_url",
          "full_name": "PrusaPrinter.get_camera_stream_url",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Prusa printer.",
          "line_start": 774,
          "line_end": 778,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "start_monitoring",
      "count": 3,
      "locations": [
        {
          "file": "src\\printers\\base.py",
          "name": "start_monitoring",
          "full_name": "BasePrinter.start_monitoring",
          "class": "BasePrinter",
          "signature": "(self, interval: int)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Start periodic status monitoring.",
          "line_start": 168,
          "line_end": 183,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\monitoring_service.py",
          "name": "start_monitoring",
          "full_name": "MonitoringService.start_monitoring",
          "class": "MonitoringService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start the monitoring service.",
          "line_start": 40,
          "line_end": 49,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "start_monitoring",
          "full_name": "PrinterService.start_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: Optional[str])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Start printer monitoring for all or specific printer.",
          "line_start": 430,
          "line_end": 473,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "cleanup",
      "count": 3,
      "locations": [
        {
          "file": "src\\services\\material_service.py",
          "name": "cleanup",
          "full_name": "MaterialService.cleanup",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up material service resources.",
          "line_start": 539,
          "line_end": 542,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup",
          "full_name": "ThumbnailService.cleanup",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up thumbnail service resources.",
          "line_start": 315,
          "line_end": 321,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup",
          "full_name": "TrendingService.cleanup",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up trending service resources.",
          "line_start": 652,
          "line_end": 660,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "_get_session",
      "count": 3,
      "locations": [
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "_get_session",
          "full_name": "ThumbnailService._get_session",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session.",
          "line_start": 37,
          "line_end": 45,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "_get_session",
          "full_name": "TrendingService._get_session",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session with proper error handling.",
          "line_start": 150,
          "line_end": 185,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "_get_session",
          "full_name": "UrlParserService._get_session",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session.",
          "line_start": 22,
          "line_end": 30,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "dispatch",
      "count": 3,
      "locations": [
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "RequestTimingMiddleware.dispatch",
          "class": "RequestTimingMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Process request and measure timing.",
          "line_start": 17,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "SecurityHeadersMiddleware.dispatch",
          "class": "SecurityHeadersMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Add security headers to response.",
          "line_start": 46,
          "line_end": 73,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "GermanComplianceMiddleware.dispatch",
          "class": "GermanComplianceMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Ensure German compliance standards.",
          "line_start": 79,
          "line_end": 102,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "run_frontend_tests",
      "count": 3,
      "locations": [
        {
          "file": "tests\\run_essential_tests.py",
          "name": "run_frontend_tests",
          "full_name": "run_frontend_tests",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run essential frontend tests if Node.js is available.",
          "line_start": 131,
          "line_end": 162,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "run_frontend_tests",
          "full_name": "Milestone12TestRunner.run_frontend_tests",
          "class": "Milestone12TestRunner",
          "signature": "(self, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run frontend JavaScript tests if available.",
          "line_start": 134,
          "line_end": 169,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "run_frontend_tests",
          "full_name": "PrinternizerTestRunner.run_frontend_tests",
          "class": "PrinternizerTestRunner",
          "signature": "(self, test_type, coverage, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run frontend JavaScript tests",
          "line_start": 80,
          "line_end": 124,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "_print_summary",
      "count": 2,
      "locations": [
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "_print_summary",
          "full_name": "BambuDownloadManager._print_summary",
          "class": "BambuDownloadManager",
          "signature": "(self, summary: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Print download summary.",
          "line_start": 309,
          "line_end": 322,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "_print_summary",
          "full_name": "BambuFTPTester._print_summary",
          "class": "BambuFTPTester",
          "signature": "(self, summary: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Print test summary.",
          "line_start": 333,
          "line_end": 358,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "generate_report",
      "count": 2,
      "locations": [
        {
          "file": "scripts\\error_analysis_agent.py",
          "name": "generate_report",
          "full_name": "ErrorAnalysisAgent.generate_report",
          "class": "ErrorAnalysisAgent",
          "signature": "(self, output_format)",
          "return_type": "",
          "decorators": [],
          "docstring": "Generate comprehensive error analysis report.",
          "line_start": 182,
          "line_end": 200,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "generate_report",
          "full_name": "MaterialService.generate_report",
          "class": "MaterialService",
          "signature": "(self, start_date: datetime, end_date: datetime)",
          "return_type": "MaterialReport",
          "decorators": [],
          "docstring": "Generate material consumption report for a period.",
          "line_start": 402,
          "line_end": 511,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_business_analytics",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\analytics.py",
          "name": "get_business_analytics",
          "full_name": "get_business_analytics",
          "class": null,
          "signature": "(start_date: Optional[date], end_date: Optional[date], analytics_service: AnalyticsService)",
          "return_type": "",
          "decorators": [
            "router.get('/business', response_model=BusinessAnalyticsResponse)"
          ],
          "docstring": "Get business analytics for print operations.",
          "line_start": 66,
          "line_end": 80,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\analytics_service.py",
          "name": "get_business_analytics",
          "full_name": "AnalyticsService.get_business_analytics",
          "class": "AnalyticsService",
          "signature": "(self, start_date: Optional[datetime], end_date: Optional[datetime])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get business analytics for the specified period.",
          "line_start": 168,
          "line_end": 221,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_thumbnail_processing_log",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\debug.py",
          "name": "get_thumbnail_processing_log",
          "full_name": "get_thumbnail_processing_log",
          "class": null,
          "signature": "(request: Request, limit: int)",
          "return_type": "",
          "decorators": [
            "router.get('/thumbnail-processing-log', tags=['Debug'], summary='Get thumbnail processing status log')"
          ],
          "docstring": "Return recent thumbnail processing attempts with status and details.\n\nHelps debug why thumbnail extraction might be failing for specific files.\nShows the last processing attempts with timestamps, file types, and error details.",
          "line_start": 98,
          "line_end": 154,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_thumbnail_processing_log",
          "full_name": "FileService.get_thumbnail_processing_log",
          "class": "FileService",
          "signature": "(self, limit: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get recent thumbnail processing log entries.",
          "line_start": 1001,
          "line_end": 1005,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "ensure_log_directory",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorStoreService.ensure_log_directory",
          "class": "ErrorStoreService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 53,
          "line_end": 55,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorHandler.ensure_log_directory",
          "class": "ErrorHandler",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 49,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_recent_errors",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_recent_errors",
          "full_name": "ErrorStoreService.get_recent_errors",
          "class": "ErrorStoreService",
          "signature": "(self, limit: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get recent error reports.",
          "line_start": 87,
          "line_end": 109,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_recent_errors",
          "full_name": "get_recent_errors",
          "class": null,
          "signature": "(limit: int)",
          "return_type": "",
          "decorators": [
            "router.get('/recent')"
          ],
          "docstring": "Get recent error reports for monitoring.",
          "line_start": 220,
          "line_end": 234,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "sync_printer_files",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "sync_printer_files",
          "full_name": "sync_printer_files",
          "class": null,
          "signature": "(printer_id: Optional[str], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/sync')"
          ],
          "docstring": "Synchronize file list with printers.",
          "line_start": 208,
          "line_end": 221,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "sync_printer_files",
          "full_name": "FileService.sync_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Synchronize files from a specific printer.",
          "line_start": 599,
          "line_end": 646,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "process_file_thumbnails",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "process_file_thumbnails",
          "full_name": "process_file_thumbnails",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/{file_id}/process-thumbnails')"
          ],
          "docstring": "Manually trigger thumbnail processing for a file.",
          "line_start": 321,
          "line_end": 356,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "process_file_thumbnails",
          "full_name": "FileService.process_file_thumbnails",
          "class": "FileService",
          "signature": "(self, file_path: str, file_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Process a file to extract thumbnails and metadata using Bambu parser.\n\nArgs:\n    file_path: Local path to the file\n    file_id: File ID in database\n    \nReturns:\n    True if processing was successful, False otherwise",
          "line_start": 803,
          "line_end": 980,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_local_files",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "list_local_files",
          "full_name": "list_local_files",
          "class": null,
          "signature": "(watch_folder_path: Optional[str], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/local')"
          ],
          "docstring": "List local files from watch folders.",
          "line_start": 399,
          "line_end": 417,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_local_files",
          "full_name": "Database.list_local_files",
          "class": "Database",
          "signature": "(self, watch_folder_path: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List local files from watch folders.",
          "line_start": 763,
          "line_end": 780,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "add_watch_folder",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "add_watch_folder",
          "full_name": "add_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/add')"
          ],
          "docstring": "Add a new watch folder.",
          "line_start": 454,
          "line_end": 488,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "add_watch_folder",
          "full_name": "ConfigService.add_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Add a watch folder to the database configuration.",
          "line_start": 579,
          "line_end": 611,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "remove_watch_folder",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "remove_watch_folder",
          "full_name": "remove_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.delete('/watch-folders/remove')"
          ],
          "docstring": "Remove a watch folder.",
          "line_start": 492,
          "line_end": 518,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "remove_watch_folder",
          "full_name": "ConfigService.remove_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Remove a watch folder from the database configuration.",
          "line_start": 613,
          "line_end": 633,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_watch_folder",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "update_watch_folder",
          "full_name": "update_watch_folder",
          "class": null,
          "signature": "(folder_path: str, is_active: bool, config_service: ConfigService, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.patch('/watch-folders/update')"
          ],
          "docstring": "Update watch folder activation status.",
          "line_start": 522,
          "line_end": 570,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "update_watch_folder",
          "full_name": "WatchFolderDbService.update_watch_folder",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_id: int, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update watch folder fields.",
          "line_start": 125,
          "line_end": 171,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "validate_url",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\idea_url.py",
          "name": "validate_url",
          "full_name": "validate_url",
          "class": null,
          "signature": "(url: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/validate', response_model=Dict[str, Any])"
          ],
          "docstring": "Validate if URL is from a supported platform.",
          "line_start": 20,
          "line_end": 39,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "validate_url",
          "full_name": "UrlParserService.validate_url",
          "class": "UrlParserService",
          "signature": "(self, url: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Validate if URL is from a supported platform.",
          "line_start": 243,
          "line_end": 254,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_idea_statistics",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_idea_statistics",
          "full_name": "get_idea_statistics",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/stats/overview', response_model=Dict[str, Any])"
          ],
          "docstring": "Get idea statistics.",
          "line_start": 301,
          "line_end": 311,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_idea_statistics",
          "full_name": "Database.get_idea_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get idea statistics.",
          "line_start": 1055,
          "line_end": 1096,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "search_ideas",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "search_ideas",
          "full_name": "search_ideas",
          "class": null,
          "signature": "(q: str, status: Optional[str], is_business: Optional[bool], category: Optional[str], idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/search', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Search ideas by title, description, and tags.",
          "line_start": 315,
          "line_end": 337,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "search_ideas",
          "full_name": "IdeaService.search_ideas",
          "class": "IdeaService",
          "signature": "(self, query: str, filters: Optional[Dict[str, Any]])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Search ideas by title and description.",
          "line_start": 332,
          "line_end": 353,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "list_library_files",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "list_library_files",
          "full_name": "list_library_files",
          "class": null,
          "signature": "(page: int, limit: int, source_type: Optional[str], file_type: Optional[str], status: Optional[str], search: Optional[str], has_thumbnail: Optional[bool], has_metadata: Optional[bool], manufacturer: Optional[str], printer_model: Optional[str], show_duplicates: Optional[bool], only_duplicates: Optional[bool], library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/files', response_model=LibraryFileListResponse)"
          ],
          "docstring": "List library files with filters and pagination.\n\n**Filters:**\n- `source_type`: Filter by where file came from (printer/watch_folder/upload)\n- `file_type`: Filter by file extension (.3mf, .stl, etc.)\n- `status`: Filter by processing status\n- `search`: Search in filename (case-insensitive)\n- `has_thumbnail`: Only files with/without thumbnails\n- `has_metadata`: Only files with/without extracted metadata\n- `manufacturer`: Filter by printer manufacturer (bambu_lab, prusa_research)\n- `printer_model`: Filter by printer model (A1, P1P, Core One, MK4, etc.)\n\n**Pagination:**\n- `page`: Page number (starts at 1)\n- `limit`: Items per page (default 50, max 200)\n\n**Sorting:**\n- Files are sorted by date added (newest first)\n\n**Returns:**\n- `files`: Array of file objects\n- `pagination`: Pagination metadata (page, limit, total_items, total_pages)",
          "line_start": 91,
          "line_end": 164,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_library_files",
          "full_name": "Database.list_library_files",
          "class": "Database",
          "signature": "(self, filters: Optional[Dict[str, Any]], page: int, limit: int)",
          "return_type": "tuple",
          "decorators": [],
          "docstring": "List library files with filters and pagination.\n\nReturns:\n    Tuple of (files_list, pagination_info)",
          "line_start": 1170,
          "line_end": 1288,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_library_file",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "get_library_file",
          "full_name": "get_library_file",
          "class": null,
          "signature": "(checksum: str, library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/files/{checksum}', response_model=LibraryFileResponse)"
          ],
          "docstring": "Get library file details by checksum.\n\n**Parameters:**\n- `checksum`: File SHA-256 checksum (hexadecimal)\n\n**Returns:**\n- Complete file record with all metadata\n- Sources (where file was discovered)\n- Enhanced metadata (dimensions, materials, costs)\n\n**Error Responses:**\n- `404`: File not found in library\n- `500`: Internal server error",
          "line_start": 168,
          "line_end": 202,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_library_file",
          "full_name": "Database.get_library_file",
          "class": "Database",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get library file by ID.",
          "line_start": 1133,
          "line_end": 1139,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "delete_library_file",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "delete_library_file",
          "full_name": "delete_library_file",
          "class": null,
          "signature": "(checksum: str, delete_physical: bool, library_service)",
          "return_type": "",
          "decorators": [
            "router.delete('/files/{checksum}', response_model=DeleteResponse)"
          ],
          "docstring": "Delete file from library.\n\n**Parameters:**\n- `checksum`: File SHA-256 checksum\n- `delete_physical`: Whether to delete physical file (default: true)\n\n**Warning:** This operation cannot be undone!\n\n**Process:**\n1. Remove file record from database\n2. Remove all source associations\n3. Optionally delete physical file from library folder\n4. Delete thumbnails and previews\n\n**Returns:**\n- `success`: Whether deletion succeeded\n- `checksum`: File checksum\n- `message`: Status message\n\n**Error Responses:**\n- `404`: File not found\n- `500`: Deletion failed",
          "line_start": 268,
          "line_end": 325,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_library_file",
          "full_name": "Database.delete_library_file",
          "class": "Database",
          "signature": "(self, checksum: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete library file by checksum.",
          "line_start": 1163,
          "line_end": 1168,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_library_statistics",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "get_library_statistics",
          "full_name": "get_library_statistics",
          "class": null,
          "signature": "(library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/statistics', response_model=LibraryStatsResponse)"
          ],
          "docstring": "Get library statistics.\n\n**Returns:**\n- `total_files`: Total number of files in library\n- `total_size`: Total size of all files (bytes)\n- `files_with_thumbnails`: Files with generated thumbnails\n- `files_analyzed`: Files with extracted metadata\n- `available_files`: Files ready for use\n- `processing_files`: Files being processed\n- `error_files`: Files with errors\n- `unique_file_types`: Number of different file types\n- `avg_file_size`: Average file size (bytes)\n- `total_material_cost`: Sum of all material costs (EUR)\n\n**Use Cases:**\n- Dashboard widgets\n- Storage management\n- Library health monitoring",
          "line_start": 329,
          "line_end": 371,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_library_statistics",
          "full_name": "LibraryService.get_library_statistics",
          "class": "LibraryService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get library statistics.\n\nReturns:\n    Statistics dictionary",
          "line_start": 560,
          "line_end": 567,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "export_inventory",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "export_inventory",
          "full_name": "export_inventory",
          "class": null,
          "signature": "(format: str, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.get('/export')"
          ],
          "docstring": "Export material inventory to file.",
          "line_start": 153,
          "line_end": 178,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "export_inventory",
          "full_name": "MaterialService.export_inventory",
          "class": "MaterialService",
          "signature": "(self, file_path: Path)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Export material inventory to CSV.",
          "line_start": 513,
          "line_end": 537,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_material",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "get_material",
          "full_name": "get_material",
          "class": null,
          "signature": "(material_id: str, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.get('/{material_id}', response_model=MaterialResponse)"
          ],
          "docstring": "Get a specific material by ID.",
          "line_start": 182,
          "line_end": 213,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_material",
          "full_name": "MaterialService.get_material",
          "class": "MaterialService",
          "signature": "(self, material_id: str)",
          "return_type": "Optional[MaterialSpool]",
          "decorators": [],
          "docstring": "Get material by ID.",
          "line_start": 284,
          "line_end": 286,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "create_material",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "create_material",
          "full_name": "create_material",
          "class": null,
          "signature": "(material_data: MaterialCreate, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=MaterialResponse, status_code=201)"
          ],
          "docstring": "Create a new material spool.",
          "line_start": 217,
          "line_end": 246,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "create_material",
          "full_name": "MaterialService.create_material",
          "class": "MaterialService",
          "signature": "(self, material_data: MaterialCreate)",
          "return_type": "MaterialSpool",
          "decorators": [],
          "docstring": "Create a new material spool.",
          "line_start": 139,
          "line_end": 182,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_material",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "update_material",
          "full_name": "update_material",
          "class": null,
          "signature": "(material_id: str, update_data: MaterialUpdate, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.patch('/{material_id}', response_model=MaterialResponse)"
          ],
          "docstring": "Update material information.",
          "line_start": 250,
          "line_end": 282,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "update_material",
          "full_name": "MaterialService.update_material",
          "class": "MaterialService",
          "signature": "(self, material_id: str, update_data: MaterialUpdate)",
          "return_type": "Optional[MaterialSpool]",
          "decorators": [],
          "docstring": "Update material spool.",
          "line_start": 184,
          "line_end": 222,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "record_consumption",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "record_consumption",
          "full_name": "record_consumption",
          "class": null,
          "signature": "(consumption_data: ConsumptionRequest, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.post('/consumption', response_model=dict, status_code=201)"
          ],
          "docstring": "Record material consumption for a job.",
          "line_start": 286,
          "line_end": 315,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "record_consumption",
          "full_name": "MaterialService.record_consumption",
          "class": "MaterialService",
          "signature": "(self, job_id: str, material_id: str, weight_grams: float, printer_id: str, file_name: Optional[str], print_time_hours: Optional[float])",
          "return_type": "MaterialConsumption",
          "decorators": [],
          "docstring": "Record material consumption for a job.",
          "line_start": 224,
          "line_end": 282,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "update_printer",
          "full_name": "update_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_data: PrinterUpdateRequest, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.put('/{printer_id}', response_model=PrinterResponse)"
          ],
          "docstring": "Update printer configuration.",
          "line_start": 201,
          "line_end": 227,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "update_printer",
          "full_name": "PrinterService.update_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: UUID)",
          "return_type": "Optional[Printer]",
          "decorators": [],
          "docstring": "Update printer configuration.",
          "line_start": 723,
          "line_end": 773,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "delete_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "delete_printer",
          "full_name": "delete_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{printer_id}', status_code=status.HTTP_204_NO_CONTENT)"
          ],
          "docstring": "Delete a printer configuration.",
          "line_start": 231,
          "line_end": 250,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "delete_printer",
          "full_name": "PrinterService.delete_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: UUID)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a printer configuration.",
          "line_start": 775,
          "line_end": 787,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "connect_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "connect_printer",
          "full_name": "connect_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/connect')"
          ],
          "docstring": "Connect to printer.",
          "line_start": 254,
          "line_end": 274,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "connect_printer",
          "full_name": "PrinterService.connect_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Connect to a specific printer.",
          "line_start": 370,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "disconnect_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "disconnect_printer",
          "full_name": "disconnect_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/disconnect')"
          ],
          "docstring": "Disconnect from printer.",
          "line_start": 278,
          "line_end": 291,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "disconnect_printer",
          "full_name": "PrinterService.disconnect_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Disconnect from a specific printer.",
          "line_start": 391,
          "line_end": 402,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "pause_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "pause_printer",
          "full_name": "pause_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/pause')"
          ],
          "docstring": "Pause the current print job.",
          "line_start": 295,
          "line_end": 316,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "pause_printer",
          "full_name": "PrinterService.pause_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause printing on a specific printer.",
          "line_start": 789,
          "line_end": 801,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "resume_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "resume_printer",
          "full_name": "resume_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/resume')"
          ],
          "docstring": "Resume the paused print job.",
          "line_start": 320,
          "line_end": 341,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "resume_printer",
          "full_name": "PrinterService.resume_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume printing on a specific printer.",
          "line_start": 803,
          "line_end": 815,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "stop_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "stop_printer",
          "full_name": "stop_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/stop')"
          ],
          "docstring": "Stop/cancel the current print job.",
          "line_start": 345,
          "line_end": 366,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_printer",
          "full_name": "PrinterService.stop_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel printing on a specific printer.",
          "line_start": 817,
          "line_end": 829,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "download_current_job_file",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "download_current_job_file",
          "full_name": "download_current_job_file",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/download-current-job')"
          ],
          "docstring": "Explicitly trigger download + processing of the currently printing job file.\n\nReturns a JSON dict with a status field describing the outcome:\n- success: File downloaded (or already local) and thumbnail processing triggered/completed\n- exists_with_thumbnail: File already present locally with thumbnail\n- exists_no_thumbnail: File present but had no thumbnail extracted (non-print file or parsing failed)\n- not_printing: Printer not currently printing / no active job\n- printer_not_found: Unknown printer id\n- error: Unexpected failure (see message)",
          "line_start": 370,
          "line_end": 394,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "download_current_job_file",
          "full_name": "PrinterService.download_current_job_file",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Download (and process) the currently printing job file to generate a thumbnail.\n\nLogic:\n  1. Get current status\n  2. If no active job -> return informative response\n  3. If file already known & has thumbnail -> return existing\n  4. If file known but no thumbnail & local path present -> process thumbnails directly\n  5. Else attempt download from printer (FileService handles async thumbnail processing)",
          "line_start": 552,
          "line_end": 621,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "start_printer_monitoring",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "start_printer_monitoring",
          "full_name": "start_printer_monitoring",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/monitoring/start')"
          ],
          "docstring": "Start monitoring for a specific printer.",
          "line_start": 418,
          "line_end": 439,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "start_printer_monitoring",
          "full_name": "PrinterService.start_printer_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Start monitoring for a specific printer.",
          "line_start": 831,
          "line_end": 847,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "stop_printer_monitoring",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "stop_printer_monitoring",
          "full_name": "stop_printer_monitoring",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/monitoring/stop')"
          ],
          "docstring": "Stop monitoring for a specific printer.",
          "line_start": 443,
          "line_end": 464,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_printer_monitoring",
          "full_name": "PrinterService.stop_printer_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop monitoring for a specific printer.",
          "line_start": 849,
          "line_end": 862,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "download_printer_file",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "download_printer_file",
          "full_name": "download_printer_file",
          "class": null,
          "signature": "(printer_id: UUID, filename: str, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/files/{filename}/download')"
          ],
          "docstring": "Download a specific file from printer to local storage.",
          "line_start": 468,
          "line_end": 490,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "download_printer_file",
          "full_name": "PrinterService.download_printer_file",
          "class": "PrinterService",
          "signature": "(self, printer_id: str, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from printer.",
          "line_start": 526,
          "line_end": 550,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_application_settings",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_application_settings",
          "full_name": "get_application_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/application', response_model=ApplicationSettingsResponse)"
          ],
          "docstring": "Get all application settings.",
          "line_start": 97,
          "line_end": 109,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_application_settings",
          "full_name": "ConfigService.get_application_settings",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get all application settings.",
          "line_start": 454,
          "line_end": 482,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_application_settings",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "update_application_settings",
          "full_name": "update_application_settings",
          "class": null,
          "signature": "(settings: ApplicationSettingsUpdate, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.put('/application')"
          ],
          "docstring": "Update application settings (runtime-updatable only).",
          "line_start": 113,
          "line_end": 137,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "update_application_settings",
          "full_name": "ConfigService.update_application_settings",
          "class": "ConfigService",
          "signature": "(self, settings_dict: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update runtime-modifiable application settings.",
          "line_start": 490,
          "line_end": 531,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "remove_printer",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "remove_printer",
          "full_name": "remove_printer",
          "class": null,
          "signature": "(printer_id: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.delete('/printers/{printer_id}')"
          ],
          "docstring": "Remove a printer configuration.",
          "line_start": 192,
          "line_end": 213,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "remove_printer",
          "full_name": "ConfigService.remove_printer",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Remove printer configuration.",
          "line_start": 338,
          "line_end": 345,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "validate_printer_connection",
      "count": 2,
      "locations": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "validate_printer_connection",
          "full_name": "validate_printer_connection",
          "class": null,
          "signature": "(printer_id: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/printers/{printer_id}/validate')"
          ],
          "docstring": "Validate printer connection configuration.",
          "line_start": 217,
          "line_end": 230,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "validate_printer_connection",
          "full_name": "ConfigService.validate_printer_connection",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Validate printer connection configuration.",
          "line_start": 372,
          "line_end": 382,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "close",
      "count": 2,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "close",
          "full_name": "Database.close",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close database connection.",
          "line_start": 263,
          "line_end": 267,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "close",
          "full_name": "UrlParserService.close",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close HTTP session.",
          "line_start": 32,
          "line_end": 36,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_connection",
      "count": 2,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "get_connection",
          "full_name": "Database.get_connection",
          "class": "Database",
          "signature": "(self)",
          "return_type": "aiosqlite.Connection",
          "decorators": [],
          "docstring": "Get database connection.",
          "line_start": 269,
          "line_end": 273,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "get_connection",
          "full_name": "DatabaseConnectionPool.get_connection",
          "class": "DatabaseConnectionPool",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 679,
          "line_end": 685,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_jobs_by_date_range",
      "count": 2,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "get_jobs_by_date_range",
          "full_name": "Database.get_jobs_by_date_range",
          "class": "Database",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting.",
          "line_start": 435,
          "line_end": 453,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_jobs_by_date_range",
          "full_name": "JobService.get_jobs_by_date_range",
          "class": "JobService",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting purposes.",
          "line_start": 391,
          "line_end": 424,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_job_statistics",
      "count": 2,
      "locations": [
        {
          "file": "src\\database\\database.py",
          "name": "get_job_statistics",
          "full_name": "Database.get_job_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get comprehensive job statistics.",
          "line_start": 455,
          "line_end": 517,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_job_statistics",
          "full_name": "JobService.get_job_statistics",
          "class": "JobService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get job statistics for dashboard.",
          "line_start": 339,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "_map_job_status",
      "count": 2,
      "locations": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "_map_job_status",
          "full_name": "BambuLabPrinter._map_job_status",
          "class": "BambuLabPrinter",
          "signature": "(self, bambu_status)",
          "return_type": "JobStatus",
          "decorators": [],
          "docstring": "Map Bambu Lab status to JobStatus.",
          "line_start": 791,
          "line_end": 838,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "_map_job_status",
          "full_name": "PrusaPrinter._map_job_status",
          "class": "PrusaPrinter",
          "signature": "(self, prusa_state: str)",
          "return_type": "JobStatus",
          "decorators": [],
          "docstring": "Map Prusa state to JobStatus.",
          "line_start": 299,
          "line_end": 314,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "__repr__",
      "count": 2,
      "locations": [
        {
          "file": "src\\printers\\base.py",
          "name": "__repr__",
          "full_name": "PrinterFile.__repr__",
          "class": "PrinterFile",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 57,
          "line_end": 58,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "__repr__",
          "full_name": "JobInfo.__repr__",
          "class": "JobInfo",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 75,
          "line_end": 76,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "exact_name",
      "name": "stop_monitoring",
      "count": 2,
      "locations": [
        {
          "file": "src\\printers\\base.py",
          "name": "stop_monitoring",
          "full_name": "BasePrinter.stop_monitoring",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Stop status monitoring.",
          "line_start": 185,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_monitoring",
          "full_name": "PrinterService.stop_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: Optional[str])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop printer monitoring for all or specific printer.",
          "line_start": 475,
          "line_end": 500,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_files",
      "count": 2,
      "locations": [
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_files",
          "full_name": "PrusaPrinter.get_files",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "List[dict]",
          "decorators": [],
          "docstring": "Get raw file data from Prusa printer API (for download references).",
          "line_start": 399,
          "line_end": 475,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_files",
          "full_name": "FileService.get_files",
          "class": "FileService",
          "signature": "(self, printer_id: Optional[str], include_local: bool, status: Optional[str], source: Optional[str], has_thumbnail: Optional[bool], search: Optional[str], limit: Optional[int], order_by: Optional[str], order_dir: Optional[str], page: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of available files from printers and local folders.",
          "line_start": 43,
          "line_end": 152,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "download_thumbnail",
      "count": 2,
      "locations": [
        {
          "file": "src\\printers\\prusa.py",
          "name": "download_thumbnail",
          "full_name": "PrusaPrinter.download_thumbnail",
          "class": "PrusaPrinter",
          "signature": "(self, filename: str, size: str)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Download thumbnail for a file from Prusa printer.\n\nArgs:\n    filename: Display name of the file\n    size: Thumbnail size - 's' (small/icon) or 'l' (large/thumbnail)\n\nReturns:\n    PNG thumbnail data as bytes, or None if not available",
          "line_start": 628,
          "line_end": 694,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "download_thumbnail",
          "full_name": "ThumbnailService.download_thumbnail",
          "class": "ThumbnailService",
          "signature": "(self, url: str, source_type: str, force_refresh: bool)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Download and cache a thumbnail from URL.",
          "line_start": 66,
          "line_end": 108,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_printers",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printers",
          "full_name": "ConfigService.get_printers",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, PrinterConfig]",
          "decorators": [],
          "docstring": "Get all printer configurations.",
          "line_start": 307,
          "line_end": 309,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printers",
          "full_name": "PrinterService.get_printers",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all configured printers as dictionaries (legacy method).",
          "line_start": 288,
          "line_end": 303,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "start",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\event_service.py",
          "name": "start",
          "full_name": "EventService.start",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start the event service and background tasks.",
          "line_start": 45,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "start",
          "full_name": "FileWatcherService.start",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start file watcher service.",
          "line_start": 141,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "stop",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\event_service.py",
          "name": "stop",
          "full_name": "EventService.stop",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop the event service and cancel all tasks.",
          "line_start": 63,
          "line_end": 81,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "stop",
          "full_name": "FileWatcherService.stop",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop file watcher service.",
          "line_start": 203,
          "line_end": 239,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_local_files",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_local_files",
          "full_name": "FileService.get_local_files",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of local files only.",
          "line_start": 406,
          "line_end": 415,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_local_files",
          "full_name": "FileWatcherService.get_local_files",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all discovered local files.",
          "line_start": 491,
          "line_end": 509,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "get_watch_status",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_watch_status",
          "full_name": "FileService.get_watch_status",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher status.",
          "line_start": 435,
          "line_end": 444,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_watch_status",
          "full_name": "FileWatcherService.get_watch_status",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher service status.",
          "line_start": 511,
          "line_end": 518,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "update_job_status",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\job_service.py",
          "name": "update_job_status",
          "full_name": "JobService.update_job_status",
          "class": "JobService",
          "signature": "(self, job_id: str, status: str, data: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Update job status.",
          "line_start": 287,
          "line_end": 337,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "update_job_status",
          "full_name": "TestJobAPIPerformance.update_job_status",
          "class": "TestJobAPIPerformance",
          "signature": "(job_id, status)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 553,
          "line_end": 561,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "clear_cache",
      "count": 2,
      "locations": [
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "clear_cache",
          "full_name": "PreviewRenderService.clear_cache",
          "class": "PreviewRenderService",
          "signature": "(self, older_than_days: Optional[int])",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clear preview cache.\n\nArgs:\n    older_than_days: Only clear files older than this many days.\n                   If None, clear all.\n\nReturns:\n    Number of files removed",
          "line_start": 499,
          "line_end": 535,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "clear_cache",
          "full_name": "ThumbnailService.clear_cache",
          "class": "ThumbnailService",
          "signature": "(self, source_type: Optional[str])",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clear thumbnail cache for all or specific source type.",
          "line_start": 287,
          "line_end": 313,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "test_concurrent_file_downloads",
      "count": 2,
      "locations": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_concurrent_file_downloads",
          "full_name": "TestFileAPIPerformance.test_concurrent_file_downloads",
          "class": "TestFileAPIPerformance",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test concurrent file download requests",
          "line_start": 490,
          "line_end": 522,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_concurrent_file_downloads",
          "full_name": "TestFileDownloadPerformance.test_concurrent_file_downloads",
          "class": "TestFileDownloadPerformance",
          "signature": "(self, temp_download_directory)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test performance with multiple concurrent file downloads",
          "line_start": 541,
          "line_end": 599,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "test_vat_calculations",
      "count": 2,
      "locations": [
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_vat_calculations",
          "full_name": "TestGermanBusinessLogic.test_vat_calculations",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, german_business_config, sample_cost_calculations)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German VAT calculations for print jobs",
          "line_start": 360,
          "line_end": 390,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_vat_calculations",
          "full_name": "TestGermanBusinessLogic.test_vat_calculations",
          "class": "TestGermanBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German VAT (19%) calculations.",
          "line_start": 109,
          "line_end": 124,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "test_business_hours_validation",
      "count": 2,
      "locations": [
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_business_hours_validation",
          "full_name": "TestGermanBusinessLogic.test_business_hours_validation",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours validation",
          "line_start": 415,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_business_hours_validation",
          "full_name": "TestBusinessLogic.test_business_hours_validation",
          "class": "TestBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours validation.",
          "line_start": 156,
          "line_end": 169,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "mock_database",
      "count": 2,
      "locations": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock database for library service testing",
          "line_start": 29,
          "line_end": 40,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Create mock database for testing.",
          "line_start": 19,
          "line_end": 36,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "test_get_statistics",
      "count": 2,
      "locations": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_get_statistics",
          "full_name": "TestStatistics.test_get_statistics",
          "class": "TestStatistics",
          "signature": "(self, library_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test getting library statistics",
          "line_start": 457,
          "line_end": 469,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_get_statistics",
          "full_name": "TestIdeaService.test_get_statistics",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test getting idea statistics.",
          "line_start": 176,
          "line_end": 191,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "run_backend_tests",
      "count": 2,
      "locations": [
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "run_backend_tests",
          "full_name": "Milestone12TestRunner.run_backend_tests",
          "class": "Milestone12TestRunner",
          "signature": "(self, verbose, coverage)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run backend Python tests.",
          "line_start": 87,
          "line_end": 132,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "run_backend_tests",
          "full_name": "PrinternizerTestRunner.run_backend_tests",
          "class": "PrinternizerTestRunner",
          "signature": "(self, test_type, coverage, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run backend Python tests",
          "line_start": 29,
          "line_end": 78,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "classify_customer",
      "count": 2,
      "locations": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "classify_customer",
          "full_name": "TestGermanBusinessIntegration.classify_customer",
          "class": "TestGermanBusinessIntegration",
          "signature": "(customer_name)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 242,
          "line_end": 244,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "classify_customer",
          "full_name": "TestGermanBusinessLogic.classify_customer",
          "class": "TestGermanBusinessLogic",
          "signature": "(name)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 130,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "test_file_naming_german_support",
      "count": 2,
      "locations": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessIntegration.test_file_naming_german_support",
          "class": "TestGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test file naming supports German characters.",
          "line_start": 252,
          "line_end": 268,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessLogic.test_file_naming_german_support",
          "class": "TestGermanBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German filename support (umlauts, etc.).",
          "line_start": 143,
          "line_end": 160,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "mock_bambu_printer",
      "count": 2,
      "locations": [
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "mock_bambu_printer",
          "full_name": "TestEssentialPrinterAPIEndpoints.mock_bambu_printer",
          "class": "TestEssentialPrinterAPIEndpoints",
          "signature": "(self, mock_printer_id)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Bambu Lab printer for testing.",
          "line_start": 30,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "mock_bambu_printer",
          "full_name": "TestEssentialBambuLabDriverIntegration.mock_bambu_printer",
          "class": "TestEssentialBambuLabDriverIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Bambu Lab printer with MQTT client.",
          "line_start": 26,
          "line_end": 43,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    },
    {
      "type": "exact_name",
      "name": "mock_prusa_printer",
      "count": 2,
      "locations": [
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "mock_prusa_printer",
          "full_name": "TestEssentialPrinterAPIEndpoints.mock_prusa_printer",
          "class": "TestEssentialPrinterAPIEndpoints",
          "signature": "(self, mock_printer_id)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Prusa printer for testing.",
          "line_start": 43,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "mock_prusa_printer",
          "full_name": "TestEssentialPrusaDriverIntegration.mock_prusa_printer",
          "class": "TestEssentialPrusaDriverIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Prusa printer with HTTP client.",
          "line_start": 197,
          "line_end": 204,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "high"
    }
  ],
  "similar_names": [
    {
      "type": "similar_names",
      "pattern": "_statistics",
      "count": 16,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_error_statistics",
          "full_name": "ErrorStoreService.get_error_statistics",
          "class": "ErrorStoreService",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics for the specified time period.",
          "line_start": 111,
          "line_end": 162,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_file_statistics",
          "full_name": "get_file_statistics",
          "class": null,
          "signature": "(file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/statistics')"
          ],
          "docstring": "Get file management statistics.",
          "line_start": 124,
          "line_end": 139,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_idea_statistics",
          "full_name": "get_idea_statistics",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/stats/overview', response_model=Dict[str, Any])"
          ],
          "docstring": "Get idea statistics.",
          "line_start": 301,
          "line_end": 311,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\library.py",
          "name": "get_library_statistics",
          "full_name": "get_library_statistics",
          "class": null,
          "signature": "(library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/statistics', response_model=LibraryStatsResponse)"
          ],
          "docstring": "Get library statistics.\n\n**Returns:**\n- `total_files`: Total number of files in library\n- `total_size`: Total size of all files (bytes)\n- `files_with_thumbnails`: Files with generated thumbnails\n- `files_analyzed`: Files with extracted metadata\n- `available_files`: Files ready for use\n- `processing_files`: Files being processed\n- `error_files`: Files with errors\n- `unique_file_types`: Number of different file types\n- `avg_file_size`: Average file size (bytes)\n- `total_material_cost`: Sum of all material costs (EUR)\n\n**Use Cases:**\n- Dashboard widgets\n- Storage management\n- Library health monitoring",
          "line_start": 329,
          "line_end": 371,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_job_statistics",
          "full_name": "Database.get_job_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get comprehensive job statistics.",
          "line_start": 455,
          "line_end": 517,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_file_statistics",
          "full_name": "Database.get_file_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file statistics by source.",
          "line_start": 790,
          "line_end": 820,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_idea_statistics",
          "full_name": "Database.get_idea_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get idea statistics.",
          "line_start": 1055,
          "line_end": 1096,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_statistics",
          "full_name": "FileService.get_file_statistics",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file management statistics.",
          "line_start": 458,
          "line_end": 536,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_statistics",
          "full_name": "IdeaService.get_statistics",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get idea statistics.",
          "line_start": 197,
          "line_end": 203,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_job_statistics",
          "full_name": "JobService.get_job_statistics",
          "class": "JobService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get job statistics for dashboard.",
          "line_start": 339,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_library_statistics",
          "full_name": "LibraryService.get_library_statistics",
          "class": "LibraryService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get library statistics.\n\nReturns:\n    Statistics dictionary",
          "line_start": 560,
          "line_end": 567,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_statistics",
          "full_name": "MaterialService.get_statistics",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "MaterialStats",
          "decorators": [],
          "docstring": "Get material statistics.",
          "line_start": 304,
          "line_end": 384,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "get_statistics",
          "full_name": "PreviewRenderService.get_statistics",
          "class": "PreviewRenderService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get rendering statistics.",
          "line_start": 537,
          "line_end": 549,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "get_cache_statistics",
          "full_name": "ThumbnailService.get_cache_statistics",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get cache statistics.",
          "line_start": 233,
          "line_end": 285,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "get_statistics",
          "full_name": "TrendingService.get_statistics",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get trending cache statistics with performance metrics.",
          "line_start": 595,
          "line_end": 650,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "get_error_statistics",
          "full_name": "ErrorHandler.get_error_statistics",
          "class": "ErrorHandler",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics from log file.",
          "line_start": 164,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "[list_files, list_files, list_local_files...]",
      "count": 13,
      "functions": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "list_files",
          "full_name": "BambuFTP.list_files",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "List files in current directory.",
          "line_start": 69,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "list_files",
          "full_name": "list_files",
          "class": null,
          "signature": "(printer_id: Optional[str], status: Optional[FileStatus], source: Optional[FileSource], has_thumbnail: Optional[bool], search: Optional[str], limit: Optional[int], order_by: Optional[str], order_dir: Optional[str], page: Optional[int], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=FileListResponse)"
          ],
          "docstring": "List files from printers and local storage.",
          "line_start": 61,
          "line_end": 120,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "list_local_files",
          "full_name": "list_local_files",
          "class": null,
          "signature": "(watch_folder_path: Optional[str], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/local')"
          ],
          "docstring": "List local files from watch folders.",
          "line_start": 399,
          "line_end": 417,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "list_ideas",
          "full_name": "list_ideas",
          "class": null,
          "signature": "(status: Optional[str], is_business: Optional[bool], category: Optional[str], source_type: Optional[str], page: int, page_size: int, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=Dict[str, Any])"
          ],
          "docstring": "List ideas with filtering and pagination.",
          "line_start": 99,
          "line_end": 127,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_files",
          "full_name": "Database.list_files",
          "class": "Database",
          "signature": "(self, printer_id: Optional[str], status: Optional[str], source: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List files with optional filtering.",
          "line_start": 613,
          "line_end": 652,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_local_files",
          "full_name": "Database.list_local_files",
          "class": "Database",
          "signature": "(self, watch_folder_path: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List local files from watch folders.",
          "line_start": 763,
          "line_end": 780,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_ideas",
          "full_name": "Database.list_ideas",
          "class": "Database",
          "signature": "(self, status: Optional[str], is_business: Optional[bool], category: Optional[str], source_type: Optional[str], limit: Optional[int], offset: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List ideas with optional filtering and pagination.",
          "line_start": 862,
          "line_end": 900,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "list_files",
          "full_name": "BambuLabPrinter.list_files",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Bambu Lab printer.",
          "line_start": 840,
          "line_end": 857,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "list_files",
          "full_name": "PrinterInterface.list_files",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "List files available on the printer.",
          "line_start": 103,
          "line_end": 105,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "list_files",
          "full_name": "PrusaPrinter.list_files",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Prusa printer.",
          "line_start": 316,
          "line_end": 397,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "list_files",
          "full_name": "BambuFTPService.list_files",
          "class": "BambuFTPService",
          "signature": "(self, directory: str)",
          "return_type": "List[BambuFTPFile]",
          "decorators": [],
          "docstring": "List files in the specified directory.\n\nArgs:\n    directory: Directory path to list (default: /cache)\n\nReturns:\n    List of BambuFTPFile objects\n\nRaises:\n    ConnectionError: If FTP connection fails\n    PermissionError: If directory access is denied",
          "line_start": 194,
          "line_end": 245,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "list_ideas",
          "full_name": "IdeaService.list_ideas",
          "class": "IdeaService",
          "signature": "(self, filters: Optional[Dict[str, Any]], page: int, page_size: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "List ideas with filtering and pagination.",
          "line_start": 88,
          "line_end": 132,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "list_files",
          "full_name": "LibraryService.list_files",
          "class": "LibraryService",
          "signature": "(self, filters: Dict[str, Any], page: int, limit: int)",
          "return_type": "Tuple[List[Dict[str, Any]], Dict[str, Any]]",
          "decorators": [],
          "docstring": "List files in library with filters and pagination.\n\nArgs:\n    filters: Filter dictionary:\n        - source_type: Filter by source type\n        - file_type: Filter by file extension\n        - status: Filter by status\n        - search: Search query (filename)\n        - has_thumbnail: Filter by thumbnail presence\n        - has_metadata: Filter by metadata presence\n    page: Page number (1-indexed)\n    limit: Items per page\n\nReturns:\n    Tuple of (files list, pagination info)",
          "line_start": 449,
          "line_end": 468,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "download_",
      "count": 11,
      "functions": [
        {
          "file": "scripts\\download_target_file.py",
          "name": "download_target_file",
          "full_name": "download_target_file",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Download the specific target file.",
          "line_start": 21,
          "line_end": 144,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_bambu_ftp_direct.py",
          "name": "download_file",
          "full_name": "download_file",
          "class": null,
          "signature": "(ftp: ftplib.FTP_TLS, remote_filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from the FTP server.\n\nArgs:\n    ftp: Connected FTP instance\n    remote_filename: Name of file to download\n    local_path: Local path to save the file\n\nReturns:\n    True if download successful, False otherwise",
          "line_start": 169,
          "line_end": 214,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "download_file",
          "full_name": "BambuFTP.download_file",
          "class": "BambuFTP",
          "signature": "(self, filename, local_path)",
          "return_type": "",
          "decorators": [],
          "docstring": "Download a file.",
          "line_start": 127,
          "line_end": 180,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "download_printer_file",
          "full_name": "download_printer_file",
          "class": null,
          "signature": "(printer_id: UUID, filename: str, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/files/{filename}/download')"
          ],
          "docstring": "Download a specific file from printer to local storage.",
          "line_start": 468,
          "line_end": 490,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "download_file",
          "full_name": "BambuLabPrinter.download_file",
          "class": "BambuLabPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Bambu Lab printer.",
          "line_start": 1299,
          "line_end": 1316,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "download_file",
          "full_name": "PrinterInterface.download_file",
          "class": "PrinterInterface",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Download a file from the printer.",
          "line_start": 108,
          "line_end": 110,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "download_file",
          "full_name": "PrusaPrinter.download_file",
          "class": "PrusaPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Prusa printer.",
          "line_start": 477,
          "line_end": 575,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "download_file",
          "full_name": "BambuFTPService.download_file",
          "class": "BambuFTPService",
          "signature": "(self, remote_filename: str, local_path: str, directory: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from the FTP server.\n\nArgs:\n    remote_filename: Name of file to download on the server\n    local_path: Local path where file should be saved\n    directory: Remote directory containing the file (default: /cache)\n\nReturns:\n    True if download successful, False otherwise",
          "line_start": 296,
          "line_end": 366,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "download_file",
          "full_name": "FileService.download_file",
          "class": "FileService",
          "signature": "(self, printer_id: str, filename: str, destination_path: Optional[str])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Download file from printer.",
          "line_start": 192,
          "line_end": 365,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "download_printer_file",
          "full_name": "PrinterService.download_printer_file",
          "class": "PrinterService",
          "signature": "(self, printer_id: str, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from printer.",
          "line_start": 526,
          "line_end": 550,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "download_file",
          "full_name": "TestFileAPIPerformance.download_file",
          "class": "TestFileAPIPerformance",
          "signature": "(file_id)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 496,
          "line_end": 503,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "connect",
      "count": 11,
      "functions": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "connect",
          "full_name": "BambuFTP.connect",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Connect to FTP server with SSL.",
          "line_start": 21,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "connect",
          "full_name": "ConnectionManager.connect",
          "class": "ConnectionManager",
          "signature": "(self, websocket: WebSocket)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 25,
          "line_end": 28,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "disconnect",
          "full_name": "ConnectionManager.disconnect",
          "class": "ConnectionManager",
          "signature": "(self, websocket: WebSocket)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 30,
          "line_end": 35,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "connection",
          "full_name": "Database.connection",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "asynccontextmanager"
          ],
          "docstring": "Get database connection as async context manager.",
          "line_start": 276,
          "line_end": 280,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "connect",
          "full_name": "BambuLabPrinter.connect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish connection to Bambu Lab printer.",
          "line_start": 98,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "disconnect",
          "full_name": "BambuLabPrinter.disconnect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Bambu Lab printer.",
          "line_start": 236,
          "line_end": 260,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "connect",
          "full_name": "PrinterInterface.connect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Establish connection to the printer.",
          "line_start": 83,
          "line_end": 85,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "disconnect",
          "full_name": "PrinterInterface.disconnect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Disconnect from the printer.",
          "line_start": 88,
          "line_end": 90,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "connect",
          "full_name": "PrusaPrinter.connect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish HTTP connection to Prusa printer.",
          "line_start": 32,
          "line_end": 113,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "disconnect",
          "full_name": "PrusaPrinter.disconnect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Prusa printer.",
          "line_start": 115,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "mock_connect",
          "full_name": "TestErrorHandlingIntegration.mock_connect",
          "class": "TestErrorHandlingIntegration",
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 510,
          "line_end": 512,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_printer",
      "count": 11,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "create_printer",
          "full_name": "create_printer",
          "class": null,
          "signature": "(printer_data: PrinterCreateRequest, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=PrinterResponse, status_code=status.HTTP_201_CREATED)"
          ],
          "docstring": "Create a new printer configuration.",
          "line_start": 146,
          "line_end": 173,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "remove_printer",
          "full_name": "remove_printer",
          "class": null,
          "signature": "(printer_id: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.delete('/printers/{printer_id}')"
          ],
          "docstring": "Remove a printer configuration.",
          "line_start": 192,
          "line_end": 213,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_printer",
          "full_name": "Database.create_printer",
          "class": "Database",
          "signature": "(self, printer_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new printer record.",
          "line_start": 304,
          "line_end": 323,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_printer",
          "full_name": "Database.get_printer",
          "class": "Database",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get printer by ID.",
          "line_start": 325,
          "line_end": 332,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printer",
          "full_name": "ConfigService.get_printer",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[PrinterConfig]",
          "decorators": [],
          "docstring": "Get specific printer configuration.",
          "line_start": 311,
          "line_end": 313,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "remove_printer",
          "full_name": "ConfigService.remove_printer",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Remove printer configuration.",
          "line_start": 338,
          "line_end": 345,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer",
          "full_name": "PrinterService.get_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Printer]",
          "decorators": [],
          "docstring": "Get specific printer by ID as domain model.",
          "line_start": 305,
          "line_end": 331,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "create_printer",
          "full_name": "PrinterService.create_printer",
          "class": "PrinterService",
          "signature": "(self, name: str, printer_type: PrinterType, connection_config: Dict[str, Any], location: Optional[str], description: Optional[str])",
          "return_type": "Printer",
          "decorators": [],
          "docstring": "Create a new printer configuration.",
          "line_start": 671,
          "line_end": 721,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "update_printer",
          "full_name": "PrinterService.update_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: UUID)",
          "return_type": "Optional[Printer]",
          "decorators": [],
          "docstring": "Update printer configuration.",
          "line_start": 723,
          "line_end": 773,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "delete_printer",
          "full_name": "PrinterService.delete_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: UUID)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a printer configuration.",
          "line_start": 775,
          "line_end": 787,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "resume_printer",
          "full_name": "PrinterService.resume_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume printing on a specific printer.",
          "line_start": 803,
          "line_end": 815,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "[get_camera_status, get_material_stats, get_status...]",
      "count": 9,
      "functions": [
        {
          "file": "src\\api\\routers\\camera.py",
          "name": "get_camera_status",
          "full_name": "get_camera_status",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/{printer_id}/camera/status', response_model=CameraStatus)"
          ],
          "docstring": "Get camera status and availability for a printer.",
          "line_start": 24,
          "line_end": 68,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "get_material_stats",
          "full_name": "get_material_stats",
          "class": null,
          "signature": "(material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.get('/stats', response_model=MaterialStats)"
          ],
          "docstring": "Get material inventory statistics.",
          "line_start": 114,
          "line_end": 121,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_status",
          "full_name": "BambuLabPrinter.get_status",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Bambu Lab.",
          "line_start": 262,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_camera_stream_url",
          "full_name": "BambuLabPrinter.get_camera_stream_url",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Bambu Lab printer.",
          "line_start": 1725,
          "line_end": 1744,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_status",
          "full_name": "PrinterInterface.get_status",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current printer status.",
          "line_start": 93,
          "line_end": 95,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_camera_stream_url",
          "full_name": "PrinterInterface.get_camera_stream_url",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get camera stream URL if available.",
          "line_start": 133,
          "line_end": 135,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_status",
          "full_name": "PrusaPrinter.get_status",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Prusa.",
          "line_start": 133,
          "line_end": 236,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_camera_stream_url",
          "full_name": "PrusaPrinter.get_camera_stream_url",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Prusa printer.",
          "line_start": 774,
          "line_end": 778,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\event_service.py",
          "name": "get_status",
          "full_name": "EventService.get_status",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get current event service status.",
          "line_start": 452,
          "line_end": 474,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "delete_",
      "count": 7,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "delete_file",
          "full_name": "delete_file",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{file_id}')"
          ],
          "docstring": "Delete a file (for local files, also deletes physical file).",
          "line_start": 574,
          "line_end": 597,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "delete_idea",
          "full_name": "delete_idea",
          "class": null,
          "signature": "(idea_id: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{idea_id}', response_model=Dict[str, str])"
          ],
          "docstring": "Delete an idea.",
          "line_start": 193,
          "line_end": 222,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_local_file",
          "full_name": "Database.delete_local_file",
          "class": "Database",
          "signature": "(self, file_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a local file record.",
          "line_start": 782,
          "line_end": 788,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_idea",
          "full_name": "Database.delete_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea record.",
          "line_start": 926,
          "line_end": 935,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "delete_file",
          "full_name": "FileService.delete_file",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a file record (for local files and downloaded files, also delete physical file).",
          "line_start": 732,
          "line_end": 780,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "delete_idea",
          "full_name": "IdeaService.delete_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea.",
          "line_start": 165,
          "line_end": 175,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "delete_file",
          "full_name": "LibraryService.delete_file",
          "class": "LibraryService",
          "signature": "(self, checksum: str, delete_physical: bool)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete file from library.\n\nArgs:\n    checksum: File checksum\n    delete_physical: Whether to delete physical file\n\nReturns:\n    True if successful",
          "line_start": 518,
          "line_end": 558,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_job",
      "count": 7,
      "functions": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "get_job",
          "full_name": "get_job",
          "class": null,
          "signature": "(job_id: str, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.get('/{job_id}', response_model=JobResponse)"
          ],
          "docstring": "Get job details by ID.",
          "line_start": 105,
          "line_end": 125,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_job",
          "full_name": "Database.get_job",
          "class": "Database",
          "signature": "(self, job_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get job by ID.",
          "line_start": 384,
          "line_end": 394,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_job_info",
          "full_name": "BambuLabPrinter.get_job_info",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Bambu Lab.",
          "line_start": 750,
          "line_end": 789,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_job_info",
          "full_name": "PrinterInterface.get_job_info",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current job information.",
          "line_start": 98,
          "line_end": 100,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_job_info",
          "full_name": "PrusaPrinter.get_job_info",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Prusa.",
          "line_start": 253,
          "line_end": 297,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_jobs",
          "full_name": "JobService.get_jobs",
          "class": "JobService",
          "signature": "(self, limit: int, offset: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of print jobs.",
          "line_start": 25,
          "line_end": 78,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_job",
          "full_name": "JobService.get_job",
          "class": "JobService",
          "signature": "(self, job_id)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get specific job by ID.",
          "line_start": 142,
          "line_end": 165,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_printer_files",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "sync_printer_files",
          "full_name": "sync_printer_files",
          "class": null,
          "signature": "(printer_id: Optional[str], file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/sync')"
          ],
          "docstring": "Synchronize file list with printers.",
          "line_start": 208,
          "line_end": 221,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "get_printer_files",
          "full_name": "get_printer_files",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/{printer_id}/files')"
          ],
          "docstring": "Get files from a specific printer.",
          "line_start": 398,
          "line_end": 414,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_printer_files",
          "full_name": "FileService.get_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get files available on specific printer.",
          "line_start": 154,
          "line_end": 190,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "sync_printer_files",
          "full_name": "FileService.sync_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Synchronize files from a specific printer.",
          "line_start": 599,
          "line_end": 646,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "discover_printer_files",
          "full_name": "FileService.discover_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Discover files on a specific printer for the background discovery task.\n\nThis method is called by the background file discovery task every 5 minutes.\nIt discovers files on the printer and stores them in the database.\n\nArgs:\n    printer_id: The ID of the printer to discover files for\n\nReturns:\n    List of file info dictionaries with filename, file_size, file_type",
          "line_start": 648,
          "line_end": 686,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer_files",
          "full_name": "PrinterService.get_printer_files",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of files available on printer.",
          "line_start": 502,
          "line_end": 524,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_watch_folder",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders/settings', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 363,
          "line_end": 378,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 234,
          "line_end": 246,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_watch_folders",
          "full_name": "ConfigService.get_watch_folders",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "List[str]",
          "decorators": [],
          "docstring": "Get list of configured watch folders from database.",
          "line_start": 407,
          "line_end": 410,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_watch_folder_settings",
          "full_name": "ConfigService.get_watch_folder_settings",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get all watch folder related settings.",
          "line_start": 441,
          "line_end": 452,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "get_watch_folder_by_id",
          "full_name": "WatchFolderDbService.get_watch_folder_by_id",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_id: int)",
          "return_type": "Optional[WatchFolder]",
          "decorators": [],
          "docstring": "Get watch folder by ID.",
          "line_start": 68,
          "line_end": 84,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "get_all_watch_folders",
          "full_name": "WatchFolderDbService.get_all_watch_folders",
          "class": "WatchFolderDbService",
          "signature": "(self, active_only: bool)",
          "return_type": "List[WatchFolder]",
          "decorators": [],
          "docstring": "Get all watch folders.",
          "line_start": 104,
          "line_end": 123,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_watch_folder",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "reload_watch_folders",
          "full_name": "reload_watch_folders",
          "class": null,
          "signature": "(file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/reload')"
          ],
          "docstring": "Reload watch folders configuration.",
          "line_start": 421,
          "line_end": 433,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "add_watch_folder",
          "full_name": "ConfigService.add_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Add a watch folder to the database configuration.",
          "line_start": 579,
          "line_end": 611,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "remove_watch_folder",
          "full_name": "ConfigService.remove_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Remove a watch folder from the database configuration.",
          "line_start": 613,
          "line_end": 633,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileService.reload_watch_folders",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Reload watch folders configuration.",
          "line_start": 446,
          "line_end": 456,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileWatcherService.reload_watch_folders",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Reload watch folders from configuration.",
          "line_start": 520,
          "line_end": 537,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "create_watch_folder",
          "full_name": "WatchFolderDbService.create_watch_folder",
          "class": "WatchFolderDbService",
          "signature": "(self, watch_folder: WatchFolder)",
          "return_type": "int",
          "decorators": [],
          "docstring": "Create a new watch folder in database.",
          "line_start": 25,
          "line_end": 66,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_folder",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 437,
          "line_end": 450,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 250,
          "line_end": 263,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "validate_watch_folder",
          "full_name": "ConfigService.validate_watch_folder",
          "class": "ConfigService",
          "signature": "(self, folder_path: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Validate a watch folder path.",
          "line_start": 422,
          "line_end": 439,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "update_watch_folder",
          "full_name": "WatchFolderDbService.update_watch_folder",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_id: int, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update watch folder fields.",
          "line_start": 125,
          "line_end": 171,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "delete_watch_folder",
          "full_name": "WatchFolderDbService.delete_watch_folder",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_id: int)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete watch folder from database.",
          "line_start": 173,
          "line_end": 192,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "validate_and_update_folder",
          "full_name": "WatchFolderDbService.validate_and_update_folder",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_path: str, is_valid: bool, error_message: Optional[str])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update folder validation status.",
          "line_start": 253,
          "line_end": 275,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "update_",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "update_idea",
          "full_name": "update_idea",
          "class": null,
          "signature": "(idea_id: str, idea_data: IdeaUpdate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.put('/{idea_id}', response_model=Dict[str, str])"
          ],
          "docstring": "Update an existing idea.",
          "line_start": 156,
          "line_end": 189,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_file",
          "full_name": "Database.update_file",
          "class": "Database",
          "signature": "(self, file_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update file with provided fields.",
          "line_start": 654,
          "line_end": 679,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_idea",
          "full_name": "Database.update_idea",
          "class": "Database",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea with provided fields.",
          "line_start": 902,
          "line_end": 924,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_idea_status",
          "full_name": "Database.update_idea_status",
          "class": "Database",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 937,
          "line_end": 942,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea",
          "full_name": "IdeaService.update_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update an idea.",
          "line_start": 134,
          "line_end": 163,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea_status",
          "full_name": "IdeaService.update_idea_status",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 177,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_material",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "get_materials",
          "full_name": "get_materials",
          "class": null,
          "signature": "(material_type: Optional[MaterialType], brand: Optional[MaterialBrand], color: Optional[MaterialColor], low_stock: bool, printer_id: Optional[str], material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[MaterialResponse])"
          ],
          "docstring": "Get all materials with optional filters.",
          "line_start": 64,
          "line_end": 110,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "create_material",
          "full_name": "MaterialService.create_material",
          "class": "MaterialService",
          "signature": "(self, material_data: MaterialCreate)",
          "return_type": "MaterialSpool",
          "decorators": [],
          "docstring": "Create a new material spool.",
          "line_start": 139,
          "line_end": 182,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_material",
          "full_name": "MaterialService.get_material",
          "class": "MaterialService",
          "signature": "(self, material_id: str)",
          "return_type": "Optional[MaterialSpool]",
          "decorators": [],
          "docstring": "Get material by ID.",
          "line_start": 284,
          "line_end": 286,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_all_materials",
          "full_name": "MaterialService.get_all_materials",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "List[MaterialSpool]",
          "decorators": [],
          "docstring": "Get all materials.",
          "line_start": 288,
          "line_end": 290,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_materials_by_type",
          "full_name": "MaterialService.get_materials_by_type",
          "class": "MaterialService",
          "signature": "(self, material_type: MaterialType)",
          "return_type": "List[MaterialSpool]",
          "decorators": [],
          "docstring": "Get materials by type.",
          "line_start": 292,
          "line_end": 294,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_low_stock_materials",
          "full_name": "MaterialService.get_low_stock_materials",
          "class": "MaterialService",
          "signature": "(self, threshold: float)",
          "return_type": "List[MaterialSpool]",
          "decorators": [],
          "docstring": "Get materials below stock threshold percentage.",
          "line_start": 300,
          "line_end": 302,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_printer",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "list_printers",
          "full_name": "list_printers",
          "class": null,
          "signature": "(printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[PrinterResponse])"
          ],
          "docstring": "List all configured printers.",
          "line_start": 130,
          "line_end": 142,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_printers",
          "full_name": "Database.list_printers",
          "class": "Database",
          "signature": "(self, active_only: bool)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List all printers.",
          "line_start": 334,
          "line_end": 345,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printers",
          "full_name": "ConfigService.get_printers",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, PrinterConfig]",
          "decorators": [],
          "docstring": "Get all printer configurations.",
          "line_start": 307,
          "line_end": 309,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "list_printers",
          "full_name": "PrinterService.list_printers",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "List[Printer]",
          "decorators": [],
          "docstring": "Get list of all configured printers as Printer objects.",
          "line_start": 254,
          "line_end": 286,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printers",
          "full_name": "PrinterService.get_printers",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all configured printers as dictionaries (legacy method).",
          "line_start": 288,
          "line_end": 303,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_printer",
          "full_name": "PrinterService.stop_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel printing on a specific printer.",
          "line_start": 817,
          "line_end": 829,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "t_printer",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "get_printer",
          "full_name": "get_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.get('/{printer_id}', response_model=PrinterResponse)"
          ],
          "docstring": "Get printer details by ID.",
          "line_start": 177,
          "line_end": 197,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\analytics_service.py",
          "name": "get_printer_usage",
          "full_name": "AnalyticsService.get_printer_usage",
          "class": "AnalyticsService",
          "signature": "(self, days: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get printer usage statistics.",
          "line_start": 33,
          "line_end": 36,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_printer_jobs",
          "full_name": "JobService.get_printer_jobs",
          "class": "JobService",
          "signature": "(self, printer_id: str, limit: int, offset: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all jobs for a specific printer.",
          "line_start": 467,
          "line_end": 469,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer_driver",
          "full_name": "PrinterService.get_printer_driver",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[BasePrinter]",
          "decorators": [],
          "docstring": "Get printer driver instance for direct access.",
          "line_start": 333,
          "line_end": 335,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer_status",
          "full_name": "PrinterService.get_printer_status",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get current status of a printer.",
          "line_start": 337,
          "line_end": 368,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "connect_printer",
          "full_name": "PrinterService.connect_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Connect to a specific printer.",
          "line_start": 370,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_monitoring",
      "count": 6,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "start_printer_monitoring",
          "full_name": "start_printer_monitoring",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/monitoring/start')"
          ],
          "docstring": "Start monitoring for a specific printer.",
          "line_start": 418,
          "line_end": 439,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "start_monitoring",
          "full_name": "BasePrinter.start_monitoring",
          "class": "BasePrinter",
          "signature": "(self, interval: int)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Start periodic status monitoring.",
          "line_start": 168,
          "line_end": 183,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\monitoring_service.py",
          "name": "start_monitoring",
          "full_name": "MonitoringService.start_monitoring",
          "class": "MonitoringService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start the monitoring service.",
          "line_start": 40,
          "line_end": 49,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "start_monitoring",
          "full_name": "PrinterService.start_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: Optional[str])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Start printer monitoring for all or specific printer.",
          "line_start": 430,
          "line_end": 473,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "start_printer_monitoring",
          "full_name": "PrinterService.start_printer_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Start monitoring for a specific printer.",
          "line_start": 831,
          "line_end": 847,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_printer_monitoring",
          "full_name": "PrinterService.stop_printer_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop monitoring for a specific printer.",
          "line_start": 849,
          "line_end": 862,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "t_calculation",
      "count": 6,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_german_cost_calculations",
          "full_name": "TestJobBusinessLogic.test_german_cost_calculations",
          "class": "TestJobBusinessLogic",
          "signature": "(self, sample_cost_calculations, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test cost calculations according to German business requirements",
          "line_start": 386,
          "line_end": 417,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_printer_cost_calculations_euro",
          "full_name": "TestPrinterBusinessLogic.test_printer_cost_calculations_euro",
          "class": "TestPrinterBusinessLogic",
          "signature": "(self, sample_cost_calculations, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test cost calculations in EUR for German business",
          "line_start": 392,
          "line_end": 413,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_vat_calculations",
          "full_name": "TestGermanBusinessLogic.test_vat_calculations",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, german_business_config, sample_cost_calculations)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German VAT calculations for print jobs",
          "line_start": 360,
          "line_end": 390,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_material_cost_calculation",
          "full_name": "TestGermanBusinessConfig.test_material_cost_calculation",
          "class": "TestGermanBusinessConfig",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test material cost calculation for German pricing.",
          "line_start": 47,
          "line_end": 56,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_power_cost_calculation",
          "full_name": "TestGermanBusinessConfig.test_power_cost_calculation",
          "class": "TestGermanBusinessConfig",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test power cost calculation for German electricity rates.",
          "line_start": 58,
          "line_end": 67,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "test_german_material_cost_calculation",
          "full_name": "TestEssentialGermanBusinessIntegration.test_german_material_cost_calculation",
          "class": "TestEssentialGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German EUR material cost calculations with 19% VAT.",
          "line_start": 367,
          "line_end": 385,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "t_websocket_",
      "count": 6,
      "functions": [
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_websocket_reconnection",
          "full_name": "TestErrorHandlingIntegration.test_websocket_reconnection",
          "class": "TestErrorHandlingIntegration",
          "signature": "(self, mock_websocket)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test WebSocket reconnection handling",
          "line_start": 504,
          "line_end": 524,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_websocket_connection_establishment",
          "full_name": "TestWebSocketConnection.test_websocket_connection_establishment",
          "class": "TestWebSocketConnection",
          "signature": "(self, mock_websocket, test_config)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test WebSocket connection establishment",
          "line_start": 17,
          "line_end": 28,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_websocket_connection_error_handling",
          "full_name": "TestWebSocketConnection.test_websocket_connection_error_handling",
          "class": "TestWebSocketConnection",
          "signature": "(self, test_config)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test WebSocket connection error handling",
          "line_start": 83,
          "line_end": 93,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_websocket_reconnection_logic",
          "full_name": "TestWebSocketConnection.test_websocket_reconnection_logic",
          "class": "TestWebSocketConnection",
          "signature": "(self, mock_websocket, test_config)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test WebSocket automatic reconnection",
          "line_start": 96,
          "line_end": 119,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_concurrent_websocket_connections",
          "full_name": "TestWebSocketPerformance.test_concurrent_websocket_connections",
          "class": "TestWebSocketPerformance",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test handling multiple concurrent WebSocket connections",
          "line_start": 461,
          "line_end": 492,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_websocket_connection_basic",
          "full_name": "TestCoreWorkflowIntegration.test_websocket_connection_basic",
          "class": "TestCoreWorkflowIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test WebSocket connection can be established.",
          "line_start": 118,
          "line_end": 134,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_connection",
      "count": 5,
      "functions": [
        {
          "file": "scripts\\test_bambu_credentials.py",
          "name": "test_bambu_connection",
          "full_name": "test_bambu_connection",
          "class": null,
          "signature": "(ip: str, access_code: str, serial: str)",
          "return_type": "dict",
          "decorators": [],
          "docstring": "Test connection to Bambu Lab printer and gather basic info.",
          "line_start": 57,
          "line_end": 166,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_ssl_connection.py",
          "name": "test_ssl_connection",
          "full_name": "test_ssl_connection",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Test raw SSL connection to see what's happening.",
          "line_start": 10,
          "line_end": 65,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "test_connection",
          "full_name": "BambuFTPService.test_connection",
          "class": "BambuFTPService",
          "signature": "(self)",
          "return_type": "Tuple[bool, str]",
          "decorators": [],
          "docstring": "Test the FTP connection without performing any operations.\n\nReturns:\n    Tuple of (success: bool, message: str)",
          "line_start": 410,
          "line_end": 430,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_bambu_lab_real_connection",
          "full_name": "TestHardwareIntegration.test_bambu_lab_real_connection",
          "class": "TestHardwareIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test connection to real Bambu Lab printer (requires hardware).",
          "line_start": 275,
          "line_end": 277,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "test_bambu_mqtt_connection_recovery",
          "full_name": "TestEssentialPrinterConnectionRecovery.test_bambu_mqtt_connection_recovery",
          "class": "TestEssentialPrinterConnectionRecovery",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test Bambu Lab MQTT connection recovery with 30-second polling.",
          "line_start": 304,
          "line_end": 333,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "health_check",
      "count": 5,
      "functions": [
        {
          "file": "src\\api\\routers\\health.py",
          "name": "health_check",
          "full_name": "health_check",
          "class": null,
          "signature": "(request: Request, config: ConfigService, db: Database)",
          "return_type": "",
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ],
          "docstring": "Enhanced health check endpoint with detailed service status.\nReturns system status and comprehensive information about all services.",
          "line_start": 38,
          "line_end": 158,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\library.py",
          "name": "library_health_check",
          "full_name": "library_health_check",
          "class": null,
          "signature": "(library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/health')"
          ],
          "docstring": "Library service health check.\n\n**Returns:**\n- `status`: Service status (healthy/degraded/unhealthy)\n- `enabled`: Whether library is enabled\n- `library_path`: Configured library path\n- `message`: Status message\n\n**Status Codes:**\n- `healthy`: Library operational\n- `degraded`: Library has issues but functional\n- `unhealthy`: Library not operational",
          "line_start": 375,
          "line_end": 427,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "health_check",
          "full_name": "Database.health_check",
          "class": "Database",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check database health.",
          "line_start": 282,
          "line_end": 293,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "health_check",
          "full_name": "BasePrinter.health_check",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if printer is healthy and responsive.",
          "line_start": 253,
          "line_end": 259,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "health_check",
          "full_name": "PrinterService.health_check",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Check health of all printer connections.",
          "line_start": 623,
          "line_end": 651,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "update_",
      "count": 5,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "update_idea_status",
          "full_name": "update_idea_status",
          "class": null,
          "signature": "(idea_id: str, status_data: IdeaStatusUpdate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.patch('/{idea_id}/status', response_model=Dict[str, str])"
          ],
          "docstring": "Update idea status.",
          "line_start": 226,
          "line_end": 256,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_printer_status",
          "full_name": "Database.update_printer_status",
          "class": "Database",
          "signature": "(self, printer_id: str, status: str, last_seen: Optional[datetime])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update printer status and last seen time.",
          "line_start": 347,
          "line_end": 358,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "update_job_status",
          "full_name": "JobService.update_job_status",
          "class": "JobService",
          "signature": "(self, job_id: str, status: str, data: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Update job status.",
          "line_start": 287,
          "line_end": 337,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "update_job_status",
          "full_name": "TestJobAPIPerformance.update_job_status",
          "class": "TestJobAPIPerformance",
          "signature": "(job_id, status)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 553,
          "line_end": 561,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_update_idea_status",
          "full_name": "TestIdeaService.test_update_idea_status",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test idea status update.",
          "line_start": 165,
          "line_end": 173,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_trending",
      "count": 5,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_trending_models",
          "full_name": "get_trending_models",
          "class": null,
          "signature": "(platform: str, category: Optional[str], idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/trending/{platform}', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Get trending models from external platforms.",
          "line_start": 342,
          "line_end": 364,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "get_trending",
          "full_name": "get_trending",
          "class": null,
          "signature": "(platform: Optional[str], category: Optional[str], limit: int, trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[TrendingModel])"
          ],
          "docstring": "Get trending models from cache.",
          "line_start": 52,
          "line_end": 87,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_trending",
          "full_name": "Database.get_trending",
          "class": "Database",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending items from cache.",
          "line_start": 1023,
          "line_end": 1042,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_trending",
          "full_name": "IdeaService.get_trending",
          "class": "IdeaService",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending models from cache.",
          "line_start": 272,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "get_trending",
          "full_name": "TrendingService.get_trending",
          "class": "TrendingService",
          "signature": "(self, platform: Optional[str], category: Optional[str], limit: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending models from cache.",
          "line_start": 466,
          "line_end": 492,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_library_",
      "count": 5,
      "functions": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "get_library_file",
          "full_name": "get_library_file",
          "class": null,
          "signature": "(checksum: str, library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/files/{checksum}', response_model=LibraryFileResponse)"
          ],
          "docstring": "Get library file details by checksum.\n\n**Parameters:**\n- `checksum`: File SHA-256 checksum (hexadecimal)\n\n**Returns:**\n- Complete file record with all metadata\n- Sources (where file was discovered)\n- Enhanced metadata (dimensions, materials, costs)\n\n**Error Responses:**\n- `404`: File not found in library\n- `500`: Internal server error",
          "line_start": 168,
          "line_end": 202,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_library_file",
          "full_name": "Database.create_library_file",
          "class": "Database",
          "signature": "(self, file_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new library file record.",
          "line_start": 1102,
          "line_end": 1131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_library_file",
          "full_name": "Database.update_library_file",
          "class": "Database",
          "signature": "(self, checksum: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update library file by checksum.",
          "line_start": 1149,
          "line_end": 1161,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_library_file_sources",
          "full_name": "Database.get_library_file_sources",
          "class": "Database",
          "signature": "(self, checksum: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all sources for a library file.",
          "line_start": 1315,
          "line_end": 1321,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_library_path_for_file",
          "full_name": "LibraryService.get_library_path_for_file",
          "class": "LibraryService",
          "signature": "(self, checksum: str, source_type: str, original_filename: str, printer_name: str)",
          "return_type": "Path",
          "decorators": [],
          "docstring": "Get library storage path for a file based on source type.\nUses natural filenames without checksum-based sharding.\n\nArgs:\n    checksum: File checksum (not used in path anymore)\n    source_type: Source type (printer, watch_folder, upload)\n    original_filename: Original filename (required)\n    printer_name: Printer name (required for printer source type)\n\nReturns:\n    Path object for library storage location",
          "line_start": 134,
          "line_end": 167,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "pause_print",
      "count": 5,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "pause_printer",
          "full_name": "pause_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/pause')"
          ],
          "docstring": "Pause the current print job.",
          "line_start": 295,
          "line_end": 316,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "pause_print",
          "full_name": "BambuLabPrinter.pause_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Bambu Lab printer.",
          "line_start": 1642,
          "line_end": 1663,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "pause_print",
          "full_name": "PrinterInterface.pause_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Pause the current print job.",
          "line_start": 113,
          "line_end": 115,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "pause_print",
          "full_name": "PrusaPrinter.pause_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Prusa printer.",
          "line_start": 696,
          "line_end": 718,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "pause_printer",
          "full_name": "PrinterService.pause_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause printing on a specific printer.",
          "line_start": 789,
          "line_end": 801,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "initialize",
      "count": 5,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "initialize",
          "full_name": "Database.initialize",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize database and create tables.",
          "line_start": 31,
          "line_end": 44,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "initialize",
          "full_name": "LibraryService.initialize",
          "class": "LibraryService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize library folders and verify configuration.",
          "line_start": 52,
          "line_end": 87,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "initialize",
          "full_name": "MaterialService.initialize",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize material service and create tables.",
          "line_start": 46,
          "line_end": 54,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "initialize",
          "full_name": "PrinterService.initialize",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize printer service and load configured printers.",
          "line_start": 35,
          "line_end": 39,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "initialize",
          "full_name": "TrendingService.initialize",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize trending service and create tables.",
          "line_start": 55,
          "line_end": 63,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_timezone_handling",
      "count": 5,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_job_timezone_handling",
          "full_name": "TestJobBusinessLogic.test_job_timezone_handling",
          "class": "TestJobBusinessLogic",
          "signature": "(self, populated_database, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test job timestamps use Europe/Berlin timezone",
          "line_start": 436,
          "line_end": 444,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_printer_timezone_handling",
          "full_name": "TestPrinterBusinessLogic.test_printer_timezone_handling",
          "class": "TestPrinterBusinessLogic",
          "signature": "(self, populated_database, german_business_config, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test that printer timestamps use Europe/Berlin timezone",
          "line_start": 377,
          "line_end": 390,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_european_timezone_handling",
          "full_name": "TestGermanBusinessLogic.test_european_timezone_handling",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, populated_database, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test that timestamps are handled with Europe/Berlin timezone",
          "line_start": 269,
          "line_end": 294,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_berlin_timezone_handling",
          "full_name": "TestGermanBusinessLogic.test_berlin_timezone_handling",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test Berlin timezone handling for German business operations",
          "line_start": 392,
          "line_end": 406,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "test_german_timezone_handling",
          "full_name": "TestEssentialGermanBusinessIntegration.test_german_timezone_handling",
          "class": "TestEssentialGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German timezone (Europe/Berlin) for printer operations.",
          "line_start": 405,
          "line_end": 422,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "take_snapshot",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\camera.py",
          "name": "take_snapshot",
          "full_name": "take_snapshot",
          "class": null,
          "signature": "(printer_id: UUID, snapshot_data: SnapshotCreate, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/camera/snapshot', response_model=SnapshotResponse)"
          ],
          "docstring": "Take a camera snapshot and save it.",
          "line_start": 119,
          "line_end": 194,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "take_snapshot",
          "full_name": "BambuLabPrinter.take_snapshot",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Bambu Lab printer.",
          "line_start": 1746,
          "line_end": 1779,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "take_snapshot",
          "full_name": "PrinterInterface.take_snapshot",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Take a camera snapshot and return image data.",
          "line_start": 138,
          "line_end": 140,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "take_snapshot",
          "full_name": "PrusaPrinter.take_snapshot",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Prusa printer.",
          "line_start": 780,
          "line_end": 784,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_thumbnail",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_file_thumbnail",
          "full_name": "get_file_thumbnail",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}/thumbnail')"
          ],
          "docstring": "Get thumbnail image for a file.",
          "line_start": 225,
          "line_end": 276,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_parser.py",
          "name": "get_largest_thumbnail",
          "full_name": "BambuParser.get_largest_thumbnail",
          "class": "BambuParser",
          "signature": "(self, thumbnails: List[Dict[str, Any]])",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get the largest thumbnail from a list of thumbnails.",
          "line_start": 832,
          "line_end": 839,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "process_file_thumbnails",
          "full_name": "FileService.process_file_thumbnails",
          "class": "FileService",
          "signature": "(self, file_path: str, file_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Process a file to extract thumbnails and metadata using Bambu parser.\n\nArgs:\n    file_path: Local path to the file\n    file_id: File ID in database\n    \nReturns:\n    True if processing was successful, False otherwise",
          "line_start": 803,
          "line_end": 980,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "get_thumbnail",
          "full_name": "ThumbnailService.get_thumbnail",
          "class": "ThumbnailService",
          "signature": "(self, url: str, source_type: str, auto_download: bool)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get thumbnail path, downloading if necessary.",
          "line_start": 161,
          "line_end": 179,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_watch_",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_watch_folder_status",
          "full_name": "get_watch_folder_status",
          "class": null,
          "signature": "(file_service: FileService, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders/status')"
          ],
          "docstring": "Get watch folder status.",
          "line_start": 382,
          "line_end": 395,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_watch_status",
          "full_name": "FileService.get_watch_status",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher status.",
          "line_start": 435,
          "line_end": 444,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_watch_status",
          "full_name": "FileWatcherService.get_watch_status",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher service status.",
          "line_start": 511,
          "line_end": 518,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "get_watch_folder_by_path",
          "full_name": "WatchFolderDbService.get_watch_folder_by_path",
          "class": "WatchFolderDbService",
          "signature": "(self, folder_path: str)",
          "return_type": "Optional[WatchFolder]",
          "decorators": [],
          "docstring": "Get watch folder by path.",
          "line_start": 86,
          "line_end": 102,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "validate",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\idea_url.py",
          "name": "validate_url",
          "full_name": "validate_url",
          "class": null,
          "signature": "(url: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/validate', response_model=Dict[str, Any])"
          ],
          "docstring": "Validate if URL is from a supported platform.",
          "line_start": 20,
          "line_end": 39,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\idea.py",
          "name": "validate",
          "full_name": "Idea.validate",
          "class": "Idea",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Validate idea data.",
          "line_start": 98,
          "line_end": 108,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "validate_url",
          "full_name": "UrlParserService.validate_url",
          "class": "UrlParserService",
          "signature": "(self, url: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Validate if URL is from a supported platform.",
          "line_start": 243,
          "line_end": 254,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_url_parser_service.py",
          "name": "test_validate_url",
          "full_name": "TestUrlParserService.test_validate_url",
          "class": "TestUrlParserService",
          "signature": "(self, url_parser)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test URL validation.",
          "line_start": 133,
          "line_end": 152,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_supported_platforms",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\idea_url.py",
          "name": "get_supported_platforms",
          "full_name": "get_supported_platforms",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/platforms', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Get information about supported platforms.",
          "line_start": 77,
          "line_end": 98,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "get_supported_platforms",
          "full_name": "get_supported_platforms",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "router.get('/platforms')"
          ],
          "docstring": "Get list of supported platforms for trending discovery.",
          "line_start": 91,
          "line_end": 108,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "get_supported_platforms",
          "full_name": "UrlParserService.get_supported_platforms",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "list[str]",
          "decorators": [],
          "docstring": "Get list of supported platforms.",
          "line_start": 256,
          "line_end": 258,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_url_parser_service.py",
          "name": "test_get_supported_platforms",
          "full_name": "TestUrlParserService.test_get_supported_platforms",
          "class": "TestUrlParserService",
          "signature": "(self, url_parser)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test getting supported platforms list.",
          "line_start": 154,
          "line_end": 161,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "create_",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "create_idea",
          "full_name": "create_idea",
          "class": null,
          "signature": "(idea_data: IdeaCreate, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=Dict[str, str])"
          ],
          "docstring": "Create a new idea.",
          "line_start": 71,
          "line_end": 95,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_file",
          "full_name": "Database.create_file",
          "class": "Database",
          "signature": "(self, file_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new file record or update if exists (preserving thumbnails).",
          "line_start": 557,
          "line_end": 611,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "create_idea",
          "full_name": "Database.create_idea",
          "class": "Database",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new idea record.",
          "line_start": 823,
          "line_end": 851,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "create_idea",
          "full_name": "IdeaService.create_idea",
          "class": "IdeaService",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Create a new idea.",
          "line_start": 24,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_idea",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_idea",
          "full_name": "get_idea",
          "class": null,
          "signature": "(idea_id: str, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/{idea_id}', response_model=Dict[str, Any])"
          ],
          "docstring": "Get a specific idea by ID.",
          "line_start": 131,
          "line_end": 152,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_idea",
          "full_name": "Database.get_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 853,
          "line_end": 860,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_idea_tags",
          "full_name": "Database.get_idea_tags",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "List[str]",
          "decorators": [],
          "docstring": "Get all tags for an idea.",
          "line_start": 971,
          "line_end": 981,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_idea",
          "full_name": "IdeaService.get_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Idea]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 63,
          "line_end": 86,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_tags",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "get_all_tags",
          "full_name": "get_all_tags",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/tags/all', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Get all available tags with usage counts.",
          "line_start": 287,
          "line_end": 297,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_all_tags",
          "full_name": "Database.get_all_tags",
          "class": "Database",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all unique tags with counts.",
          "line_start": 983,
          "line_end": 993,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_all_tags",
          "full_name": "IdeaService.get_all_tags",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all available tags with usage counts.",
          "line_start": 189,
          "line_end": 195,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\fixtures\\ideas_fixtures.py",
          "name": "get_sample_tags",
          "full_name": "IdeasTestFixtures.get_sample_tags",
          "class": "IdeasTestFixtures",
          "signature": "()",
          "return_type": "List[str]",
          "decorators": [
            "staticmethod"
          ],
          "docstring": "Get a collection of sample tags for testing.",
          "line_start": 153,
          "line_end": 159,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": true,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "save_trending_as_idea",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "save_trending_as_idea",
          "full_name": "save_trending_as_idea",
          "class": null,
          "signature": "(trending_id: str, save_data: TrendingSave, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/trending/{trending_id}/save', response_model=Dict[str, str])"
          ],
          "docstring": "Save a trending model as a personal idea.",
          "line_start": 368,
          "line_end": 391,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "save_trending_as_idea",
          "full_name": "save_trending_as_idea",
          "class": null,
          "signature": "(trending_id: str, request: SaveTrendingRequest, trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.post('/{trending_id}/save', response_model=dict, status_code=201)"
          ],
          "docstring": "Save a trending item as a personal idea.",
          "line_start": 157,
          "line_end": 178,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "save_trending_as_idea",
          "full_name": "IdeaService.save_trending_as_idea",
          "class": "IdeaService",
          "signature": "(self, trending_id: str, additional_data: Optional[Dict[str, Any]])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Save a trending model as a personal idea.",
          "line_start": 283,
          "line_end": 318,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_save_trending_as_idea",
          "full_name": "TestIdeaService.test_save_trending_as_idea",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test saving trending item as idea.",
          "line_start": 216,
          "line_end": 224,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "delete_job",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "delete_job",
          "full_name": "delete_job",
          "class": null,
          "signature": "(job_id: UUID, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{job_id}', status_code=status.HTTP_204_NO_CONTENT)"
          ],
          "docstring": "Delete a job record.",
          "line_start": 129,
          "line_end": 148,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_job",
          "full_name": "Database.delete_job",
          "class": "Database",
          "signature": "(self, job_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a job record from the database.",
          "line_start": 545,
          "line_end": 554,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "delete_job",
          "full_name": "JobService.delete_job",
          "class": "JobService",
          "signature": "(self, job_id)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete a job record.",
          "line_start": 167,
          "line_end": 191,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_delete_job",
          "full_name": "TestJobAPI.test_delete_job",
          "class": "TestJobAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test DELETE /api/v1/jobs/{id}",
          "line_start": 359,
          "line_end": 368,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_library_file",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "list_library_files",
          "full_name": "list_library_files",
          "class": null,
          "signature": "(page: int, limit: int, source_type: Optional[str], file_type: Optional[str], status: Optional[str], search: Optional[str], has_thumbnail: Optional[bool], has_metadata: Optional[bool], manufacturer: Optional[str], printer_model: Optional[str], show_duplicates: Optional[bool], only_duplicates: Optional[bool], library_service)",
          "return_type": "",
          "decorators": [
            "router.get('/files', response_model=LibraryFileListResponse)"
          ],
          "docstring": "List library files with filters and pagination.\n\n**Filters:**\n- `source_type`: Filter by where file came from (printer/watch_folder/upload)\n- `file_type`: Filter by file extension (.3mf, .stl, etc.)\n- `status`: Filter by processing status\n- `search`: Search in filename (case-insensitive)\n- `has_thumbnail`: Only files with/without thumbnails\n- `has_metadata`: Only files with/without extracted metadata\n- `manufacturer`: Filter by printer manufacturer (bambu_lab, prusa_research)\n- `printer_model`: Filter by printer model (A1, P1P, Core One, MK4, etc.)\n\n**Pagination:**\n- `page`: Page number (starts at 1)\n- `limit`: Items per page (default 50, max 200)\n\n**Sorting:**\n- Files are sorted by date added (newest first)\n\n**Returns:**\n- `files`: Array of file objects\n- `pagination`: Pagination metadata (page, limit, total_items, total_pages)",
          "line_start": 91,
          "line_end": 164,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_library_file",
          "full_name": "Database.get_library_file",
          "class": "Database",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get library file by ID.",
          "line_start": 1133,
          "line_end": 1139,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_library_file",
          "full_name": "Database.delete_library_file",
          "class": "Database",
          "signature": "(self, checksum: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete library file by checksum.",
          "line_start": 1163,
          "line_end": 1168,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_library_files",
          "full_name": "Database.list_library_files",
          "class": "Database",
          "signature": "(self, filters: Optional[Dict[str, Any]], page: int, limit: int)",
          "return_type": "tuple",
          "decorators": [],
          "docstring": "List library files with filters and pagination.\n\nReturns:\n    Tuple of (files_list, pagination_info)",
          "line_start": 1170,
          "line_end": 1288,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "resume_print",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "resume_printer",
          "full_name": "resume_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/resume')"
          ],
          "docstring": "Resume the paused print job.",
          "line_start": 320,
          "line_end": 341,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "resume_print",
          "full_name": "BambuLabPrinter.resume_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Bambu Lab printer.",
          "line_start": 1665,
          "line_end": 1686,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "resume_print",
          "full_name": "PrinterInterface.resume_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Resume the paused print job.",
          "line_start": 118,
          "line_end": 120,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "resume_print",
          "full_name": "PrusaPrinter.resume_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Prusa printer.",
          "line_start": 720,
          "line_end": 742,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "stop_print",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "stop_printer",
          "full_name": "stop_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/stop')"
          ],
          "docstring": "Stop/cancel the current print job.",
          "line_start": 345,
          "line_end": 366,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "stop_print",
          "full_name": "BambuLabPrinter.stop_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Bambu Lab printer.",
          "line_start": 1688,
          "line_end": 1709,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "stop_print",
          "full_name": "PrinterInterface.stop_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Stop/cancel the current print job.",
          "line_start": 123,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "stop_print",
          "full_name": "PrusaPrinter.stop_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Prusa printer.",
          "line_start": 744,
          "line_end": 766,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "cleanup_expired",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "cleanup_expired",
          "full_name": "cleanup_expired",
          "class": null,
          "signature": "(trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.delete('/cleanup', status_code=204)"
          ],
          "docstring": "Clean up expired trending cache entries.",
          "line_start": 225,
          "line_end": 232,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "cleanup_expired_trending",
          "full_name": "IdeaService.cleanup_expired_trending",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Clean up expired trending cache entries.",
          "line_start": 320,
          "line_end": 330,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup_expired",
          "full_name": "ThumbnailService.cleanup_expired",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clean up expired thumbnail cache files.",
          "line_start": 210,
          "line_end": 231,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup_expired",
          "full_name": "TrendingService.cleanup_expired",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Remove expired cache entries.",
          "line_start": 524,
          "line_end": 546,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_connection",
      "count": 4,
      "functions": [
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "get_connection_manager",
          "full_name": "get_connection_manager",
          "class": null,
          "signature": "()",
          "return_type": "ConnectionManager",
          "decorators": [],
          "docstring": "",
          "line_start": 189,
          "line_end": 190,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "get_connection",
          "full_name": "Database.get_connection",
          "class": "Database",
          "signature": "(self)",
          "return_type": "aiosqlite.Connection",
          "decorators": [],
          "docstring": "Get database connection.",
          "line_start": 269,
          "line_end": 273,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_connection_info",
          "full_name": "BasePrinter.get_connection_info",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get connection information for debugging.",
          "line_start": 261,
          "line_end": 270,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "get_connection",
          "full_name": "DatabaseConnectionPool.get_connection",
          "class": "DatabaseConnectionPool",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 679,
          "line_end": 685,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_local_file",
      "count": 4,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "create_local_file",
          "full_name": "Database.create_local_file",
          "class": "Database",
          "signature": "(self, file_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a local file record specifically for watch folder files.",
          "line_start": 753,
          "line_end": 761,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_local_files",
          "full_name": "FileService.get_local_files",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of local files only.",
          "line_start": 406,
          "line_end": 415,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "scan_local_files",
          "full_name": "FileService.scan_local_files",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Scan local watch folders for new files (called by file discovery task).",
          "line_start": 417,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_local_files",
          "full_name": "FileWatcherService.get_local_files",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all discovered local files.",
          "line_start": 491,
          "line_end": 509,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "to_dict",
      "count": 4,
      "functions": [
        {
          "file": "src\\models\\idea.py",
          "name": "to_dict",
          "full_name": "Idea.to_dict",
          "class": "Idea",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert idea to dictionary.",
          "line_start": 49,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "to_dict",
          "full_name": "WatchFolder.to_dict",
          "class": "WatchFolder",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 47,
          "line_end": 64,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "to_dict",
          "full_name": "BambuFTPFile.to_dict",
          "class": "BambuFTPFile",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 64,
          "line_end": 74,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "to_dict",
          "full_name": "PrinterConfig.to_dict",
          "class": "PrinterConfig",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert PrinterConfig to dictionary.",
          "line_start": 62,
          "line_end": 72,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_file_download_",
      "count": 4,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_get_file_download_progress",
          "full_name": "TestFileAPI.test_get_file_download_progress",
          "class": "TestFileAPI",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/files/downloads/{download_id}/progress",
          "line_start": 269,
          "line_end": 292,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_large_file_download_performance",
          "full_name": "TestFileDownloadPerformance.test_large_file_download_performance",
          "class": "TestFileDownloadPerformance",
          "signature": "(self, temp_download_directory)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test performance when downloading large 3D model files",
          "line_start": 493,
          "line_end": 539,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_file_download_progress_updates",
          "full_name": "TestWebSocketRealTimeUpdates.test_file_download_progress_updates",
          "class": "TestWebSocketRealTimeUpdates",
          "signature": "(self, mock_websocket)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test real-time file download progress updates",
          "line_start": 188,
          "line_end": 213,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_models.py",
          "name": "test_file_download_status_progression",
          "full_name": "TestFileModel.test_file_download_status_progression",
          "class": "TestFileModel",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test file download status changes.",
          "line_start": 147,
          "line_end": 169,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_performance",
      "count": 4,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_large_file_list_performance",
          "full_name": "TestFileAPIPerformance.test_large_file_list_performance",
          "class": "TestFileAPIPerformance",
          "signature": "(self, api_client, db_connection, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test API performance with large number of files",
          "line_start": 452,
          "line_end": 488,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_large_job_list_performance",
          "full_name": "TestJobAPIPerformance.test_large_job_list_performance",
          "class": "TestJobAPIPerformance",
          "signature": "(self, api_client, db_connection, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test API performance with large number of jobs",
          "line_start": 487,
          "line_end": 522,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_large_printer_list_performance",
          "full_name": "TestPrinterAPIEdgeCases.test_large_printer_list_performance",
          "class": "TestPrinterAPIEdgeCases",
          "signature": "(self, api_client, test_config, db_connection)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test API performance with large number of printers",
          "line_start": 494,
          "line_end": 530,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_large_response_performance",
          "full_name": "TestAPIPerformance.test_large_response_performance",
          "class": "TestAPIPerformance",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test API performance with large response payloads",
          "line_start": 358,
          "line_end": 420,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_business_",
      "count": 4,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_business_vs_private_job_classification",
          "full_name": "TestJobBusinessLogic.test_business_vs_private_job_classification",
          "class": "TestJobBusinessLogic",
          "signature": "(self, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test business vs private job classification",
          "line_start": 419,
          "line_end": 434,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_business_vs_private_job_tracking",
          "full_name": "TestGermanBusinessLogic.test_business_vs_private_job_tracking",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test business vs private job classification for German tax requirements",
          "line_start": 395,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_business_vs_private_classification",
          "full_name": "TestGermanBusinessIntegration.test_business_vs_private_classification",
          "class": "TestGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test business vs private job classification logic.",
          "line_start": 239,
          "line_end": 250,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_business_classification",
          "full_name": "TestGermanBusinessLogic.test_business_classification",
          "class": "TestGermanBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test automatic business vs private classification.",
          "line_start": 126,
          "line_end": 141,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_business_hours_",
      "count": 4,
      "functions": [
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_printer_business_hours_validation",
          "full_name": "TestPrinterBusinessLogic.test_printer_business_hours_validation",
          "class": "TestPrinterBusinessLogic",
          "signature": "(self, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test business hours validation for German operations",
          "line_start": 415,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_german_business.py",
          "name": "test_business_hours_calculation",
          "full_name": "TestGermanTimezoneHandling.test_business_hours_calculation",
          "class": "TestGermanTimezoneHandling",
          "signature": "(self, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours calculation",
          "line_start": 256,
          "line_end": 287,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_business_hours_validation",
          "full_name": "TestGermanBusinessLogic.test_business_hours_validation",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours validation",
          "line_start": 415,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_business_hours_validation",
          "full_name": "TestBusinessLogic.test_business_hours_validation",
          "class": "TestBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours validation.",
          "line_start": 156,
          "line_end": 169,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "analyze_gcode_file",
      "count": 3,
      "functions": [
        {
          "file": "demo_gcode_optimization.py",
          "name": "analyze_gcode_file_lines",
          "full_name": "analyze_gcode_file_lines",
          "class": null,
          "signature": "(self, lines)",
          "return_type": "",
          "decorators": [],
          "docstring": "Helper method to analyze lines directly (for demo).",
          "line_start": 161,
          "line_end": 171,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\gcode_analyzer.py",
          "name": "analyze_gcode_file",
          "full_name": "GcodeAnalyzer.analyze_gcode_file",
          "class": "GcodeAnalyzer",
          "signature": "(self, file_path: str, max_lines: int)",
          "return_type": "dict",
          "decorators": [],
          "docstring": "Analyze a G-code file and return optimization info.\n\nArgs:\n    file_path: Path to G-code file\n    max_lines: Maximum lines to analyze (for performance)\n    \nReturns:\n    Dictionary with analysis results",
          "line_start": 178,
          "line_end": 216,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_gcode_analyzer.py",
          "name": "test_analyze_gcode_file_success",
          "full_name": "TestGcodeAnalyzer.test_analyze_gcode_file_success",
          "class": "TestGcodeAnalyzer",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test analyzing a real G-code file.",
          "line_start": 167,
          "line_end": 195,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "analyze_file",
      "count": 3,
      "functions": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "analyze_file",
          "full_name": "analyze_file",
          "class": null,
          "signature": "(filepath: str)",
          "return_type": "Dict",
          "decorators": [],
          "docstring": "Analyze a single Python file",
          "line_start": 145,
          "line_end": 169,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\files.py",
          "name": "analyze_file",
          "full_name": "analyze_file",
          "class": null,
          "signature": "(file_id: str, include_recommendations: bool, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}/analysis')"
          ],
          "docstring": "Get detailed file analysis with optimization recommendations.\n\nProvides actionable insights about:\n- Printability score and success probability\n- Risk factors and potential issues\n- Optimization suggestions for speed, quality, or cost\n- Printer compatibility recommendations",
          "line_start": 661,
          "line_end": 760,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\threemf_analyzer.py",
          "name": "analyze_file",
          "full_name": "ThreeMFAnalyzer.analyze_file",
          "class": "ThreeMFAnalyzer",
          "signature": "(self, file_path: Path)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Analyze 3MF file and extract comprehensive metadata.\n\nArgs:\n    file_path: Path to the 3MF file\n    \nReturns:\n    Dictionary containing extracted metadata organized by category",
          "line_start": 22,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "generate_",
      "count": 3,
      "functions": [
        {
          "file": "scripts\\error_analysis_agent.py",
          "name": "generate_report",
          "full_name": "ErrorAnalysisAgent.generate_report",
          "class": "ErrorAnalysisAgent",
          "signature": "(self, output_format)",
          "return_type": "",
          "decorators": [],
          "docstring": "Generate comprehensive error analysis report.",
          "line_start": 182,
          "line_end": 200,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "generate_report",
          "full_name": "MaterialService.generate_report",
          "class": "MaterialService",
          "signature": "(self, start_date: datetime, end_date: datetime)",
          "return_type": "MaterialReport",
          "decorators": [],
          "docstring": "Generate material consumption report for a period.",
          "line_start": 402,
          "line_end": 511,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "generate_coverage_report",
          "full_name": "PrinternizerTestRunner.generate_coverage_report",
          "class": "PrinternizerTestRunner",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Generate comprehensive coverage report",
          "line_start": 149,
          "line_end": 221,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_file_by_id",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_file_by_id",
          "full_name": "get_file_by_id",
          "class": null,
          "signature": "(file_id: str, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}', response_model=FileResponse)"
          ],
          "docstring": "Get file information by ID.",
          "line_start": 143,
          "line_end": 163,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_by_id",
          "full_name": "FileService.get_file_by_id",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file information by ID.",
          "line_start": 688,
          "line_end": 707,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_file_by_id",
          "full_name": "LibraryService.get_file_by_id",
          "class": "LibraryService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file from library by ID.\n\nArgs:\n    file_id: File database ID\n\nReturns:\n    File record or None if not found",
          "line_start": 437,
          "line_end": 447,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_enhanced_metadata",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_enhanced_metadata",
          "full_name": "get_enhanced_metadata",
          "class": null,
          "signature": "(file_id: str, force_refresh: bool, file_service: FileService)",
          "return_type": "",
          "decorators": [
            "router.get('/{file_id}/metadata/enhanced')"
          ],
          "docstring": "Get comprehensive enhanced metadata for a file.\n\nThis endpoint provides detailed information including:\n- Physical properties (dimensions, volume, objects)\n- Print settings (layer height, nozzle, infill)\n- Material requirements (filament weight, colors)\n- Cost analysis (material and energy costs)\n- Quality metrics (complexity score, difficulty level)\n- Compatibility information (printers, slicer info)",
          "line_start": 603,
          "line_end": 657,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_file_enhanced_metadata",
          "full_name": "Database.update_file_enhanced_metadata",
          "class": "Database",
          "signature": "(self, file_id: str, enhanced_metadata: Dict[str, Any], last_analyzed: datetime)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update file with enhanced metadata (Issue #43 - METADATA-001).\n\nThis method stores comprehensive metadata extracted from 3D files including\nphysical properties, print settings, material requirements, cost analysis,\nquality metrics, and compatibility information.",
          "line_start": 681,
          "line_end": 751,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "extract_enhanced_metadata",
          "full_name": "FileService.extract_enhanced_metadata",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Extract enhanced metadata from a file using BambuParser and ThreeMFAnalyzer.\n\nThis method implements Phase 1 of Issue #43 - METADATA-001.\nIt extracts comprehensive metadata including physical properties, print settings,\nmaterial requirements, cost analysis, quality metrics, and compatibility info.\n\nArgs:\n    file_id: ID of the file to analyze\n    \nReturns:\n    Enhanced metadata dictionary or None if extraction failed",
          "line_start": 1007,
          "line_end": 1164,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "search_ideas",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "search_ideas",
          "full_name": "search_ideas",
          "class": null,
          "signature": "(q: str, status: Optional[str], is_business: Optional[bool], category: Optional[str], idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.get('/search', response_model=List[Dict[str, Any]])"
          ],
          "docstring": "Search ideas by title, description, and tags.",
          "line_start": 315,
          "line_end": 337,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "search_ideas",
          "full_name": "IdeaService.search_ideas",
          "class": "IdeaService",
          "signature": "(self, query: str, filters: Optional[Dict[str, Any]])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Search ideas by title and description.",
          "line_start": 332,
          "line_end": 353,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_search_ideas",
          "full_name": "TestIdeaService.test_search_ideas",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test searching ideas.",
          "line_start": 227,
          "line_end": 270,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "list_jobs",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "name": "list_jobs",
          "full_name": "list_jobs",
          "class": null,
          "signature": "(printer_id: Optional[str], job_status: Optional[str], is_business: Optional[bool], limit: int, offset: int, job_service: JobService)",
          "return_type": "",
          "decorators": [
            "router.get('/', response_model=List[JobResponse])"
          ],
          "docstring": "List jobs with optional filtering.",
          "line_start": 78,
          "line_end": 101,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "list_jobs",
          "full_name": "Database.list_jobs",
          "class": "Database",
          "signature": "(self, printer_id: Optional[str], status: Optional[str], is_business: Optional[bool], limit: Optional[int], offset: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List jobs with optional filtering and pagination.",
          "line_start": 396,
          "line_end": 433,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "list_jobs",
          "full_name": "JobService.list_jobs",
          "class": "JobService",
          "signature": "(self, printer_id, status, is_business, limit: int, offset: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "List jobs with optional filtering.",
          "line_start": 80,
          "line_end": 140,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_service",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "get_library_service",
          "full_name": "get_library_service",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Get library service from application state.",
          "line_start": 82,
          "line_end": 87,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_idea_service",
          "full_name": "get_idea_service",
          "class": null,
          "signature": "(database: Database)",
          "return_type": "IdeaService",
          "decorators": [],
          "docstring": "Get idea service instance.",
          "line_start": 59,
          "line_end": 63,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "library_service",
          "full_name": "library_service",
          "class": null,
          "signature": "(mock_database, mock_config_service, mock_event_service)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Initialize library service with mocks",
          "line_start": 66,
          "line_end": 71,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_monitoring",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "stop_printer_monitoring",
          "full_name": "stop_printer_monitoring",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/monitoring/stop')"
          ],
          "docstring": "Stop monitoring for a specific printer.",
          "line_start": 443,
          "line_end": 464,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "stop_monitoring",
          "full_name": "BasePrinter.stop_monitoring",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Stop status monitoring.",
          "line_start": 185,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "stop_monitoring",
          "full_name": "PrinterService.stop_monitoring",
          "class": "PrinterService",
          "signature": "(self, printer_id: Optional[str])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop printer monitoring for all or specific printer.",
          "line_start": 475,
          "line_end": 500,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_application_settings",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_application_settings",
          "full_name": "get_application_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/application', response_model=ApplicationSettingsResponse)"
          ],
          "docstring": "Get all application settings.",
          "line_start": 97,
          "line_end": 109,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_application_settings",
          "full_name": "ConfigService.get_application_settings",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get all application settings.",
          "line_start": 454,
          "line_end": 482,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "update_application_settings",
          "full_name": "ConfigService.update_application_settings",
          "class": "ConfigService",
          "signature": "(self, settings_dict: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update runtime-modifiable application settings.",
          "line_start": 490,
          "line_end": 531,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_config",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_printer_configurations",
          "full_name": "get_printer_configurations",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/printers')"
          ],
          "docstring": "Get all printer configurations.",
          "line_start": 141,
          "line_end": 162,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_printer_default_configuration",
          "full_name": "TestSystemConfiguration.test_printer_default_configuration",
          "class": "TestSystemConfiguration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test default printer configuration values.",
          "line_start": 111,
          "line_end": 133,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_printer_config_updates",
          "full_name": "TestConfigurationValidation.test_printer_config_updates",
          "class": "TestConfigurationValidation",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test printer configuration updates.",
          "line_start": 166,
          "line_end": 177,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_printer_connection",
      "count": 3,
      "functions": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "validate_printer_connection",
          "full_name": "validate_printer_connection",
          "class": null,
          "signature": "(printer_id: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/printers/{printer_id}/validate')"
          ],
          "docstring": "Validate printer connection configuration.",
          "line_start": 217,
          "line_end": 230,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "validate_printer_connection",
          "full_name": "ConfigService.validate_printer_connection",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Validate printer connection configuration.",
          "line_start": 372,
          "line_end": 382,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_printer_connection_test",
          "full_name": "TestPrinterAPI.test_printer_connection_test",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, test_config, mock_bambu_api)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test POST /api/v1/printers/{id}/test-connection",
          "line_start": 340,
          "line_end": 355,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "close",
      "count": 3,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "close",
          "full_name": "Database.close",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close database connection.",
          "line_start": 263,
          "line_end": 267,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "close",
          "full_name": "UrlParserService.close",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close HTTP session.",
          "line_start": 32,
          "line_end": 36,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "close_all",
          "full_name": "DatabaseConnectionPool.close_all",
          "class": "DatabaseConnectionPool",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 692,
          "line_end": 694,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "create_job",
      "count": 3,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "create_job",
          "full_name": "Database.create_job",
          "class": "Database",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new job record.",
          "line_start": 361,
          "line_end": 382,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "create_job",
          "full_name": "JobService.create_job",
          "class": "JobService",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "str",
          "decorators": [],
          "docstring": "Create a new print job.",
          "line_start": 230,
          "line_end": 285,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "create_job",
          "full_name": "TestConcurrencyErrorHandling.create_job",
          "class": "TestConcurrencyErrorHandling",
          "signature": "(result_list)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 509,
          "line_end": 514,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "from_dict",
      "count": 3,
      "functions": [
        {
          "file": "src\\models\\idea.py",
          "name": "from_dict",
          "full_name": "Idea.from_dict",
          "class": "Idea",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'Idea'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create idea from dictionary.",
          "line_start": 74,
          "line_end": 96,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "from_dict",
          "full_name": "WatchFolder.from_dict",
          "class": "WatchFolder",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'WatchFolder'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create instance from dictionary.",
          "line_start": 67,
          "line_end": 84,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "from_dict",
          "full_name": "PrinterConfig.from_dict",
          "class": "PrinterConfig",
          "signature": "(cls, printer_id: str, config: Dict[str, Any])",
          "return_type": "'PrinterConfig'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create PrinterConfig from dictionary.",
          "line_start": 49,
          "line_end": 60,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "has_camera",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "has_camera",
          "full_name": "BambuLabPrinter.has_camera",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Bambu Lab printer has camera support.",
          "line_start": 1711,
          "line_end": 1723,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "has_camera",
          "full_name": "PrinterInterface.has_camera",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Check if printer has camera support.",
          "line_start": 128,
          "line_end": 130,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "has_camera",
          "full_name": "PrusaPrinter.has_camera",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Prusa printer has camera support.",
          "line_start": 768,
          "line_end": 772,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_connection",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "ftp_connection",
          "full_name": "BambuFTPService.ftp_connection",
          "class": "BambuFTPService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "asynccontextmanager"
          ],
          "docstring": "Async context manager for FTP connections with automatic cleanup.\n\nUsage:\n    async with service.ftp_connection() as ftp:\n        files = await service.list_files(ftp)",
          "line_start": 154,
          "line_end": 192,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "return_connection",
          "full_name": "DatabaseConnectionPool.return_connection",
          "class": "DatabaseConnectionPool",
          "signature": "(self, conn)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 687,
          "line_end": 690,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\conftest.py",
          "name": "db_connection",
          "full_name": "db_connection",
          "class": null,
          "signature": "(temp_database)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Database connection fixture",
          "line_start": 41,
          "line_end": 46,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "calculate_",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\library_service.py",
          "name": "calculate_checksum",
          "full_name": "LibraryService.calculate_checksum",
          "class": "LibraryService",
          "signature": "(self, file_path: Path, algorithm: str)",
          "return_type": "str",
          "decorators": [],
          "docstring": "Calculate file checksum.\n\nArgs:\n    file_path: Path to file\n    algorithm: Hash algorithm (sha256, md5)\n\nReturns:\n    Hexadecimal checksum string",
          "line_start": 89,
          "line_end": 104,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "calculate_file_checksum",
          "full_name": "calculate_file_checksum",
          "class": null,
          "signature": "(file_content, algorithm)",
          "return_type": "",
          "decorators": [],
          "docstring": "Calculate file checksum",
          "line_start": 562,
          "line_end": 569,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_calculate_checksum_sha256",
          "full_name": "TestChecksumCalculation.test_calculate_checksum_sha256",
          "class": "TestChecksumCalculation",
          "signature": "(self, library_service, sample_test_file)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test SHA-256 checksum calculation",
          "line_start": 114,
          "line_end": 118,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "cleanup",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\material_service.py",
          "name": "cleanup",
          "full_name": "MaterialService.cleanup",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up material service resources.",
          "line_start": 539,
          "line_end": 542,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup",
          "full_name": "ThumbnailService.cleanup",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up thumbnail service resources.",
          "line_start": 315,
          "line_end": 321,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup",
          "full_name": "TrendingService.cleanup",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up trending service resources.",
          "line_start": 652,
          "line_end": 660,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_filter_by_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_get_files_filter_by_status",
          "full_name": "TestFileAPI.test_get_files_filter_by_status",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/files/unified?status=available",
          "line_start": 75,
          "line_end": 85,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_get_jobs_filter_by_status",
          "full_name": "TestJobAPI.test_get_jobs_filter_by_status",
          "class": "TestJobAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/jobs?status=printing",
          "line_start": 54,
          "line_end": 64,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_get_printers_filter_by_active_status",
          "full_name": "TestPrinterAPI.test_get_printers_filter_by_active_status",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/printers?active=true",
          "line_start": 65,
          "line_end": 75,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_file_download_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_post_file_download_prusa",
          "full_name": "TestFileAPI.test_post_file_download_prusa",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config, mock_prusa_api, temp_download_directory)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test POST /api/v1/files/{id}/download for Prusa file",
          "line_start": 127,
          "line_end": 150,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_file_download_progress",
          "full_name": "TestWebSocketIntegration.test_file_download_progress",
          "class": "TestWebSocketIntegration",
          "signature": "(self, mock_websocket)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test real-time file download progress updates",
          "line_start": 331,
          "line_end": 354,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "test_prusa_file_download_http",
          "full_name": "TestEssentialPrusaDriverIntegration.test_prusa_file_download_http",
          "class": "TestEssentialPrusaDriverIntegration",
          "signature": "(self, mock_prusa_printer)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test HTTP file download from Prusa printer.",
          "line_start": 321,
          "line_end": 354,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_concurrent_file_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_concurrent_file_downloads",
          "full_name": "TestFileAPIPerformance.test_concurrent_file_downloads",
          "class": "TestFileAPIPerformance",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test concurrent file download requests",
          "line_start": 490,
          "line_end": 522,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_concurrent_file_additions",
          "full_name": "TestConcurrency.test_concurrent_file_additions",
          "class": "TestConcurrency",
          "signature": "(self, library_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test handling concurrent additions of same file",
          "line_start": 512,
          "line_end": 523,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_concurrent_file_downloads",
          "full_name": "TestFileDownloadPerformance.test_concurrent_file_downloads",
          "class": "TestFileDownloadPerformance",
          "signature": "(self, temp_download_directory)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test performance with multiple concurrent file downloads",
          "line_start": 541,
          "line_end": 599,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_printer_connection_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_printer_connection_test_failed",
          "full_name": "TestPrinterAPI.test_printer_connection_test_failed",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test POST /api/v1/printers/{id}/test-connection with failed connection",
          "line_start": 357,
          "line_end": 371,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "test_printer_connection_timeout",
          "full_name": "TestNetworkErrorHandling.test_printer_connection_timeout",
          "class": "TestNetworkErrorHandling",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test handling of printer connection timeouts",
          "line_start": 31,
          "line_end": 52,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_printer_connection_failure_recovery",
          "full_name": "TestErrorHandlingIntegration.test_printer_connection_failure_recovery",
          "class": "TestErrorHandlingIntegration",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test printer connection failure and recovery scenarios",
          "line_start": 461,
          "line_end": 479,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_concurrent_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_concurrent_printer_requests",
          "full_name": "TestPrinterAPIEdgeCases.test_concurrent_printer_requests",
          "class": "TestPrinterAPIEdgeCases",
          "signature": "(self, api_client, test_config, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test concurrent requests to printer API",
          "line_start": 465,
          "line_end": 492,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "test_too_many_concurrent_requests",
          "full_name": "TestResourceExhaustionHandling.test_too_many_concurrent_requests",
          "class": "TestResourceExhaustionHandling",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test handling of too many concurrent requests",
          "line_start": 659,
          "line_end": 680,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_concurrent_api_requests",
          "full_name": "TestAPIPerformance.test_concurrent_api_requests",
          "class": "TestAPIPerformance",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test API performance with concurrent requests",
          "line_start": 313,
          "line_end": 356,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_database_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_database_creation",
          "full_name": "TestDatabaseSchema.test_database_creation",
          "class": "TestDatabaseSchema",
          "signature": "(self, temp_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test database creation with schema",
          "line_start": 14,
          "line_end": 35,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "test_database_corruption",
          "full_name": "TestDatabaseErrorHandling.test_database_corruption",
          "class": "TestDatabaseErrorHandling",
          "signature": "(self, temp_database, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test handling of database corruption scenarios",
          "line_start": 273,
          "line_end": 287,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_config.py",
          "name": "test_database_path_configuration",
          "full_name": "TestSystemConfiguration.test_database_path_configuration",
          "class": "TestSystemConfiguration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test database path configuration.",
          "line_start": 89,
          "line_end": 95,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_currency_formatting",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_german_business.py",
          "name": "test_eur_currency_formatting",
          "full_name": "TestGermanCurrencyHandling.test_eur_currency_formatting",
          "class": "TestGermanCurrencyHandling",
          "signature": "(self, german_business_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test EUR currency formatting according to German standards",
          "line_start": 23,
          "line_end": 44,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_currency_formatting",
          "full_name": "TestGermanBusinessLogic.test_currency_formatting",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, test_utils)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German currency formatting",
          "line_start": 408,
          "line_end": 413,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_currency_formatting_integration",
          "full_name": "TestGermanBusinessIntegration.test_currency_formatting_integration",
          "class": "TestGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test EUR currency formatting in business calculations.",
          "line_start": 223,
          "line_end": 237,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "mock_bambu_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\conftest.py",
          "name": "mock_bambu_api",
          "full_name": "mock_bambu_api",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Bambu Lab API responses",
          "line_start": 192,
          "line_end": 230,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "mock_bambu_printer",
          "full_name": "TestEssentialPrinterAPIEndpoints.mock_bambu_printer",
          "class": "TestEssentialPrinterAPIEndpoints",
          "signature": "(self, mock_printer_id)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Bambu Lab printer for testing.",
          "line_start": 30,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "mock_bambu_printer",
          "full_name": "TestEssentialBambuLabDriverIntegration.mock_bambu_printer",
          "class": "TestEssentialBambuLabDriverIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Bambu Lab printer with MQTT client.",
          "line_start": 26,
          "line_end": 43,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "mock_prusa_",
      "count": 3,
      "functions": [
        {
          "file": "tests\\conftest.py",
          "name": "mock_prusa_api",
          "full_name": "mock_prusa_api",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Prusa PrusaLink API responses",
          "line_start": 234,
          "line_end": 266,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_api.py",
          "name": "mock_prusa_printer",
          "full_name": "TestEssentialPrinterAPIEndpoints.mock_prusa_printer",
          "class": "TestEssentialPrinterAPIEndpoints",
          "signature": "(self, mock_printer_id)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Prusa printer for testing.",
          "line_start": 43,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "mock_prusa_printer",
          "full_name": "TestEssentialPrusaDriverIntegration.mock_prusa_printer",
          "class": "TestEssentialPrusaDriverIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock Prusa printer with HTTP client.",
          "line_start": 197,
          "line_end": 204,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "ate_idea_with_tags",
      "count": 3,
      "functions": [
        {
          "file": "tests\\fixtures\\ideas_fixtures.py",
          "name": "create_idea_with_tags",
          "full_name": "create_idea_with_tags",
          "class": null,
          "signature": "(title: str, tags: List[str])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Create an idea with specific tags.",
          "line_start": 171,
          "line_end": 179,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_create_idea_with_tags",
          "full_name": "TestIdeaService.test_create_idea_with_tags",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test idea creation with tags.",
          "line_start": 60,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_update_idea_with_tags",
          "full_name": "TestIdeaService.test_update_idea_with_tags",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test idea update with tags.",
          "line_start": 142,
          "line_end": 152,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "run_frontend_tests",
      "count": 3,
      "functions": [
        {
          "file": "tests\\run_essential_tests.py",
          "name": "run_frontend_tests",
          "full_name": "run_frontend_tests",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run essential frontend tests if Node.js is available.",
          "line_start": 131,
          "line_end": 162,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "run_frontend_tests",
          "full_name": "Milestone12TestRunner.run_frontend_tests",
          "class": "Milestone12TestRunner",
          "signature": "(self, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run frontend JavaScript tests if available.",
          "line_start": 134,
          "line_end": 169,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "run_frontend_tests",
          "full_name": "PrinternizerTestRunner.run_frontend_tests",
          "class": "PrinternizerTestRunner",
          "signature": "(self, test_type, coverage, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run frontend JavaScript tests",
          "line_start": 80,
          "line_end": 124,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "classify_customer",
      "count": 3,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "classify_customer",
          "full_name": "TestGermanBusinessIntegration.classify_customer",
          "class": "TestGermanBusinessIntegration",
          "signature": "(customer_name)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 242,
          "line_end": 244,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "classify_customer_type",
          "full_name": "TestEssentialPrinterDriverComparison.classify_customer_type",
          "class": "TestEssentialPrinterDriverComparison",
          "signature": "(customer_name)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 518,
          "line_end": 520,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "classify_customer",
          "full_name": "TestGermanBusinessLogic.classify_customer",
          "class": "TestGermanBusinessLogic",
          "signature": "(name)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 130,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "create_sample_",
      "count": 2,
      "functions": [
        {
          "file": "demo_gcode_optimization.py",
          "name": "create_sample_gcode",
          "full_name": "create_sample_gcode",
          "class": null,
          "signature": "()",
          "return_type": "str",
          "decorators": [],
          "docstring": "Create a sample G-code file with warmup phase.",
          "line_start": 18,
          "line_end": 71,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\fixtures\\ideas_fixtures.py",
          "name": "create_sample_idea",
          "full_name": "create_sample_idea",
          "class": null,
          "signature": "(title: str, status: str, priority: int, is_business: bool)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Create a sample idea for testing.",
          "line_start": 9,
          "line_end": 34,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "main",
      "count": 2,
      "functions": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main analysis execution",
          "line_start": 351,
          "line_end": 398,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 325,
          "line_end": 421,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_bambu_",
      "count": 2,
      "functions": [
        {
          "file": "scripts\\test_bambu_ftp_direct.py",
          "name": "test_bambu_ftp",
          "full_name": "test_bambu_ftp",
          "class": null,
          "signature": "(ip_address: str, access_code: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Test complete FTP functionality with Bambu Lab printer.\n\nArgs:\n    ip_address: Printer IP address\n    access_code: Bambu Lab access code\n\nReturns:\n    True if all tests pass, False otherwise",
          "line_start": 217,
          "line_end": 291,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_existing_bambu_api.py",
          "name": "test_bambu_api",
          "full_name": "test_bambu_api",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Test the existing bambulabs-api library.",
          "line_start": 22,
          "line_end": 138,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_tests",
      "count": 2,
      "functions": [
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "run_all_tests",
          "full_name": "BambuFTPTester.run_all_tests",
          "class": "BambuFTPTester",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Run all tests and return comprehensive results.",
          "line_start": 55,
          "line_end": 99,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "run_tests",
          "full_name": "Milestone12TestRunner.run_tests",
          "class": "Milestone12TestRunner",
          "signature": "(self, verbose, coverage)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run all essential tests for Milestone 1.2.",
          "line_start": 200,
          "line_end": 219,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_business_analytics",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\analytics.py",
          "name": "get_business_analytics",
          "full_name": "get_business_analytics",
          "class": null,
          "signature": "(start_date: Optional[date], end_date: Optional[date], analytics_service: AnalyticsService)",
          "return_type": "",
          "decorators": [
            "router.get('/business', response_model=BusinessAnalyticsResponse)"
          ],
          "docstring": "Get business analytics for print operations.",
          "line_start": 66,
          "line_end": 80,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\analytics_service.py",
          "name": "get_business_analytics",
          "full_name": "AnalyticsService.get_business_analytics",
          "class": "AnalyticsService",
          "signature": "(self, start_date: Optional[datetime], end_date: Optional[datetime])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get business analytics for the specified period.",
          "line_start": 168,
          "line_end": 221,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_analytics_",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\analytics.py",
          "name": "get_analytics_overview",
          "full_name": "get_analytics_overview",
          "class": null,
          "signature": "(period: Optional[str], analytics_service: AnalyticsService)",
          "return_type": "",
          "decorators": [
            "router.get('/overview', response_model=OverviewResponse)"
          ],
          "docstring": "Get dashboard overview statistics.",
          "line_start": 84,
          "line_end": 97,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_analytics_service",
          "full_name": "get_analytics_service",
          "class": null,
          "signature": "(database: Database)",
          "return_type": "AnalyticsService",
          "decorators": [],
          "docstring": "Get analytics service instance.",
          "line_start": 52,
          "line_end": 56,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_thumbnail_processing_log",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\debug.py",
          "name": "get_thumbnail_processing_log",
          "full_name": "get_thumbnail_processing_log",
          "class": null,
          "signature": "(request: Request, limit: int)",
          "return_type": "",
          "decorators": [
            "router.get('/thumbnail-processing-log', tags=['Debug'], summary='Get thumbnail processing status log')"
          ],
          "docstring": "Return recent thumbnail processing attempts with status and details.\n\nHelps debug why thumbnail extraction might be failing for specific files.\nShows the last processing attempts with timestamps, file types, and error details.",
          "line_start": 98,
          "line_end": 154,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_thumbnail_processing_log",
          "full_name": "FileService.get_thumbnail_processing_log",
          "class": "FileService",
          "signature": "(self, limit: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get recent thumbnail processing log entries.",
          "line_start": 1001,
          "line_end": 1005,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "ensure_log_directory",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorStoreService.ensure_log_directory",
          "class": "ErrorStoreService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 53,
          "line_end": 55,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorHandler.ensure_log_directory",
          "class": "ErrorHandler",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 49,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "report_error",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "report_errors",
          "full_name": "report_errors",
          "class": null,
          "signature": "(request: ErrorReportRequest, client_request: Request)",
          "return_type": "",
          "decorators": [
            "router.post('/report')"
          ],
          "docstring": "Receive and store frontend error reports.",
          "line_start": 170,
          "line_end": 216,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "report_error",
          "full_name": "ErrorReportingMixin.report_error",
          "class": "ErrorReportingMixin",
          "signature": "(self, error: Exception, category: ErrorCategory, severity: ErrorSeverity, context: Optional[Dict[str, Any]], user_message: Optional[str])",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Report an error through the global error handler.",
          "line_start": 297,
          "line_end": 312,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_from_url",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "import_idea_from_url",
          "full_name": "import_idea_from_url",
          "class": null,
          "signature": "(import_data: IdeaImport, idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/import', response_model=Dict[str, str])"
          ],
          "docstring": "Import an idea from external platform URL.",
          "line_start": 260,
          "line_end": 283,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "import_from_url",
          "full_name": "IdeaService.import_from_url",
          "class": "IdeaService",
          "signature": "(self, url: str, additional_data: Optional[Dict[str, Any]])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Import an idea from an external URL.",
          "line_start": 205,
          "line_end": 231,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "refresh_trending",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\ideas.py",
          "name": "refresh_trending_cache",
          "full_name": "refresh_trending_cache",
          "class": null,
          "signature": "(idea_service: IdeaService)",
          "return_type": "",
          "decorators": [
            "router.post('/trending/refresh', response_model=Dict[str, str])"
          ],
          "docstring": "Force refresh of trending cache (admin endpoint).",
          "line_start": 395,
          "line_end": 418,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "refresh_trending",
          "full_name": "refresh_trending",
          "class": null,
          "signature": "(platform: Optional[str], trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.post('/refresh', status_code=202)"
          ],
          "docstring": "Force refresh trending cache for all or specific platform.",
          "line_start": 124,
          "line_end": 153,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "reprocess_",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "reprocess_library_file",
          "full_name": "reprocess_library_file",
          "class": null,
          "signature": "(checksum: str, library_service)",
          "return_type": "",
          "decorators": [
            "router.post('/files/{checksum}/reprocess', response_model=ReprocessResponse)"
          ],
          "docstring": "Reprocess file metadata extraction.\n\nTriggers metadata re-extraction for a file. Useful when:\n- Metadata extraction failed previously\n- New metadata extractors are available\n- File was updated but metadata is stale\n\n**Parameters:**\n- `checksum`: File SHA-256 checksum\n\n**Process:**\n1. File status set to 'processing'\n2. Metadata extraction scheduled asynchronously\n3. Thumbnails regenerated\n4. Status updated to 'ready' or 'error'\n\n**Returns:**\n- `success`: Whether reprocessing was scheduled\n- `checksum`: File checksum\n- `message`: Status message\n\n**Error Responses:**\n- `404`: File not found\n- `500`: Failed to schedule reprocessing",
          "line_start": 206,
          "line_end": 264,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "reprocess_file",
          "full_name": "LibraryService.reprocess_file",
          "class": "LibraryService",
          "signature": "(self, checksum: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Reprocess file metadata.\n\nArgs:\n    checksum: File checksum\n\nReturns:\n    True if reprocessing started successfully",
          "line_start": 625,
          "line_end": 649,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "delete_library_file",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\library.py",
          "name": "delete_library_file",
          "full_name": "delete_library_file",
          "class": null,
          "signature": "(checksum: str, delete_physical: bool, library_service)",
          "return_type": "",
          "decorators": [
            "router.delete('/files/{checksum}', response_model=DeleteResponse)"
          ],
          "docstring": "Delete file from library.\n\n**Parameters:**\n- `checksum`: File SHA-256 checksum\n- `delete_physical`: Whether to delete physical file (default: true)\n\n**Warning:** This operation cannot be undone!\n\n**Process:**\n1. Remove file record from database\n2. Remove all source associations\n3. Optionally delete physical file from library folder\n4. Delete thumbnails and previews\n\n**Returns:**\n- `success`: Whether deletion succeeded\n- `checksum`: File checksum\n- `message`: Status message\n\n**Error Responses:**\n- `404`: File not found\n- `500`: Deletion failed",
          "line_start": 268,
          "line_end": 325,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "delete_library_file_sources",
          "full_name": "Database.delete_library_file_sources",
          "class": "Database",
          "signature": "(self, checksum: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete all sources for a library file.",
          "line_start": 1323,
          "line_end": 1328,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_material",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "get_material_types",
          "full_name": "get_material_types",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "router.get('/types')"
          ],
          "docstring": "Get available material types.",
          "line_start": 125,
          "line_end": 131,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_materials_by_printer",
          "full_name": "MaterialService.get_materials_by_printer",
          "class": "MaterialService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[MaterialSpool]",
          "decorators": [],
          "docstring": "Get materials loaded in a specific printer.",
          "line_start": 296,
          "line_end": 298,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "export_inventory",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "export_inventory",
          "full_name": "export_inventory",
          "class": null,
          "signature": "(format: str, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.get('/export')"
          ],
          "docstring": "Export material inventory to file.",
          "line_start": 153,
          "line_end": 178,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "export_inventory",
          "full_name": "MaterialService.export_inventory",
          "class": "MaterialService",
          "signature": "(self, file_path: Path)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Export material inventory to CSV.",
          "line_start": 513,
          "line_end": 537,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "ate_material",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "create_material",
          "full_name": "create_material",
          "class": null,
          "signature": "(material_data: MaterialCreate, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.post('/', response_model=MaterialResponse, status_code=201)"
          ],
          "docstring": "Create a new material spool.",
          "line_start": 217,
          "line_end": 246,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "update_material",
          "full_name": "MaterialService.update_material",
          "class": "MaterialService",
          "signature": "(self, material_id: str, update_data: MaterialUpdate)",
          "return_type": "Optional[MaterialSpool]",
          "decorators": [],
          "docstring": "Update material spool.",
          "line_start": 184,
          "line_end": 222,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "record_consumption",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\materials.py",
          "name": "record_consumption",
          "full_name": "record_consumption",
          "class": null,
          "signature": "(consumption_data: ConsumptionRequest, material_service: MaterialService)",
          "return_type": "",
          "decorators": [
            "router.post('/consumption', response_model=dict, status_code=201)"
          ],
          "docstring": "Record material consumption for a job.",
          "line_start": 286,
          "line_end": 315,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "record_consumption",
          "full_name": "MaterialService.record_consumption",
          "class": "MaterialService",
          "signature": "(self, job_id: str, material_id: str, weight_grams: float, printer_id: str, file_name: Optional[str], print_time_hours: Optional[float])",
          "return_type": "MaterialConsumption",
          "decorators": [],
          "docstring": "Record material consumption for a job.",
          "line_start": 224,
          "line_end": 282,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "update_printer",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "update_printer",
          "full_name": "update_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_data: PrinterUpdateRequest, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.put('/{printer_id}', response_model=PrinterResponse)"
          ],
          "docstring": "Update printer configuration.",
          "line_start": 201,
          "line_end": 227,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "add_or_update_printer",
          "full_name": "add_or_update_printer",
          "class": null,
          "signature": "(printer_id: str, printer_config: PrinterConfigRequest, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/printers/{printer_id}')"
          ],
          "docstring": "Add or update a printer configuration.",
          "line_start": 166,
          "line_end": 188,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "delete_printer",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "delete_printer",
          "full_name": "delete_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.delete('/{printer_id}', status_code=status.HTTP_204_NO_CONTENT)"
          ],
          "docstring": "Delete a printer configuration.",
          "line_start": 231,
          "line_end": 250,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_delete_printers",
          "full_name": "TestPrinterAPI.test_delete_printers",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test DELETE /api/v1/printers/{id}",
          "line_start": 305,
          "line_end": 323,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "connect_printer",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "connect_printer",
          "full_name": "connect_printer",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/connect')"
          ],
          "docstring": "Connect to printer.",
          "line_start": 254,
          "line_end": 274,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "disconnect_printer",
          "full_name": "PrinterService.disconnect_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Disconnect from a specific printer.",
          "line_start": 391,
          "line_end": 402,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "download_current_job_file",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\printers.py",
          "name": "download_current_job_file",
          "full_name": "download_current_job_file",
          "class": null,
          "signature": "(printer_id: UUID, printer_service: PrinterService)",
          "return_type": "",
          "decorators": [
            "router.post('/{printer_id}/download-current-job')"
          ],
          "docstring": "Explicitly trigger download + processing of the currently printing job file.\n\nReturns a JSON dict with a status field describing the outcome:\n- success: File downloaded (or already local) and thumbnail processing triggered/completed\n- exists_with_thumbnail: File already present locally with thumbnail\n- exists_no_thumbnail: File present but had no thumbnail extracted (non-print file or parsing failed)\n- not_printing: Printer not currently printing / no active job\n- printer_not_found: Unknown printer id\n- error: Unexpected failure (see message)",
          "line_start": 370,
          "line_end": 394,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "download_current_job_file",
          "full_name": "PrinterService.download_current_job_file",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Download (and process) the currently printing job file to generate a thumbnail.\n\nLogic:\n  1. Get current status\n  2. If no active job -> return informative response\n  3. If file already known & has thumbnail -> return existing\n  4. If file known but no thumbnail & local path present -> process thumbnails directly\n  5. Else attempt download from printer (FileService handles async thumbnail processing)",
          "line_start": 552,
          "line_end": 621,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "reload_config",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "reload_configuration",
          "full_name": "reload_configuration",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/reload')"
          ],
          "docstring": "Reload configuration from files and environment variables.",
          "line_start": 322,
          "line_end": 342,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "reload_config",
          "full_name": "ConfigService.reload_config",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Reload configuration from file and environment.",
          "line_start": 393,
          "line_end": 405,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_platform_",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\trending.py",
          "name": "get_platform_trending",
          "full_name": "get_platform_trending",
          "class": null,
          "signature": "(platform: str, category: Optional[str], limit: int, trending_service: TrendingService)",
          "return_type": "",
          "decorators": [
            "router.get('/{platform}')"
          ],
          "docstring": "Get trending models for a specific platform.",
          "line_start": 182,
          "line_end": 221,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "get_platform_info",
          "full_name": "UrlParserService.get_platform_info",
          "class": "UrlParserService",
          "signature": "(self, platform: str)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get information about a specific platform.",
          "line_start": 198,
          "line_end": 241,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_jobs_by_date_range",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_jobs_by_date_range",
          "full_name": "Database.get_jobs_by_date_range",
          "class": "Database",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting.",
          "line_start": 435,
          "line_end": 453,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_jobs_by_date_range",
          "full_name": "JobService.get_jobs_by_date_range",
          "class": "JobService",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting purposes.",
          "line_start": 391,
          "line_end": 424,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "t_trending",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "upsert_trending",
          "full_name": "Database.upsert_trending",
          "class": "Database",
          "signature": "(self, trending_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Insert or update trending cache entry.",
          "line_start": 996,
          "line_end": 1021,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_get_trending",
          "full_name": "TestIdeaService.test_get_trending",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test getting trending models.",
          "line_start": 205,
          "line_end": 213,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_expired_trending",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "clean_expired_trending",
          "full_name": "Database.clean_expired_trending",
          "class": "Database",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Remove expired trending cache entries.",
          "line_start": 1044,
          "line_end": 1053,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_cleanup_expired_trending",
          "full_name": "TestIdeaService.test_cleanup_expired_trending",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test cleanup of expired trending items.",
          "line_start": 273,
          "line_end": 278,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_file_by_checksum",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_library_file_by_checksum",
          "full_name": "Database.get_library_file_by_checksum",
          "class": "Database",
          "signature": "(self, checksum: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get library file by checksum.",
          "line_start": 1141,
          "line_end": 1147,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_file_by_checksum",
          "full_name": "LibraryService.get_file_by_checksum",
          "class": "LibraryService",
          "signature": "(self, checksum: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file from library by checksum.\n\nArgs:\n    checksum: File checksum\n\nReturns:\n    File record or None if not found",
          "line_start": 425,
          "line_end": 435,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_formatted_time",
      "count": 2,
      "functions": [
        {
          "file": "src\\models\\idea.py",
          "name": "get_formatted_time",
          "full_name": "Idea.get_formatted_time",
          "class": "Idea",
          "signature": "(self)",
          "return_type": "str",
          "decorators": [],
          "docstring": "Get formatted estimated print time.",
          "line_start": 110,
          "line_end": 118,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_get_formatted_time",
          "full_name": "TestIdeaModel.test_get_formatted_time",
          "class": "TestIdeaModel",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test formatted time display.",
          "line_start": 333,
          "line_end": 345,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_monitoring_",
      "count": 2,
      "functions": [
        {
          "file": "src\\printers\\base.py",
          "name": "get_monitoring_metrics",
          "full_name": "BasePrinter.get_monitoring_metrics",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get basic monitoring metrics for this printer.",
          "line_start": 272,
          "line_end": 283,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\monitoring_service.py",
          "name": "get_monitoring_status",
          "full_name": "MonitoringService.get_monitoring_status",
          "class": "MonitoringService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get current monitoring status.",
          "line_start": 317,
          "line_end": 362,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_files",
      "count": 2,
      "functions": [
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_files",
          "full_name": "PrusaPrinter.get_files",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "List[dict]",
          "decorators": [],
          "docstring": "Get raw file data from Prusa printer API (for download references).",
          "line_start": 399,
          "line_end": 475,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_files",
          "full_name": "FileService.get_files",
          "class": "FileService",
          "signature": "(self, printer_id: Optional[str], include_local: bool, status: Optional[str], source: Optional[str], has_thumbnail: Optional[bool], search: Optional[str], limit: Optional[int], order_by: Optional[str], order_dir: Optional[str], page: Optional[int])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of available files from printers and local folders.",
          "line_start": 43,
          "line_end": 152,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "download_thumbnail",
      "count": 2,
      "functions": [
        {
          "file": "src\\printers\\prusa.py",
          "name": "download_thumbnail",
          "full_name": "PrusaPrinter.download_thumbnail",
          "class": "PrusaPrinter",
          "signature": "(self, filename: str, size: str)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Download thumbnail for a file from Prusa printer.\n\nArgs:\n    filename: Display name of the file\n    size: Thumbnail size - 's' (small/icon) or 'l' (large/thumbnail)\n\nReturns:\n    PNG thumbnail data as bytes, or None if not available",
          "line_start": 628,
          "line_end": 694,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "download_thumbnail",
          "full_name": "ThumbnailService.download_thumbnail",
          "class": "ThumbnailService",
          "signature": "(self, url: str, source_type: str, force_refresh: bool)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Download and cache a thumbnail from URL.",
          "line_start": 66,
          "line_end": 108,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_business_",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\analytics_service.py",
          "name": "get_business_report",
          "full_name": "AnalyticsService.get_business_report",
          "class": "AnalyticsService",
          "signature": "(self, start_date: datetime, end_date: datetime)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Generate business report for given period.",
          "line_start": 47,
          "line_end": 114,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_business_jobs",
          "full_name": "JobService.get_business_jobs",
          "class": "JobService",
          "signature": "(self, limit: int, offset: int)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get business jobs specifically.",
          "line_start": 426,
          "line_end": 428,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "file_exists",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "file_exists",
          "full_name": "BambuFTPService.file_exists",
          "class": "BambuFTPService",
          "signature": "(self, filename: str, directory: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if a file exists on the FTP server.\n\nArgs:\n    filename: Name of file to check\n    directory: Directory to check in (default: /cache)\n\nReturns:\n    True if file exists, False otherwise",
          "line_start": 368,
          "line_end": 387,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "verify_phase2_integration.py",
          "name": "check_file_exists",
          "full_name": "check_file_exists",
          "class": null,
          "signature": "(filepath, description)",
          "return_type": "",
          "decorators": [],
          "docstring": "Check if a file exists and report.",
          "line_start": 11,
          "line_end": 19,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_thumbnail_",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\bambu_parser.py",
          "name": "get_thumbnail_by_size",
          "full_name": "BambuParser.get_thumbnail_by_size",
          "class": "BambuParser",
          "signature": "(self, thumbnails: List[Dict[str, Any]], preferred_size: Tuple[int, int])",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get thumbnail closest to preferred size.",
          "line_start": 841,
          "line_end": 854,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_thumbnail_service",
          "full_name": "get_thumbnail_service",
          "class": null,
          "signature": "(request: Request)",
          "return_type": "ThumbnailService",
          "decorators": [],
          "docstring": "Get thumbnail service instance from app state.",
          "line_start": 71,
          "line_end": 73,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "cors_origins",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\config_service.py",
          "name": "get_cors_origins",
          "full_name": "Settings.get_cors_origins",
          "class": "Settings",
          "signature": "(self)",
          "return_type": "List[str]",
          "decorators": [],
          "docstring": "Parse CORS origins from comma-separated string.",
          "line_start": 115,
          "line_end": 117,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\config.py",
          "name": "cors_origins_list",
          "full_name": "PrinternizerSettings.cors_origins_list",
          "class": "PrinternizerSettings",
          "signature": "(self)",
          "return_type": "List[str]",
          "decorators": [
            "property"
          ],
          "docstring": "Get CORS origins as list.",
          "line_start": 124,
          "line_end": 128,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": true,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "e_download",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\config_service.py",
          "name": "normalize_downloads_path",
          "full_name": "Settings.normalize_downloads_path",
          "class": "Settings",
          "signature": "(cls, v: str)",
          "return_type": "str",
          "decorators": [
            "field_validator('downloads_path')",
            "classmethod"
          ],
          "docstring": "Normalize the downloads path to avoid hidden control characters and ensure portability.\n\nHandles accidental escape sequences coming from .env parsing (e.g. C:\\temp becomes C:<TAB>emp\nwhen written as \"C:     emp\"), converts backslashes to forward slashes (Windows-compatible and\nsafer for URL/display), removes control chars, collapses duplicate slashes and resolves to an\nabsolute path when possible.",
          "line_start": 124,
          "line_end": 155,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "generate_download_path",
          "full_name": "generate_download_path",
          "class": null,
          "signature": "(base_dir, printer_id, filename)",
          "return_type": "",
          "decorators": [],
          "docstring": "Mock function to generate download path",
          "line_start": 552,
          "line_end": 559,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "e_library_path",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\config_service.py",
          "name": "normalize_library_path",
          "full_name": "Settings.normalize_library_path",
          "class": "Settings",
          "signature": "(cls, v: str)",
          "return_type": "str",
          "decorators": [
            "field_validator('library_path')",
            "classmethod"
          ],
          "docstring": "Normalize the library path to avoid hidden control characters and ensure portability.",
          "line_start": 159,
          "line_end": 180,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\utils\\config.py",
          "name": "validate_library_path",
          "full_name": "PrinternizerSettings.validate_library_path",
          "class": "PrinternizerSettings",
          "signature": "(cls, v)",
          "return_type": "",
          "decorators": [
            "validator('library_path')"
          ],
          "docstring": "Validate library path is absolute.",
          "line_start": 105,
          "line_end": 121,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "start",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\event_service.py",
          "name": "start",
          "full_name": "EventService.start",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start the event service and background tasks.",
          "line_start": 45,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "start",
          "full_name": "FileWatcherService.start",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start file watcher service.",
          "line_start": 141,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "stop",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\event_service.py",
          "name": "stop",
          "full_name": "EventService.stop",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop the event service and cancel all tasks.",
          "line_start": 63,
          "line_end": 81,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "stop",
          "full_name": "FileWatcherService.stop",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop file watcher service.",
          "line_start": 203,
          "line_end": 239,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_service",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\event_service.py",
          "name": "set_services",
          "full_name": "EventService.set_services",
          "class": "EventService",
          "signature": "(self, printer_service, job_service, file_service, database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Set service dependencies after initialization.",
          "line_start": 476,
          "line_end": 491,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_job_service",
          "full_name": "get_job_service",
          "class": null,
          "signature": "(database: Database, event_service: EventService)",
          "return_type": "JobService",
          "decorators": [],
          "docstring": "Get job service instance.",
          "line_start": 39,
          "line_end": 44,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "calculate_",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\job_service.py",
          "name": "calculate_material_costs",
          "full_name": "JobService.calculate_material_costs",
          "class": "JobService",
          "signature": "(self, job_id: str, material_cost_per_gram: float, power_cost_per_hour: float)",
          "return_type": "Dict[str, float]",
          "decorators": [],
          "docstring": "Calculate material and power costs for a job.",
          "line_start": 434,
          "line_end": 465,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "calculate_total_cost",
          "full_name": "TestEssentialPrinterDriverComparison.calculate_total_cost",
          "class": "TestEssentialPrinterDriverComparison",
          "signature": "(base_cost, vat_rate)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 523,
          "line_end": 525,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_file_to_library",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\library_service.py",
          "name": "add_file_to_library",
          "full_name": "LibraryService.add_file_to_library",
          "class": "LibraryService",
          "signature": "(self, source_path: Path, source_info: Dict[str, Any], copy_file: bool, calculate_hash: bool)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Add a file to the library.\n\nArgs:\n    source_path: Path to source file\n    source_info: Dictionary with source information:\n        - type: 'printer', 'watch_folder', 'upload'\n        - printer_id: ID of printer (for printer source)\n        - printer_name: Name of printer (for printer source)\n        - folder_path: Path to watch folder (for watch_folder source)\n        - relative_path: Relative path within folder\n    copy_file: Whether to copy file to library (False to move)\n    calculate_hash: Whether to calculate checksum (False if already known)\n\nReturns:\n    Dictionary with file information",
          "line_start": 215,
          "line_end": 423,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_add_new_file_to_library",
          "full_name": "TestFileAddition.test_add_new_file_to_library",
          "class": "TestFileAddition",
          "signature": "(self, library_service, sample_test_file, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test adding a new file to library",
          "line_start": 203,
          "line_end": 218,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "clear_cache",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "clear_cache",
          "full_name": "PreviewRenderService.clear_cache",
          "class": "PreviewRenderService",
          "signature": "(self, older_than_days: Optional[int])",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clear preview cache.\n\nArgs:\n    older_than_days: Only clear files older than this many days.\n                   If None, clear all.\n\nReturns:\n    Number of files removed",
          "line_start": 499,
          "line_end": 535,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "clear_cache",
          "full_name": "ThumbnailService.clear_cache",
          "class": "ThumbnailService",
          "signature": "(self, source_type: Optional[str])",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clear thumbnail cache for all or specific source type.",
          "line_start": 287,
          "line_end": 313,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "e_trending_items",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\trending_service.py",
          "name": "save_trending_items",
          "full_name": "TrendingService.save_trending_items",
          "class": "TrendingService",
          "signature": "(self, items: List[Dict[str, Any]], platform: str)",
          "return_type": "",
          "decorators": [],
          "docstring": "Save trending items to cache.",
          "line_start": 409,
          "line_end": 464,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\fixtures\\ideas_fixtures.py",
          "name": "get_sample_trending_items",
          "full_name": "IdeasTestFixtures.get_sample_trending_items",
          "class": "IdeasTestFixtures",
          "signature": "()",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [
            "staticmethod"
          ],
          "docstring": "Get a collection of sample trending items for testing.",
          "line_start": 115,
          "line_end": 150,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": true,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "extract_creator_from_title",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "extract_creator_from_title",
          "full_name": "UrlParserService.extract_creator_from_title",
          "class": "UrlParserService",
          "signature": "(self, title: str, platform: str)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Extract creator name from page title if available.",
          "line_start": 129,
          "line_end": 142,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_url_parser_service.py",
          "name": "test_extract_creator_from_title",
          "full_name": "TestUrlParserService.test_extract_creator_from_title",
          "class": "TestUrlParserService",
          "signature": "(self, url_parser)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test creator extraction from titles.",
          "line_start": 120,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_database",
      "count": 2,
      "functions": [
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_database",
          "full_name": "get_database",
          "class": null,
          "signature": "(request: Request)",
          "return_type": "Database",
          "decorators": [],
          "docstring": "Get database instance from app state.",
          "line_start": 19,
          "line_end": 21,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\conftest.py",
          "name": "temp_database",
          "full_name": "temp_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Create temporary SQLite database for testing",
          "line_start": 20,
          "line_end": 37,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_config_service",
      "count": 2,
      "functions": [
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_config_service",
          "full_name": "get_config_service",
          "class": null,
          "signature": "(request: Request)",
          "return_type": "ConfigService",
          "decorators": [],
          "docstring": "Get config service instance from app state.",
          "line_start": 24,
          "line_end": 26,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "mock_config_service",
          "full_name": "mock_config_service",
          "class": null,
          "signature": "(temp_library_path)",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock configuration service",
          "line_start": 44,
          "line_end": 54,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_event_service",
      "count": 2,
      "functions": [
        {
          "file": "src\\utils\\dependencies.py",
          "name": "get_event_service",
          "full_name": "get_event_service",
          "class": null,
          "signature": "(request: Request)",
          "return_type": "EventService",
          "decorators": [],
          "docstring": "Get event service instance from app state.",
          "line_start": 29,
          "line_end": 31,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "mock_event_service",
          "full_name": "mock_event_service",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock event service",
          "line_start": 58,
          "line_end": 62,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "get_optimized_gcode_lines",
      "count": 2,
      "functions": [
        {
          "file": "src\\utils\\gcode_analyzer.py",
          "name": "get_optimized_gcode_lines",
          "full_name": "GcodeAnalyzer.get_optimized_gcode_lines",
          "class": "GcodeAnalyzer",
          "signature": "(self, gcode_lines: List[str])",
          "return_type": "List[str]",
          "decorators": [],
          "docstring": "Get G-code lines with warmup phase removed.\n\nArgs:\n    gcode_lines: Original G-code lines\n    \nReturns:\n    Optimized G-code lines (or original if optimization not possible)",
          "line_start": 153,
          "line_end": 176,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_gcode_analyzer.py",
          "name": "test_get_optimized_gcode_lines_disabled",
          "full_name": "TestGcodeAnalyzer.test_get_optimized_gcode_lines_disabled",
          "class": "TestGcodeAnalyzer",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test that disabled optimization returns original lines.",
          "line_start": 141,
          "line_end": 153,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_filter_by_printer",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_get_files_filter_by_printer",
          "full_name": "TestFileAPI.test_get_files_filter_by_printer",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/files/unified?printer_id=bambu_a1_001",
          "line_start": 63,
          "line_end": 73,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_get_jobs_filter_by_printer",
          "full_name": "TestJobAPI.test_get_jobs_filter_by_printer",
          "class": "TestJobAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/jobs?printer_id=bambu_a1_001",
          "line_start": 66,
          "line_end": 76,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_filter_by_type",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_get_files_filter_by_type",
          "full_name": "TestFileAPI.test_get_files_filter_by_type",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/files/unified?file_type=.3mf",
          "line_start": 87,
          "line_end": 97,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_get_printers_filter_by_type",
          "full_name": "TestPrinterAPI.test_get_printers_filter_by_type",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/printers?type=bambu_lab",
          "line_start": 53,
          "line_end": 63,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_delete_file_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_delete_file_local",
          "full_name": "TestFileAPI.test_delete_file_local",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config, temp_download_directory)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test DELETE /api/v1/files/{id} - Delete local file",
          "line_start": 235,
          "line_end": 255,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_delete_file_with_physical",
          "full_name": "TestFileDeletion.test_delete_file_with_physical",
          "class": "TestFileDeletion",
          "signature": "(self, library_service, mock_database, temp_library_path)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test deleting file including physical file",
          "line_start": 349,
          "line_end": 368,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_delete_file_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_delete_file_available_only",
          "full_name": "TestFileAPI.test_delete_file_available_only",
          "class": "TestFileAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test DELETE /api/v1/files/{id} for file that's only available on printer",
          "line_start": 257,
          "line_end": 267,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_delete_file_database_only",
          "full_name": "TestFileDeletion.test_delete_file_database_only",
          "class": "TestFileDeletion",
          "signature": "(self, library_service, mock_database, temp_library_path)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test deleting file from database only",
          "line_start": 371,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_checksum_verification",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "name": "test_file_checksum_verification",
          "full_name": "TestFileBusinessLogic.test_file_checksum_verification",
          "class": "TestFileBusinessLogic",
          "signature": "(self, sample_3mf_file)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test file integrity verification using checksums",
          "line_start": 394,
          "line_end": 405,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_checksum_verification_after_copy",
          "full_name": "TestFileAddition.test_checksum_verification_after_copy",
          "class": "TestFileAddition",
          "signature": "(self, library_service, sample_test_file, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that checksum is verified after copying",
          "line_start": 275,
          "line_end": 284,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "client",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_health.py",
          "name": "client",
          "full_name": "client",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Test client fixture.",
          "line_start": 12,
          "line_end": 14,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\conftest.py",
          "name": "api_client",
          "full_name": "api_client",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "HTTP client for API testing",
          "line_start": 428,
          "line_end": 436,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_empty_database",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_get_jobs_empty_database",
          "full_name": "TestJobAPI.test_get_jobs_empty_database",
          "class": "TestJobAPI",
          "signature": "(self, api_client, temp_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/jobs with empty database",
          "line_start": 16,
          "line_end": 28,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_get_printers_empty_database",
          "full_name": "TestPrinterAPI.test_get_printers_empty_database",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, temp_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/printers with empty database",
          "line_start": 16,
          "line_end": 28,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_with_data",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_get_jobs_with_data",
          "full_name": "TestJobAPI.test_get_jobs_with_data",
          "class": "TestJobAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/jobs with existing jobs",
          "line_start": 30,
          "line_end": 52,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_get_printers_with_data",
          "full_name": "TestPrinterAPI.test_get_printers_with_data",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, populated_database, test_config, sample_printer_data)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/printers with existing printers",
          "line_start": 30,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_validation_errors",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_post_jobs_validation_errors",
          "full_name": "TestJobAPI.test_post_jobs_validation_errors",
          "class": "TestJobAPI",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test POST /api/v1/jobs with validation errors",
          "line_start": 162,
          "line_end": 205,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_post_printers_validation_errors",
          "full_name": "TestPrinterAPI.test_post_printers_validation_errors",
          "class": "TestPrinterAPI",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test POST /api/v1/printers with validation errors",
          "line_start": 130,
          "line_end": 175,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_not_found",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_get_job_details_not_found",
          "full_name": "TestJobAPI.test_get_job_details_not_found",
          "class": "TestJobAPI",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test GET /api/v1/jobs/{id} for non-existent job",
          "line_start": 239,
          "line_end": 244,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_get_idea_not_found",
          "full_name": "TestIdeaService.test_get_idea_not_found",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test idea retrieval when not found.",
          "line_start": 99,
          "line_end": 105,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_status_update",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_put_job_status_update",
          "full_name": "TestJobAPI.test_put_job_status_update",
          "class": "TestJobAPI",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test PUT /api/v1/jobs/{id}/status - Update job status",
          "line_start": 246,
          "line_end": 269,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_websocket.py",
          "name": "test_printer_status_updates",
          "full_name": "TestWebSocketRealTimeUpdates.test_printer_status_updates",
          "class": "TestWebSocketRealTimeUpdates",
          "signature": "(self, mock_websocket)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test real-time printer status updates",
          "line_start": 126,
          "line_end": 157,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_material_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "name": "test_material_usage_tracking",
          "full_name": "TestJobBusinessLogic.test_material_usage_tracking",
          "class": "TestJobBusinessLogic",
          "signature": "(self, sample_job_data)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test material usage tracking for German sustainability requirements",
          "line_start": 446,
          "line_end": 462,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_material_cost_per_gram_tracking",
          "full_name": "TestGermanBusinessLogic.test_material_cost_per_gram_tracking",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test material cost tracking per gram (German precision requirements)",
          "line_start": 350,
          "line_end": 371,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_request",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "make_request",
          "full_name": "TestPrinterAPIEdgeCases.make_request",
          "class": "TestPrinterAPIEdgeCases",
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 472,
          "line_end": 474,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "api_request",
          "full_name": "TestAPIPerformance.api_request",
          "class": "TestAPIPerformance",
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Simulate API request",
          "line_start": 316,
          "line_end": 334,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_invalid_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_printers.py",
          "name": "test_invalid_json_handling",
          "full_name": "TestPrinterAPIEdgeCases.test_invalid_json_handling",
          "class": "TestPrinterAPIEdgeCases",
          "signature": "(self, api_client, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test handling of invalid JSON in POST requests",
          "line_start": 546,
          "line_end": 558,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_invalid_printer_data_handling",
          "full_name": "TestErrorHandlingIntegration.test_invalid_printer_data_handling",
          "class": "TestErrorHandlingIntegration",
          "signature": "(self, async_client)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test system handles invalid printer data gracefully.",
          "line_start": 164,
          "line_end": 178,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_constraint",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_job_table_constraints",
          "full_name": "TestDatabaseSchema.test_job_table_constraints",
          "class": "TestDatabaseSchema",
          "signature": "(self, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test job table constraints and computed columns",
          "line_start": 64,
          "line_end": 104,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_job_validation.py",
          "name": "test_jobs_table_has_not_null_constraint",
          "full_name": "TestMigration005.test_jobs_table_has_not_null_constraint",
          "class": "TestMigration005",
          "signature": "(self, test_db)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that jobs table has NOT NULL constraint on id column.",
          "line_start": 191,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "german_business_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_database.py",
          "name": "test_german_business_hours_config",
          "full_name": "TestGermanBusinessLogic.test_german_business_hours_config",
          "class": "TestGermanBusinessLogic",
          "signature": "(self, populated_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business hours configuration",
          "line_start": 333,
          "line_end": 348,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\conftest.py",
          "name": "german_business_config",
          "full_name": "german_business_config",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "German business configuration for testing",
          "line_start": 294,
          "line_end": 307,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_complete_print",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_end_to_end.py",
          "name": "test_complete_print_job_lifecycle",
          "full_name": "TestE2EJobManagementWorkflow.test_complete_print_job_lifecycle",
          "class": "TestE2EJobManagementWorkflow",
          "signature": "(self, api_client, populated_database, test_config, german_business_config, mock_bambu_api)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test complete print job from creation to completion with German business logic",
          "line_start": 172,
          "line_end": 287,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_complete_printer_lifecycle",
          "full_name": "TestAPIIntegration.test_complete_printer_lifecycle",
          "class": "TestAPIIntegration",
          "signature": "(self, api_client, temp_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test complete printer lifecycle: add -> configure -> monitor -> remove",
          "line_start": 21,
          "line_end": 82,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_complete_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_end_to_end.py",
          "name": "test_complete_file_download_workflow",
          "full_name": "TestE2EFileManagementWorkflow.test_complete_file_download_workflow",
          "class": "TestE2EFileManagementWorkflow",
          "signature": "(self, api_client, populated_database, test_config, temp_download_directory)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test complete file discovery, download, and organization workflow",
          "line_start": 354,
          "line_end": 462,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_complete_job_workflow",
          "full_name": "TestAPIIntegration.test_complete_job_workflow",
          "class": "TestAPIIntegration",
          "signature": "(self, api_client, populated_database, test_config, mock_bambu_api)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test complete job workflow: create -> monitor -> complete -> export",
          "line_start": 84,
          "line_end": 168,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_real_time_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_end_to_end.py",
          "name": "test_real_time_dashboard_updates",
          "full_name": "TestE2EDashboardWorkflow.test_real_time_dashboard_updates",
          "class": "TestE2EDashboardWorkflow",
          "signature": "(self, api_client, populated_database, test_config, mock_websocket)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test real-time dashboard updates via WebSocket",
          "line_start": 607,
          "line_end": 679,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_real_time_job_updates",
          "full_name": "TestWebSocketIntegration.test_real_time_job_updates",
          "class": "TestWebSocketIntegration",
          "signature": "(self, mock_websocket, populated_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test real-time job status updates via WebSocket",
          "line_start": 268,
          "line_end": 297,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "mock_websocket",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_end_to_end.py",
          "name": "mock_websocket_handler",
          "full_name": "TestE2EDashboardWorkflow.mock_websocket_handler",
          "class": "TestE2EDashboardWorkflow",
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 620,
          "line_end": 665,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\conftest.py",
          "name": "mock_websocket",
          "full_name": "mock_websocket",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock WebSocket connection for testing",
          "line_start": 274,
          "line_end": 280,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_transaction_rollback",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "test_transaction_rollback_on_error",
          "full_name": "TestDatabaseErrorHandling.test_transaction_rollback_on_error",
          "class": "TestDatabaseErrorHandling",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test that database transactions are properly rolled back on errors",
          "line_start": 313,
          "line_end": 341,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "test_database_transaction_rollback",
          "full_name": "TestErrorHandlingIntegration.test_database_transaction_rollback",
          "class": "TestErrorHandlingIntegration",
          "signature": "(self, api_client, temp_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test database transaction rollback on errors",
          "line_start": 481,
          "line_end": 502,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_concurrent_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "test_concurrent_resource_access",
          "full_name": "TestConcurrencyErrorHandling.test_concurrent_resource_access",
          "class": "TestConcurrencyErrorHandling",
          "signature": "(self, api_client, populated_database, test_config)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test handling of concurrent access to the same resource",
          "line_start": 435,
          "line_end": 479,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "test_concurrent_database_access",
          "full_name": "TestDatabasePerformance.test_concurrent_database_access",
          "class": "TestDatabasePerformance",
          "signature": "(self, temp_database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test database performance under concurrent access",
          "line_start": 195,
          "line_end": 262,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_prevents_null_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_job_null_fix.py",
          "name": "test_database_prevents_null_job_ids",
          "full_name": "TestNullJobIDFix.test_database_prevents_null_job_ids",
          "class": "TestNullJobIDFix",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that database enforces NOT NULL constraint.",
          "line_start": 47,
          "line_end": 80,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_job_validation.py",
          "name": "test_database_schema_prevents_null_ids",
          "full_name": "TestJobIDValidation.test_database_schema_prevents_null_ids",
          "class": "TestJobIDValidation",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that database schema enforces NOT NULL on job.id.",
          "line_start": 33,
          "line_end": 47,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_job_service_creates_valid_id",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_job_null_fix.py",
          "name": "test_job_service_creates_valid_ids",
          "full_name": "TestNullJobIDFix.test_job_service_creates_valid_ids",
          "class": "TestNullJobIDFix",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that JobService always creates jobs with valid UUIDs.",
          "line_start": 83,
          "line_end": 126,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_job_validation.py",
          "name": "test_job_service_creates_valid_id",
          "full_name": "TestJobIDValidation.test_job_service_creates_valid_id",
          "class": "TestJobIDValidation",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that job service always creates jobs with valid IDs.",
          "line_start": 67,
          "line_end": 95,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_migration_005_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_job_null_fix.py",
          "name": "test_migration_005_applied",
          "full_name": "TestNullJobIDFix.test_migration_005_applied",
          "class": "TestNullJobIDFix",
          "signature": "(self)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that migration 005 is applied and tracked.",
          "line_start": 129,
          "line_end": 160,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_job_validation.py",
          "name": "test_migration_005_recorded",
          "full_name": "TestMigration005.test_migration_005_recorded",
          "class": "TestMigration005",
          "signature": "(self, test_db)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test that migration 005 is recorded in migrations table.",
          "line_start": 179,
          "line_end": 188,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "mock_database",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock database for library service testing",
          "line_start": 29,
          "line_end": 40,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Create mock database for testing.",
          "line_start": 19,
          "line_end": 36,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "s_with_filters",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_list_files_with_filters",
          "full_name": "TestListFiles.test_list_files_with_filters",
          "class": "TestListFiles",
          "signature": "(self, library_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test file listing with filters",
          "line_start": 412,
          "line_end": 423,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_list_ideas_with_filters",
          "full_name": "TestIdeaService.test_list_ideas_with_filters",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test listing ideas with filters.",
          "line_start": 108,
          "line_end": 128,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_get_statistics",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "test_get_statistics",
          "full_name": "TestStatistics.test_get_statistics",
          "class": "TestStatistics",
          "signature": "(self, library_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test getting library statistics",
          "line_start": 457,
          "line_end": 469,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_get_statistics",
          "full_name": "TestIdeaService.test_get_statistics",
          "class": "TestIdeaService",
          "signature": "(self, idea_service, mock_database)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test getting idea statistics.",
          "line_start": 176,
          "line_end": 191,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_file_creation",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_watch_folders.py",
          "name": "test_local_file_creation",
          "full_name": "TestFileWatcherService.test_local_file_creation",
          "class": "TestFileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test LocalFile dataclass functionality.",
          "line_start": 74,
          "line_end": 90,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_models.py",
          "name": "test_valid_file_creation",
          "full_name": "TestFileModel.test_valid_file_creation",
          "class": "TestFileModel",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test creating valid file record.",
          "line_start": 132,
          "line_end": 145,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "run_backend_tests",
      "count": 2,
      "functions": [
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "run_backend_tests",
          "full_name": "Milestone12TestRunner.run_backend_tests",
          "class": "Milestone12TestRunner",
          "signature": "(self, verbose, coverage)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run backend Python tests.",
          "line_start": 87,
          "line_end": 132,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "run_backend_tests",
          "full_name": "PrinternizerTestRunner.run_backend_tests",
          "class": "PrinternizerTestRunner",
          "signature": "(self, test_type, coverage, verbose)",
          "return_type": "",
          "decorators": [],
          "docstring": "Run backend Python tests",
          "line_start": 29,
          "line_end": 78,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_german_business_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_german_business_integration",
          "full_name": "TestCoreWorkflowIntegration.test_german_business_integration",
          "class": "TestCoreWorkflowIntegration",
          "signature": "(self, async_client)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business logic integration.",
          "line_start": 136,
          "line_end": 158,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "test_german_business_data_integration",
          "full_name": "TestEssentialPrinterDriverComparison.test_german_business_data_integration",
          "class": "TestEssentialPrinterDriverComparison",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test both drivers handle German business data consistently.",
          "line_start": 505,
          "line_end": 538,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_file_naming_german_support",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessIntegration.test_file_naming_german_support",
          "class": "TestGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test file naming supports German characters.",
          "line_start": 252,
          "line_end": 268,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessLogic.test_file_naming_german_support",
          "class": "TestGermanBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German filename support (umlauts, etc.).",
          "line_start": 143,
          "line_end": 160,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_prusa_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_prusa_real_connection",
          "full_name": "TestHardwareIntegration.test_prusa_real_connection",
          "class": "TestHardwareIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test connection to real Prusa printer (requires hardware).",
          "line_start": 279,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_essential_printer_drivers.py",
          "name": "test_prusa_http_api_connection",
          "full_name": "TestEssentialPrusaDriverIntegration.test_prusa_http_api_connection",
          "class": "TestEssentialPrusaDriverIntegration",
          "signature": "(self, mock_prusa_printer)",
          "return_type": "",
          "decorators": [
            "pytest.mark.asyncio"
          ],
          "docstring": "Test Prusa HTTP API connection and authentication.",
          "line_start": 207,
          "line_end": 244,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_business_logic",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_models.py",
          "name": "test_job_business_logic_fields",
          "full_name": "TestJobModel.test_job_business_logic_fields",
          "class": "TestJobModel",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German business-specific job fields.",
          "line_start": 90,
          "line_end": 105,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_job_model_business_logic",
          "full_name": "TestCoreModels.test_job_model_business_logic",
          "class": "TestCoreModels",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test job models with German business logic.",
          "line_start": 47,
          "line_end": 75,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "test_printer_",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_models.py",
          "name": "test_printer_type_enum_values",
          "full_name": "TestEnumValidation.test_printer_type_enum_values",
          "class": "TestEnumValidation",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test PrinterType enum has expected values.",
          "line_start": 175,
          "line_end": 179,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_printer_enums",
          "full_name": "TestEnumConsistency.test_printer_enums",
          "class": "TestEnumConsistency",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test printer-related enums.",
          "line_start": 206,
          "line_end": 217,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    },
    {
      "type": "similar_names",
      "pattern": "_creation",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_ideas_service.py",
          "name": "test_trending_item_creation",
          "full_name": "TestTrendingItemModel.test_trending_item_creation",
          "class": "TestTrendingItemModel",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test creating TrendingItem from dictionary.",
          "line_start": 351,
          "line_end": 358,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_printer_model_creation",
          "full_name": "TestCoreModels.test_printer_model_creation",
          "class": "TestCoreModels",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test creating printer models for both supported types.",
          "line_start": 21,
          "line_end": 45,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "medium"
    }
  ],
  "identical_signatures": [
    {
      "type": "identical_signature",
      "signature": "()",
      "return_type": "",
      "count": 13,
      "functions": [
        {
          "file": "scripts\\analyze_codebase.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main analysis execution",
          "line_start": 351,
          "line_end": 398,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 325,
          "line_end": 421,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\error_analysis_agent.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point for the error analysis agent.",
          "line_start": 460,
          "line_end": 488,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\quick_bambu_check.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 9,
          "line_end": 51,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\simple_bambu_test.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 109,
          "line_end": 111,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_bambu_credentials.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 226,
          "line_end": 294,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_bambu_ftp_direct.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 294,
          "line_end": 334,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 361,
          "line_end": 394,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\verify_bambu_download.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main function.",
          "line_start": 185,
          "line_end": 227,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_essential_tests.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run essential tests for Printernizer Milestone 1.1.",
          "line_start": 13,
          "line_end": 128,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point.",
          "line_start": 222,
          "line_end": 255,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_runner.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Main entry point for test runner",
          "line_start": 650,
          "line_end": 705,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "verify_phase2_integration.py",
          "name": "main",
          "full_name": "main",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [],
          "docstring": "Run integration verification checks.",
          "line_start": 35,
          "line_end": 153,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 11,
      "functions": [
        {
          "file": "scripts\\bambu_credentials.py",
          "name": "__init__",
          "full_name": "BambuCredentials.__init__",
          "class": "BambuCredentials",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 18,
          "line_end": 19,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "__init__",
          "full_name": "ErrorStoreService.__init__",
          "class": "ErrorStoreService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 48,
          "line_end": 51,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\websocket.py",
          "name": "__init__",
          "full_name": "ConnectionManager.__init__",
          "class": "ConnectionManager",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 21,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_parser.py",
          "name": "__init__",
          "full_name": "BambuParser.__init__",
          "class": "BambuParser",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the Bambu parser.",
          "line_start": 82,
          "line_end": 84,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\monitoring_service.py",
          "name": "__init__",
          "full_name": "MonitoringService.__init__",
          "class": "MonitoringService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 21,
          "line_end": 38,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\threemf_analyzer.py",
          "name": "__init__",
          "full_name": "ThreeMFAnalyzer.__init__",
          "class": "ThreeMFAnalyzer",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the 3MF analyzer.",
          "line_start": 18,
          "line_end": 20,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "__init__",
          "full_name": "UrlParserService.__init__",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 19,
          "line_end": 20,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "__init__",
          "full_name": "ErrorHandler.__init__",
          "class": "ErrorHandler",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 45,
          "line_end": 47,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_error_handling.py",
          "name": "__init__",
          "full_name": "CircularReference.__init__",
          "class": "CircularReference",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 788,
          "line_end": 789,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "__init__",
          "full_name": "WebSocketLoadTester.__init__",
          "class": "WebSocketLoadTester",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 427,
          "line_end": 431,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\run_milestone_1_2_tests.py",
          "name": "__init__",
          "full_name": "Milestone12TestRunner.__init__",
          "class": "Milestone12TestRunner",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 28,
          "line_end": 45,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 5,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "initialize",
          "full_name": "Database.initialize",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize database and create tables.",
          "line_start": 31,
          "line_end": 44,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "initialize",
          "full_name": "LibraryService.initialize",
          "class": "LibraryService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize library folders and verify configuration.",
          "line_start": 52,
          "line_end": 87,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "initialize",
          "full_name": "MaterialService.initialize",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize material service and create tables.",
          "line_start": 46,
          "line_end": 54,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "initialize",
          "full_name": "PrinterService.initialize",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize printer service and load configured printers.",
          "line_start": 35,
          "line_end": 39,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "initialize",
          "full_name": "TrendingService.initialize",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize trending service and create tables.",
          "line_start": 55,
          "line_end": 63,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 5,
      "functions": [
        {
          "file": "src\\models\\idea.py",
          "name": "to_dict",
          "full_name": "Idea.to_dict",
          "class": "Idea",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert idea to dictionary.",
          "line_start": 49,
          "line_end": 71,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\idea.py",
          "name": "to_dict",
          "full_name": "TrendingItem.to_dict",
          "class": "TrendingItem",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert trending item to dictionary.",
          "line_start": 138,
          "line_end": 154,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "to_dict",
          "full_name": "WatchFolder.to_dict",
          "class": "WatchFolder",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 47,
          "line_end": 64,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\bambu_ftp_service.py",
          "name": "to_dict",
          "full_name": "BambuFTPFile.to_dict",
          "class": "BambuFTPFile",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert to dictionary representation.",
          "line_start": 64,
          "line_end": 74,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "to_dict",
          "full_name": "PrinterConfig.to_dict",
          "class": "PrinterConfig",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Convert PrinterConfig to dictionary.",
          "line_start": 62,
          "line_end": 72,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 4,
      "functions": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "connect",
          "full_name": "BambuFTP.connect",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Connect to FTP server with SSL.",
          "line_start": 21,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "connect",
          "full_name": "BambuLabPrinter.connect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish connection to Bambu Lab printer.",
          "line_start": 98,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "connect",
          "full_name": "PrinterInterface.connect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Establish connection to the printer.",
          "line_start": 83,
          "line_end": 85,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "connect",
          "full_name": "PrusaPrinter.connect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Establish HTTP connection to Prusa printer.",
          "line_start": 32,
          "line_end": 113,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 4,
      "functions": [
        {
          "file": "scripts\\working_bambu_ftp.py",
          "name": "list_files",
          "full_name": "BambuFTP.list_files",
          "class": "BambuFTP",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "List files in current directory.",
          "line_start": 69,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "list_files",
          "full_name": "BambuLabPrinter.list_files",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Bambu Lab printer.",
          "line_start": 840,
          "line_end": 857,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "list_files",
          "full_name": "PrinterInterface.list_files",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "List files available on the printer.",
          "line_start": 103,
          "line_end": 105,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "list_files",
          "full_name": "PrusaPrinter.list_files",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "List[PrinterFile]",
          "decorators": [],
          "docstring": "List files available on Prusa printer.",
          "line_start": 316,
          "line_end": 397,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "PrinterStatusUpdate",
      "count": 4,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_status",
          "full_name": "BambuLabPrinter.get_status",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Bambu Lab.",
          "line_start": 262,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_status",
          "full_name": "PrinterInterface.get_status",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current printer status.",
          "line_start": 93,
          "line_end": 95,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_status",
          "full_name": "PrusaPrinter.get_status",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "PrinterStatusUpdate",
          "decorators": [],
          "docstring": "Get current printer status from Prusa.",
          "line_start": 133,
          "line_end": 236,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\event_service.py",
          "name": "get_status",
          "full_name": "EventService.get_status",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get current event service status.",
          "line_start": 452,
          "line_end": 474,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 4,
      "functions": [
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_statistics",
          "full_name": "IdeaService.get_statistics",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get idea statistics.",
          "line_start": 197,
          "line_end": 203,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "get_statistics",
          "full_name": "MaterialService.get_statistics",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "MaterialStats",
          "decorators": [],
          "docstring": "Get material statistics.",
          "line_start": 304,
          "line_end": 384,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\preview_render_service.py",
          "name": "get_statistics",
          "full_name": "PreviewRenderService.get_statistics",
          "class": "PreviewRenderService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get rendering statistics.",
          "line_start": 537,
          "line_end": 549,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "get_statistics",
          "full_name": "TrendingService.get_statistics",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get trending cache statistics with performance metrics.",
          "line_start": 595,
          "line_end": 650,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
      "return_type": "",
      "count": 4,
      "functions": [
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "ConfigurationError.__init__",
          "class": "ConfigurationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 31,
          "line_end": 37,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "DatabaseError.__init__",
          "class": "DatabaseError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 43,
          "line_end": 49,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "AuthenticationError.__init__",
          "class": "AuthenticationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 91,
          "line_end": 97,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\exceptions.py",
          "name": "__init__",
          "full_name": "AuthorizationError.__init__",
          "class": "AuthorizationError",
          "signature": "(self, message: str, details: Optional[Dict[str, Any]])",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 103,
          "line_end": 109,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 3,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "_create_tables",
          "full_name": "Database._create_tables",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create database tables if they don't exist.",
          "line_start": 46,
          "line_end": 192,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\material_service.py",
          "name": "_create_tables",
          "full_name": "MaterialService._create_tables",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create material-related database tables.",
          "line_start": 56,
          "line_end": 106,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "_create_tables",
          "full_name": "TrendingService._create_tables",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Create trending-related database tables.",
          "line_start": 65,
          "line_end": 93,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "health_check",
          "full_name": "Database.health_check",
          "class": "Database",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check database health.",
          "line_start": 282,
          "line_end": 293,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "health_check",
          "full_name": "BasePrinter.health_check",
          "class": "BasePrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if printer is healthy and responsive.",
          "line_start": 253,
          "line_end": 259,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "health_check",
          "full_name": "PrinterService.health_check",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Check health of all printer connections.",
          "line_start": 623,
          "line_end": 651,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, printer_id: str)",
      "return_type": "Optional[Dict[str, Any]]",
      "count": 3,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_printer",
          "full_name": "Database.get_printer",
          "class": "Database",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get printer by ID.",
          "line_start": 325,
          "line_end": 332,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printer",
          "full_name": "ConfigService.get_printer",
          "class": "ConfigService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[PrinterConfig]",
          "decorators": [],
          "docstring": "Get specific printer configuration.",
          "line_start": 311,
          "line_end": 313,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer",
          "full_name": "PrinterService.get_printer",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "Optional[Printer]",
          "decorators": [],
          "docstring": "Get specific printer by ID as domain model.",
          "line_start": 305,
          "line_end": 331,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(cls, data: Dict[str, Any])",
      "return_type": "'Idea'",
      "count": 3,
      "functions": [
        {
          "file": "src\\models\\idea.py",
          "name": "from_dict",
          "full_name": "Idea.from_dict",
          "class": "Idea",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'Idea'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create idea from dictionary.",
          "line_start": 74,
          "line_end": 96,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\models\\idea.py",
          "name": "from_dict",
          "full_name": "TrendingItem.from_dict",
          "class": "TrendingItem",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'TrendingItem'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create trending item from dictionary.",
          "line_start": 157,
          "line_end": 173,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        },
        {
          "file": "src\\models\\watch_folder.py",
          "name": "from_dict",
          "full_name": "WatchFolder.from_dict",
          "class": "WatchFolder",
          "signature": "(cls, data: Dict[str, Any])",
          "return_type": "'WatchFolder'",
          "decorators": [
            "classmethod"
          ],
          "docstring": "Create instance from dictionary.",
          "line_start": 67,
          "line_end": 84,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": true
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "None",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "disconnect",
          "full_name": "BambuLabPrinter.disconnect",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Bambu Lab printer.",
          "line_start": 236,
          "line_end": 260,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "disconnect",
          "full_name": "PrinterInterface.disconnect",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Disconnect from the printer.",
          "line_start": 88,
          "line_end": 90,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "disconnect",
          "full_name": "PrusaPrinter.disconnect",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "None",
          "decorators": [],
          "docstring": "Disconnect from Prusa printer.",
          "line_start": 115,
          "line_end": 131,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Optional[JobInfo]",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_job_info",
          "full_name": "BambuLabPrinter.get_job_info",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Bambu Lab.",
          "line_start": 750,
          "line_end": 789,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_job_info",
          "full_name": "PrinterInterface.get_job_info",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get current job information.",
          "line_start": 98,
          "line_end": 100,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_job_info",
          "full_name": "PrusaPrinter.get_job_info",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[JobInfo]",
          "decorators": [],
          "docstring": "Get current job information from Prusa.",
          "line_start": 253,
          "line_end": 297,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, filename: str, local_path: str)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "download_file",
          "full_name": "BambuLabPrinter.download_file",
          "class": "BambuLabPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Bambu Lab printer.",
          "line_start": 1299,
          "line_end": 1316,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "download_file",
          "full_name": "PrinterInterface.download_file",
          "class": "PrinterInterface",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Download a file from the printer.",
          "line_start": 108,
          "line_end": 110,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "download_file",
          "full_name": "PrusaPrinter.download_file",
          "class": "PrusaPrinter",
          "signature": "(self, filename: str, local_path: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Download a file from Prusa printer.",
          "line_start": 477,
          "line_end": 575,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "pause_print",
          "full_name": "BambuLabPrinter.pause_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Bambu Lab printer.",
          "line_start": 1642,
          "line_end": 1663,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "pause_print",
          "full_name": "PrinterInterface.pause_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Pause the current print job.",
          "line_start": 113,
          "line_end": 115,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "pause_print",
          "full_name": "PrusaPrinter.pause_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Pause the current print job on Prusa printer.",
          "line_start": 696,
          "line_end": 718,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "resume_print",
          "full_name": "BambuLabPrinter.resume_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Bambu Lab printer.",
          "line_start": 1665,
          "line_end": 1686,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "resume_print",
          "full_name": "PrinterInterface.resume_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Resume the paused print job.",
          "line_start": 118,
          "line_end": 120,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "resume_print",
          "full_name": "PrusaPrinter.resume_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Resume the paused print job on Prusa printer.",
          "line_start": 720,
          "line_end": 742,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "stop_print",
          "full_name": "BambuLabPrinter.stop_print",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Bambu Lab printer.",
          "line_start": 1688,
          "line_end": 1709,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "stop_print",
          "full_name": "PrinterInterface.stop_print",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Stop/cancel the current print job.",
          "line_start": 123,
          "line_end": 125,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "stop_print",
          "full_name": "PrusaPrinter.stop_print",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Stop/cancel the current print job on Prusa printer.",
          "line_start": 744,
          "line_end": 766,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "bool",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "has_camera",
          "full_name": "BambuLabPrinter.has_camera",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Bambu Lab printer has camera support.",
          "line_start": 1711,
          "line_end": 1723,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "has_camera",
          "full_name": "PrinterInterface.has_camera",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Check if printer has camera support.",
          "line_start": 128,
          "line_end": 130,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "has_camera",
          "full_name": "PrusaPrinter.has_camera",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Check if Prusa printer has camera support.",
          "line_start": 768,
          "line_end": 772,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Optional[str]",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "get_camera_stream_url",
          "full_name": "BambuLabPrinter.get_camera_stream_url",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Bambu Lab printer.",
          "line_start": 1725,
          "line_end": 1744,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "get_camera_stream_url",
          "full_name": "PrinterInterface.get_camera_stream_url",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Get camera stream URL if available.",
          "line_start": 133,
          "line_end": 135,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "get_camera_stream_url",
          "full_name": "PrusaPrinter.get_camera_stream_url",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Get camera stream URL for Prusa printer.",
          "line_start": 774,
          "line_end": 778,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Optional[bytes]",
      "count": 3,
      "functions": [
        {
          "file": "src\\printers\\bambu_lab.py",
          "name": "take_snapshot",
          "full_name": "BambuLabPrinter.take_snapshot",
          "class": "BambuLabPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Bambu Lab printer.",
          "line_start": 1746,
          "line_end": 1779,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "take_snapshot",
          "full_name": "PrinterInterface.take_snapshot",
          "class": "PrinterInterface",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [
            "abstractmethod"
          ],
          "docstring": "Take a camera snapshot and return image data.",
          "line_start": 138,
          "line_end": 140,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\prusa.py",
          "name": "take_snapshot",
          "full_name": "PrusaPrinter.take_snapshot",
          "class": "PrusaPrinter",
          "signature": "(self)",
          "return_type": "Optional[bytes]",
          "decorators": [],
          "docstring": "Take a camera snapshot from Prusa printer.",
          "line_start": 780,
          "line_end": 784,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, database: Database)",
      "return_type": "",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\analytics_service.py",
          "name": "__init__",
          "full_name": "AnalyticsService.__init__",
          "class": "AnalyticsService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize analytics service.",
          "line_start": 16,
          "line_end": 18,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\migration_service.py",
          "name": "__init__",
          "full_name": "MigrationService.__init__",
          "class": "MigrationService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize migration service.",
          "line_start": 19,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\watch_folder_db_service.py",
          "name": "__init__",
          "full_name": "WatchFolderDbService.__init__",
          "class": "WatchFolderDbService",
          "signature": "(self, database: Database)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize the database service.",
          "line_start": 21,
          "line_end": 23,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\material_service.py",
          "name": "cleanup",
          "full_name": "MaterialService.cleanup",
          "class": "MaterialService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up material service resources.",
          "line_start": 539,
          "line_end": 542,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup",
          "full_name": "ThumbnailService.cleanup",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up thumbnail service resources.",
          "line_start": 315,
          "line_end": 321,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup",
          "full_name": "TrendingService.cleanup",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Clean up trending service resources.",
          "line_start": 652,
          "line_end": 660,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "aiohttp.ClientSession",
      "count": 3,
      "functions": [
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "_get_session",
          "full_name": "ThumbnailService._get_session",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session.",
          "line_start": 37,
          "line_end": 45,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "_get_session",
          "full_name": "TrendingService._get_session",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session with proper error handling.",
          "line_start": 150,
          "line_end": 185,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "_get_session",
          "full_name": "UrlParserService._get_session",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "aiohttp.ClientSession",
          "decorators": [],
          "docstring": "Get or create HTTP session.",
          "line_start": 22,
          "line_end": 30,
          "access_level": "private",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, request: Request, call_next: Callable)",
      "return_type": "Response",
      "count": 3,
      "functions": [
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "RequestTimingMiddleware.dispatch",
          "class": "RequestTimingMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Process request and measure timing.",
          "line_start": 17,
          "line_end": 40,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "SecurityHeadersMiddleware.dispatch",
          "class": "SecurityHeadersMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Add security headers to response.",
          "line_start": 46,
          "line_end": 73,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\middleware.py",
          "name": "dispatch",
          "full_name": "GermanComplianceMiddleware.dispatch",
          "class": "GermanComplianceMiddleware",
          "signature": "(self, request: Request, call_next: Callable)",
          "return_type": "Response",
          "decorators": [],
          "docstring": "Ensure German compliance standards.",
          "line_start": 79,
          "line_end": 102,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(message)",
      "return_type": "",
      "count": 3,
      "functions": [
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "mock_send",
          "full_name": "TestWebSocketIntegration.mock_send",
          "class": "TestWebSocketIntegration",
          "signature": "(message)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 274,
          "line_end": 275,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "mock_send",
          "full_name": "TestWebSocketIntegration.mock_send",
          "class": "TestWebSocketIntegration",
          "signature": "(message)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 305,
          "line_end": 306,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_integration.py",
          "name": "mock_send",
          "full_name": "TestWebSocketIntegration.mock_send",
          "class": "TestWebSocketIntegration",
          "signature": "(message)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 336,
          "line_end": 337,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, summary: Dict[str, Any])",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "scripts\\download_bambu_files.py",
          "name": "_print_summary",
          "full_name": "BambuDownloadManager._print_summary",
          "class": "BambuDownloadManager",
          "signature": "(self, summary: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Print download summary.",
          "line_start": 309,
          "line_end": 322,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "scripts\\test_complete_bambu_ftp.py",
          "name": "_print_summary",
          "full_name": "BambuFTPTester._print_summary",
          "class": "BambuFTPTester",
          "signature": "(self, summary: Dict[str, Any])",
          "return_type": "",
          "decorators": [],
          "docstring": "Print test summary.",
          "line_start": 333,
          "line_end": 358,
          "access_level": "private",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorStoreService.ensure_log_directory",
          "class": "ErrorStoreService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 53,
          "line_end": 55,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "ensure_log_directory",
          "full_name": "ErrorHandler.ensure_log_directory",
          "class": "ErrorHandler",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Ensure the log directory exists.",
          "line_start": 49,
          "line_end": 51,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, hours: int)",
      "return_type": "Dict[str, Any]",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "name": "get_error_statistics",
          "full_name": "ErrorStoreService.get_error_statistics",
          "class": "ErrorStoreService",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics for the specified time period.",
          "line_start": 111,
          "line_end": 162,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\utils\\error_handling.py",
          "name": "get_error_statistics",
          "full_name": "ErrorHandler.get_error_statistics",
          "class": "ErrorHandler",
          "signature": "(self, hours: int)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get error statistics from log file.",
          "line_start": 164,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(config_service: ConfigService)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders/settings', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 363,
          "line_end": 378,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "get_watch_folder_settings",
          "full_name": "get_watch_folder_settings",
          "class": null,
          "signature": "(config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.get('/watch-folders', response_model=WatchFolderSettings)"
          ],
          "docstring": "Get watch folder settings.",
          "line_start": 234,
          "line_end": 246,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(folder_path: str, config_service: ConfigService)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\files.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 437,
          "line_end": 450,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\api\\routers\\settings.py",
          "name": "validate_watch_folder",
          "full_name": "validate_watch_folder",
          "class": null,
          "signature": "(folder_path: str, config_service: ConfigService)",
          "return_type": "",
          "decorators": [
            "router.post('/watch-folders/validate')"
          ],
          "docstring": "Validate a watch folder path.",
          "line_start": 250,
          "line_end": 263,
          "access_level": "public",
          "is_method": false,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "close",
          "full_name": "Database.close",
          "class": "Database",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close database connection.",
          "line_start": 263,
          "line_end": 267,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "name": "close",
          "full_name": "UrlParserService.close",
          "class": "UrlParserService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Close HTTP session.",
          "line_start": 32,
          "line_end": 36,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "aiosqlite.Connection",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_connection",
          "full_name": "Database.get_connection",
          "class": "Database",
          "signature": "(self)",
          "return_type": "aiosqlite.Connection",
          "decorators": [],
          "docstring": "Get database connection.",
          "line_start": 269,
          "line_end": 273,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\backend\\test_performance.py",
          "name": "get_connection",
          "full_name": "DatabaseConnectionPool.get_connection",
          "class": "DatabaseConnectionPool",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 679,
          "line_end": 685,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, job_data: Dict[str, Any])",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "create_job",
          "full_name": "Database.create_job",
          "class": "Database",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new job record.",
          "line_start": 361,
          "line_end": 382,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "create_job",
          "full_name": "JobService.create_job",
          "class": "JobService",
          "signature": "(self, job_data: Dict[str, Any])",
          "return_type": "str",
          "decorators": [],
          "docstring": "Create a new print job.",
          "line_start": 230,
          "line_end": 285,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
      "return_type": "List[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_jobs_by_date_range",
          "full_name": "Database.get_jobs_by_date_range",
          "class": "Database",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting.",
          "line_start": 435,
          "line_end": 453,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_jobs_by_date_range",
          "full_name": "JobService.get_jobs_by_date_range",
          "class": "JobService",
          "signature": "(self, start_date: str, end_date: str, is_business: Optional[bool])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get jobs within a date range for reporting purposes.",
          "line_start": 391,
          "line_end": 424,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_job_statistics",
          "full_name": "Database.get_job_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get comprehensive job statistics.",
          "line_start": 455,
          "line_end": 517,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\job_service.py",
          "name": "get_job_statistics",
          "full_name": "JobService.get_job_statistics",
          "class": "JobService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get job statistics for dashboard.",
          "line_start": 339,
          "line_end": 389,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, file_id: str, enhanced_metadata: Dict[str, Any], last_analyzed: datetime)",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "update_file_enhanced_metadata",
          "full_name": "Database.update_file_enhanced_metadata",
          "class": "Database",
          "signature": "(self, file_id: str, enhanced_metadata: Dict[str, Any], last_analyzed: datetime)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update file with enhanced metadata (Issue #43 - METADATA-001).\n\nThis method stores comprehensive metadata extracted from 3D files including\nphysical properties, print settings, material requirements, cost analysis,\nquality metrics, and compatibility information.",
          "line_start": 681,
          "line_end": 751,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\database\\database.py",
          "name": "update_file_enhanced_metadata",
          "full_name": "Database.update_file_enhanced_metadata",
          "class": "Database",
          "signature": "(self, file_id: str, enhanced_metadata: Dict[str, Any], last_analyzed: datetime)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update enhanced metadata for a file (compatibility method).",
          "line_start": 1339,
          "line_end": 1399,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_file_statistics",
          "full_name": "Database.get_file_statistics",
          "class": "Database",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file statistics by source.",
          "line_start": 790,
          "line_end": 820,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_statistics",
          "full_name": "FileService.get_file_statistics",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file management statistics.",
          "line_start": 458,
          "line_end": 536,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, idea_data: Dict[str, Any])",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "create_idea",
          "full_name": "Database.create_idea",
          "class": "Database",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Create a new idea record.",
          "line_start": 823,
          "line_end": 851,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "create_idea",
          "full_name": "IdeaService.create_idea",
          "class": "IdeaService",
          "signature": "(self, idea_data: Dict[str, Any])",
          "return_type": "Optional[str]",
          "decorators": [],
          "docstring": "Create a new idea.",
          "line_start": 24,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, idea_id: str)",
      "return_type": "Optional[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_idea",
          "full_name": "Database.get_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 853,
          "line_end": 860,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_idea",
          "full_name": "IdeaService.get_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "Optional[Idea]",
          "decorators": [],
          "docstring": "Get idea by ID.",
          "line_start": 63,
          "line_end": 86,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, idea_id: str, updates: Dict[str, Any])",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "update_idea",
          "full_name": "Database.update_idea",
          "class": "Database",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea with provided fields.",
          "line_start": 902,
          "line_end": 924,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea",
          "full_name": "IdeaService.update_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, updates: Dict[str, Any])",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update an idea.",
          "line_start": 134,
          "line_end": 163,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, idea_id: str)",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "delete_idea",
          "full_name": "Database.delete_idea",
          "class": "Database",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea record.",
          "line_start": 926,
          "line_end": 935,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "delete_idea",
          "full_name": "IdeaService.delete_idea",
          "class": "IdeaService",
          "signature": "(self, idea_id: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Delete an idea.",
          "line_start": 165,
          "line_end": 175,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, idea_id: str, status: str)",
      "return_type": "bool",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "update_idea_status",
          "full_name": "Database.update_idea_status",
          "class": "Database",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 937,
          "line_end": 942,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "update_idea_status",
          "full_name": "IdeaService.update_idea_status",
          "class": "IdeaService",
          "signature": "(self, idea_id: str, status: str)",
          "return_type": "bool",
          "decorators": [],
          "docstring": "Update idea status.",
          "line_start": 177,
          "line_end": 187,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "List[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_all_tags",
          "full_name": "Database.get_all_tags",
          "class": "Database",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all unique tags with counts.",
          "line_start": 983,
          "line_end": 993,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_all_tags",
          "full_name": "IdeaService.get_all_tags",
          "class": "IdeaService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get all available tags with usage counts.",
          "line_start": 189,
          "line_end": 195,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, platform: Optional[str], category: Optional[str])",
      "return_type": "List[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\database\\database.py",
          "name": "get_trending",
          "full_name": "Database.get_trending",
          "class": "Database",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending items from cache.",
          "line_start": 1023,
          "line_end": 1042,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\idea_service.py",
          "name": "get_trending",
          "full_name": "IdeaService.get_trending",
          "class": "IdeaService",
          "signature": "(self, platform: Optional[str], category: Optional[str])",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get trending models from cache.",
          "line_start": 272,
          "line_end": 281,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\printers\\base.py",
          "name": "__repr__",
          "full_name": "PrinterFile.__repr__",
          "class": "PrinterFile",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 57,
          "line_end": 58,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\printers\\base.py",
          "name": "__repr__",
          "full_name": "JobInfo.__repr__",
          "class": "JobInfo",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "",
          "line_start": 75,
          "line_end": 76,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, PrinterConfig]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\config_service.py",
          "name": "get_printers",
          "full_name": "ConfigService.get_printers",
          "class": "ConfigService",
          "signature": "(self)",
          "return_type": "Dict[str, PrinterConfig]",
          "decorators": [],
          "docstring": "Get all printer configurations.",
          "line_start": 307,
          "line_end": 309,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printers",
          "full_name": "PrinterService.get_printers",
          "class": "PrinterService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all configured printers as dictionaries (legacy method).",
          "line_start": 288,
          "line_end": 303,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\event_service.py",
          "name": "start",
          "full_name": "EventService.start",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start the event service and background tasks.",
          "line_start": 45,
          "line_end": 61,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "start",
          "full_name": "FileWatcherService.start",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Start file watcher service.",
          "line_start": 141,
          "line_end": 201,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\event_service.py",
          "name": "stop",
          "full_name": "EventService.stop",
          "class": "EventService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop the event service and cancel all tasks.",
          "line_start": 63,
          "line_end": 81,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "stop",
          "full_name": "FileWatcherService.stop",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Stop file watcher service.",
          "line_start": 203,
          "line_end": 239,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, printer_id: str)",
      "return_type": "List[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_printer_files",
          "full_name": "FileService.get_printer_files",
          "class": "FileService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get files available on specific printer.",
          "line_start": 154,
          "line_end": 190,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\printer_service.py",
          "name": "get_printer_files",
          "full_name": "PrinterService.get_printer_files",
          "class": "PrinterService",
          "signature": "(self, printer_id: str)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of files available on printer.",
          "line_start": 502,
          "line_end": 524,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "List[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_local_files",
          "full_name": "FileService.get_local_files",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of local files only.",
          "line_start": 406,
          "line_end": 415,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_local_files",
          "full_name": "FileWatcherService.get_local_files",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "List[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get list of all discovered local files.",
          "line_start": 491,
          "line_end": 509,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_watch_status",
          "full_name": "FileService.get_watch_status",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher status.",
          "line_start": 435,
          "line_end": 444,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "get_watch_status",
          "full_name": "FileWatcherService.get_watch_status",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Get file watcher service status.",
          "line_start": 511,
          "line_end": 518,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "Dict[str, Any]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\file_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileService.reload_watch_folders",
          "class": "FileService",
          "signature": "(self)",
          "return_type": "Dict[str, Any]",
          "decorators": [],
          "docstring": "Reload watch folders configuration.",
          "line_start": 446,
          "line_end": 456,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\file_watcher_service.py",
          "name": "reload_watch_folders",
          "full_name": "FileWatcherService.reload_watch_folders",
          "class": "FileWatcherService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Reload watch folders from configuration.",
          "line_start": 520,
          "line_end": 537,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, file_id: str)",
      "return_type": "Optional[Dict[str, Any]]",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\file_service.py",
          "name": "get_file_by_id",
          "full_name": "FileService.get_file_by_id",
          "class": "FileService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file information by ID.",
          "line_start": 688,
          "line_end": 707,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\library_service.py",
          "name": "get_file_by_id",
          "full_name": "LibraryService.get_file_by_id",
          "class": "LibraryService",
          "signature": "(self, file_id: str)",
          "return_type": "Optional[Dict[str, Any]]",
          "decorators": [],
          "docstring": "Get file from library by ID.\n\nArgs:\n    file_id: File database ID\n\nReturns:\n    File record or None if not found",
          "line_start": 437,
          "line_end": 447,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self, db: Database, event_service: EventService)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\material_service.py",
          "name": "__init__",
          "full_name": "MaterialService.__init__",
          "class": "MaterialService",
          "signature": "(self, db: Database, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize material service.",
          "line_start": 39,
          "line_end": 44,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "__init__",
          "full_name": "TrendingService.__init__",
          "class": "TrendingService",
          "signature": "(self, db: Database, event_service: EventService)",
          "return_type": "",
          "decorators": [],
          "docstring": "Initialize trending service.",
          "line_start": 34,
          "line_end": 53,
          "access_level": "dunder",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "int",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\thumbnail_service.py",
          "name": "cleanup_expired",
          "full_name": "ThumbnailService.cleanup_expired",
          "class": "ThumbnailService",
          "signature": "(self)",
          "return_type": "int",
          "decorators": [],
          "docstring": "Clean up expired thumbnail cache files.",
          "line_start": 210,
          "line_end": 231,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "src\\services\\trending_service.py",
          "name": "cleanup_expired",
          "full_name": "TrendingService.cleanup_expired",
          "class": "TrendingService",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Remove expired cache entries.",
          "line_start": 524,
          "line_end": 546,
          "access_level": "public",
          "is_method": true,
          "is_async": true,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "()",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_library_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Mock database for library service testing",
          "line_start": 29,
          "line_end": 40,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_ideas_service.py",
          "name": "mock_database",
          "full_name": "mock_database",
          "class": null,
          "signature": "()",
          "return_type": "",
          "decorators": [
            "pytest.fixture"
          ],
          "docstring": "Create mock database for testing.",
          "line_start": 19,
          "line_end": 36,
          "access_level": "public",
          "is_method": false,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    },
    {
      "type": "identical_signature",
      "signature": "(self)",
      "return_type": "",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessIntegration.test_file_naming_german_support",
          "class": "TestGermanBusinessIntegration",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test file naming supports German characters.",
          "line_start": 252,
          "line_end": 268,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        },
        {
          "file": "tests\\test_working_core.py",
          "name": "test_file_naming_german_support",
          "full_name": "TestGermanBusinessLogic.test_file_naming_german_support",
          "class": "TestGermanBusinessLogic",
          "signature": "(self)",
          "return_type": "",
          "decorators": [],
          "docstring": "Test German filename support (umlauts, etc.).",
          "line_start": 143,
          "line_end": 160,
          "access_level": "public",
          "is_method": true,
          "is_async": false,
          "is_property": false,
          "is_staticmethod": false,
          "is_classmethod": false
        }
      ],
      "severity": "low"
    }
  ],
  "structural_duplicates": [
    {
      "type": "structural_similarity",
      "structure_hash": "1cb36c9d",
      "count": 6,
      "functions": [
        {
          "file": "tests\\backend\\test_api_files.py",
          "function": "test_get_files_filter_by_printer"
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "function": "test_get_files_filter_by_status"
        },
        {
          "file": "tests\\backend\\test_api_files.py",
          "function": "test_get_files_filter_by_type"
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "function": "test_get_jobs_filter_by_status"
        },
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "function": "test_get_jobs_filter_by_printer"
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "function": "test_get_printers_filter_by_type"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "4e90f3f4",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\errors.py",
          "function": "ensure_log_directory"
        },
        {
          "file": "src\\utils\\error_handling.py",
          "function": "ensure_log_directory"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "6371837b",
      "count": 2,
      "functions": [
        {
          "file": "src\\api\\routers\\jobs.py",
          "function": "delete_job"
        },
        {
          "file": "src\\api\\routers\\printers.py",
          "function": "delete_printer"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "ff7979d2",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\material_service.py",
          "function": "initialize"
        },
        {
          "file": "src\\services\\trending_service.py",
          "function": "initialize"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "2e60f678",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\material_service.py",
          "function": "get_material"
        },
        {
          "file": "src\\services\\printer_service.py",
          "function": "get_printer_driver"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "15961376",
      "count": 2,
      "functions": [
        {
          "file": "src\\services\\thumbnail_service.py",
          "function": "_get_session"
        },
        {
          "file": "src\\services\\url_parser_service.py",
          "function": "_get_session"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "f8f3ed1a",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_config.py",
          "function": "test_file_naming_conventions"
        },
        {
          "file": "tests\\test_working_core.py",
          "function": "test_file_naming_german_support"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "d4188034",
      "count": 2,
      "functions": [
        {
          "file": "tests\\test_essential_integration.py",
          "function": "async_client"
        },
        {
          "file": "tests\\backend\\test_api_health.py",
          "function": "client"
        }
      ],
      "severity": "high"
    },
    {
      "type": "structural_similarity",
      "structure_hash": "1342a64a",
      "count": 2,
      "functions": [
        {
          "file": "tests\\backend\\test_api_jobs.py",
          "function": "test_get_job_details_not_found"
        },
        {
          "file": "tests\\backend\\test_api_printers.py",
          "function": "test_get_printer_status_not_found"
        }
      ],
      "severity": "high"
    }
  ],
  "single_use_functions": [
    {
      "function": "create_sample_gcode",
      "file": "demo_gcode_optimization.py",
      "line": 18,
      "signature": "()",
      "call_count": 1
    },
    {
      "function": "analyze_gcode_file_lines",
      "file": "demo_gcode_optimization.py",
      "line": 161,
      "signature": "(self, lines)",
      "call_count": 1
    },
    {
      "function": "find_python_files",
      "file": "scripts\\analyze_codebase.py",
      "line": 172,
      "signature": "(root_dir: str)",
      "call_count": 1
    },
    {
      "function": "build_dependency_graph",
      "file": "scripts\\analyze_codebase.py",
      "line": 186,
      "signature": "(all_results: List[Dict])",
      "call_count": 1
    },
    {
      "function": "find_entry_points",
      "file": "scripts\\analyze_codebase.py",
      "line": 203,
      "signature": "(all_results: List[Dict])",
      "call_count": 1
    },
    {
      "function": "generate_function_inventory_report",
      "file": "scripts\\analyze_codebase.py",
      "line": 247,
      "signature": "(all_results: List[Dict], output_file: str)",
      "call_count": 1
    },
    {
      "function": "generate_dependency_report",
      "file": "scripts\\analyze_codebase.py",
      "line": 305,
      "signature": "(dependency_graph: Dict, output_file: str)",
      "call_count": 1
    },
    {
      "function": "generate_entry_points_report",
      "file": "scripts\\analyze_codebase.py",
      "line": 323,
      "signature": "(entry_points: List[Dict], output_file: str)",
      "call_count": 1
    },
    {
      "function": "test_download_specific_file",
      "file": "scripts\\simple_bambu_test.py",
      "line": 18,
      "signature": "()",
      "call_count": 1
    },
    {
      "function": "validate_credentials",
      "file": "scripts\\test_bambu_credentials.py",
      "line": 28,
      "signature": "(ip: str, access_code: str, serial: str)",
      "call_count": 1
    },
    {
      "function": "test_bambu_connection",
      "file": "scripts\\test_bambu_credentials.py",
      "line": 57,
      "signature": "(ip: str, access_code: str, serial: str)",
      "call_count": 1
    },
    {
      "function": "print_results",
      "file": "scripts\\test_bambu_credentials.py",
      "line": 168,
      "signature": "(result: dict)",
      "call_count": 1
    },
    {
      "function": "get_interactive_input",
      "file": "scripts\\test_bambu_credentials.py",
      "line": 201,
      "signature": "()",
      "call_count": 1
    },
    {
      "function": "create_secure_ftp_connection",
      "file": "scripts\\test_bambu_ftp_direct.py",
      "line": 34,
      "signature": "(host: str, username: str, password: str, port: int)",
      "call_count": 1
    },
    {
      "function": "list_directory",
      "file": "scripts\\test_bambu_ftp_direct.py",
      "line": 100,
      "signature": "(ftp: ftplib.FTP_TLS, directory: str)",
      "call_count": 1
    },
    {
      "function": "test_bambu_ftp",
      "file": "scripts\\test_bambu_ftp_direct.py",
      "line": 217,
      "signature": "(ip_address: str, access_code: str)",
      "call_count": 1
    },
    {
      "function": "verify_download",
      "file": "scripts\\verify_bambu_download.py",
      "line": 39,
      "signature": "(ip_address: str, access_code: str, serial_number: str, target_file: str | None)",
      "call_count": 1
    },
    {
      "function": "get_business_analytics",
      "file": "src\\api\\routers\\analytics.py",
      "line": 66,
      "signature": "(start_date: Optional[date], end_date: Optional[date], analytics_service: AnalyticsService)",
      "call_count": 1
    },
    {
      "function": "take_snapshot",
      "file": "src\\api\\routers\\camera.py",
      "line": 119,
      "signature": "(printer_id: UUID, snapshot_data: SnapshotCreate, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "get_thumbnail_processing_log",
      "file": "src\\api\\routers\\debug.py",
      "line": 98,
      "signature": "(request: Request, limit: int)",
      "call_count": 1
    },
    {
      "function": "sync_printer_files",
      "file": "src\\api\\routers\\files.py",
      "line": 208,
      "signature": "(printer_id: Optional[str], file_service: FileService)",
      "call_count": 1
    },
    {
      "function": "add_watch_folder",
      "file": "src\\api\\routers\\files.py",
      "line": 454,
      "signature": "(folder_path: str, config_service: ConfigService, file_service: FileService)",
      "call_count": 1
    },
    {
      "function": "remove_watch_folder",
      "file": "src\\api\\routers\\files.py",
      "line": 492,
      "signature": "(folder_path: str, config_service: ConfigService, file_service: FileService)",
      "call_count": 1
    },
    {
      "function": "update_watch_folder",
      "file": "src\\api\\routers\\files.py",
      "line": 522,
      "signature": "(folder_path: str, is_active: bool, config_service: ConfigService, file_service: FileService)",
      "call_count": 1
    },
    {
      "function": "get_idea_statistics",
      "file": "src\\api\\routers\\ideas.py",
      "line": 301,
      "signature": "(idea_service: IdeaService)",
      "call_count": 1
    },
    {
      "function": "list_library_files",
      "file": "src\\api\\routers\\library.py",
      "line": 91,
      "signature": "(page: int, limit: int, source_type: Optional[str], file_type: Optional[str], status: Optional[str], search: Optional[str], has_thumbnail: Optional[bool], has_metadata: Optional[bool], manufacturer: Optional[str], printer_model: Optional[str], show_duplicates: Optional[bool], only_duplicates: Optional[bool], library_service)",
      "call_count": 1
    },
    {
      "function": "delete_library_file",
      "file": "src\\api\\routers\\library.py",
      "line": 268,
      "signature": "(checksum: str, delete_physical: bool, library_service)",
      "call_count": 1
    },
    {
      "function": "export_inventory",
      "file": "src\\api\\routers\\materials.py",
      "line": 153,
      "signature": "(format: str, material_service: MaterialService)",
      "call_count": 1
    },
    {
      "function": "get_material",
      "file": "src\\api\\routers\\materials.py",
      "line": 182,
      "signature": "(material_id: str, material_service: MaterialService)",
      "call_count": 1
    },
    {
      "function": "create_material",
      "file": "src\\api\\routers\\materials.py",
      "line": 217,
      "signature": "(material_data: MaterialCreate, material_service: MaterialService)",
      "call_count": 1
    },
    {
      "function": "update_material",
      "file": "src\\api\\routers\\materials.py",
      "line": 250,
      "signature": "(material_id: str, update_data: MaterialUpdate, material_service: MaterialService)",
      "call_count": 1
    },
    {
      "function": "record_consumption",
      "file": "src\\api\\routers\\materials.py",
      "line": 286,
      "signature": "(consumption_data: ConsumptionRequest, material_service: MaterialService)",
      "call_count": 1
    },
    {
      "function": "update_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 201,
      "signature": "(printer_id: UUID, printer_data: PrinterUpdateRequest, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "delete_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 231,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "connect_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 254,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "disconnect_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 278,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "pause_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 295,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "resume_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 320,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "stop_printer",
      "file": "src\\api\\routers\\printers.py",
      "line": 345,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "download_current_job_file",
      "file": "src\\api\\routers\\printers.py",
      "line": 370,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "start_printer_monitoring",
      "file": "src\\api\\routers\\printers.py",
      "line": 418,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "stop_printer_monitoring",
      "file": "src\\api\\routers\\printers.py",
      "line": 443,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "call_count": 1
    },
    {
      "function": "get_application_settings",
      "file": "src\\api\\routers\\settings.py",
      "line": 97,
      "signature": "(config_service: ConfigService)",
      "call_count": 1
    },
    {
      "function": "update_application_settings",
      "file": "src\\api\\routers\\settings.py",
      "line": 113,
      "signature": "(settings: ApplicationSettingsUpdate, config_service: ConfigService)",
      "call_count": 1
    },
    {
      "function": "validate_printer_connection",
      "file": "src\\api\\routers\\settings.py",
      "line": 217,
      "signature": "(printer_id: str, config_service: ConfigService)",
      "call_count": 1
    },
    {
      "function": "get_system_info",
      "file": "src\\api\\routers\\system.py",
      "line": 25,
      "signature": "(config_service: ConfigService)",
      "call_count": 1
    },
    {
      "function": "create_backup",
      "file": "src\\api\\routers\\system.py",
      "line": 41,
      "signature": "(config_service: ConfigService)",
      "call_count": 1
    },
    {
      "function": "handle_client_message",
      "file": "src\\api\\routers\\websocket.py",
      "line": 128,
      "signature": "(websocket: WebSocket, message: dict)",
      "call_count": 1
    },
    {
      "function": "broadcast_printer_status",
      "file": "src\\api\\routers\\websocket.py",
      "line": 161,
      "signature": "(printer_id: UUID, status_data: dict)",
      "call_count": 1
    },
    {
      "function": "setup_logging",
      "file": "src\\utils\\logging_config.py",
      "line": 12,
      "signature": "(log_level: str, log_file: str)",
      "call_count": 1
    },
    {
      "function": "sanitize_german_filename",
      "file": "tests\\backend\\test_api_files.py",
      "line": 526,
      "signature": "(filename)",
      "call_count": 1
    },
    {
      "function": "generate_download_path",
      "file": "tests\\backend\\test_api_files.py",
      "line": 552,
      "signature": "(base_dir, printer_id, filename)",
      "call_count": 1
    },
    {
      "function": "validate_file_size",
      "file": "tests\\backend\\test_api_files.py",
      "line": 572,
      "signature": "(file_size_bytes, max_size_mb)",
      "call_count": 1
    },
    {
      "function": "extract_3mf_metadata",
      "file": "tests\\backend\\test_api_files.py",
      "line": 578,
      "signature": "(file_content)",
      "call_count": 1
    },
    {
      "function": "generate_printer_id",
      "file": "tests\\backend\\test_api_printers.py",
      "line": 449,
      "signature": "(name, printer_type)",
      "call_count": 1
    },
    {
      "function": "check_file_exists",
      "file": "verify_phase2_integration.py",
      "line": 11,
      "signature": "(filepath, description)",
      "call_count": 1
    }
  ],
  "unused_functions": [
    {
      "function": "demo_optimization",
      "file": "demo_gcode_optimization.py",
      "line": 74,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "FunctionAnalyzer.visit_Import",
      "file": "scripts\\analyze_codebase.py",
      "line": 31,
      "signature": "(self, node)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "FunctionAnalyzer.visit_ImportFrom",
      "file": "scripts\\analyze_codebase.py",
      "line": 42,
      "signature": "(self, node)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "FunctionAnalyzer.visit_ClassDef",
      "file": "scripts\\analyze_codebase.py",
      "line": 55,
      "signature": "(self, node)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "FunctionAnalyzer.visit_AsyncFunctionDef",
      "file": "scripts\\analyze_codebase.py",
      "line": 117,
      "signature": "(self, node)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "FunctionAnalyzer.visit_Call",
      "file": "scripts\\analyze_codebase.py",
      "line": 121,
      "signature": "(self, node)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "setup_example_env",
      "file": "scripts\\bambu_credentials.py",
      "line": 103,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "test_direct_ftp",
      "file": "scripts\\debug_bambu_ftp.py",
      "line": 12,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "test_alternative_ftp",
      "file": "scripts\\debug_bambu_ftp_v2.py",
      "line": 12,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "download_target_file",
      "file": "scripts\\download_target_file.py",
      "line": 21,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "test_working_ftp",
      "file": "scripts\\working_bambu_ftp.py",
      "line": 212,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "get_analytics_summary",
      "file": "src\\api\\routers\\analytics.py",
      "line": 48,
      "signature": "(start_date: Optional[date], end_date: Optional[date], analytics_service: AnalyticsService)",
      "is_async": true,
      "decorators": [
        "router.get('/summary', response_model=AnalyticsResponse)"
      ]
    },
    {
      "function": "get_analytics_overview",
      "file": "src\\api\\routers\\analytics.py",
      "line": 84,
      "signature": "(period: Optional[str], analytics_service: AnalyticsService)",
      "is_async": true,
      "decorators": [
        "router.get('/overview', response_model=OverviewResponse)"
      ]
    },
    {
      "function": "get_camera_status",
      "file": "src\\api\\routers\\camera.py",
      "line": 24,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "is_async": true,
      "decorators": [
        "router.get('/{printer_id}/camera/status', response_model=CameraStatus)"
      ]
    },
    {
      "function": "get_camera_stream",
      "file": "src\\api\\routers\\camera.py",
      "line": 72,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "is_async": true,
      "decorators": [
        "router.get('/{printer_id}/camera/stream')"
      ]
    },
    {
      "function": "list_snapshots",
      "file": "src\\api\\routers\\camera.py",
      "line": 198,
      "signature": "(printer_id: UUID, limit: int, printer_service: PrinterService)",
      "is_async": true,
      "decorators": [
        "router.get('/{printer_id}/snapshots', response_model=List[SnapshotResponse])"
      ]
    },
    {
      "function": "download_snapshot",
      "file": "src\\api\\routers\\camera.py",
      "line": 220,
      "signature": "(snapshot_id: int, printer_service: PrinterService)",
      "is_async": true,
      "decorators": [
        "router.get('/snapshots/{snapshot_id}/download')"
      ]
    },
    {
      "function": "debug_printer_thumbnail",
      "file": "src\\api\\routers\\debug.py",
      "line": 16,
      "signature": "(request: Request, printer_id: str, include_file_record: bool, include_base64_lengths: bool)",
      "is_async": true,
      "decorators": [
        "router.get('/printers/{printer_id}/thumbnail', tags=['Debug'], summary='Debug current printer thumbnail linkage')"
      ]
    },
    {
      "function": "debug_file",
      "file": "src\\api\\routers\\debug.py",
      "line": 78,
      "signature": "(request: Request, file_id: str, include_base64_length: bool)",
      "is_async": true,
      "decorators": [
        "router.get('/files/{file_id}', tags=['Debug'], summary='Debug file record & thumbnail flags')"
      ]
    },
    {
      "function": "report_errors",
      "file": "src\\api\\routers\\errors.py",
      "line": 170,
      "signature": "(request: ErrorReportRequest, client_request: Request)",
      "is_async": true,
      "decorators": [
        "router.post('/report')"
      ]
    },
    {
      "function": "error_system_health",
      "file": "src\\api\\routers\\errors.py",
      "line": 255,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "router.get('/health')"
      ]
    },
    {
      "function": "get_file_thumbnail",
      "file": "src\\api\\routers\\files.py",
      "line": 225,
      "signature": "(file_id: str, file_service: FileService)",
      "is_async": true,
      "decorators": [
        "router.get('/{file_id}/thumbnail')"
      ]
    },
    {
      "function": "get_file_metadata",
      "file": "src\\api\\routers\\files.py",
      "line": 280,
      "signature": "(file_id: str, file_service: FileService)",
      "is_async": true,
      "decorators": [
        "router.get('/{file_id}/metadata')"
      ]
    },
    {
      "function": "get_watch_folder_status",
      "file": "src\\api\\routers\\files.py",
      "line": 382,
      "signature": "(file_service: FileService, config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.get('/watch-folders/status')"
      ]
    },
    {
      "function": "list_local_files",
      "file": "src\\api\\routers\\files.py",
      "line": 399,
      "signature": "(watch_folder_path: Optional[str], file_service: FileService)",
      "is_async": true,
      "decorators": [
        "router.get('/local')"
      ]
    },
    {
      "function": "check_printer_compatibility",
      "file": "src\\api\\routers\\files.py",
      "line": 764,
      "signature": "(file_id: str, printer_id: str, file_service: FileService)",
      "is_async": true,
      "decorators": [
        "router.get('/{file_id}/compatibility/{printer_id}')"
      ]
    },
    {
      "function": "readiness_check",
      "file": "src\\api\\routers\\health.py",
      "line": 162,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "router.get('/readiness')"
      ]
    },
    {
      "function": "liveness_check",
      "file": "src\\api\\routers\\health.py",
      "line": 171,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "router.get('/liveness')"
      ]
    },
    {
      "function": "preview_url",
      "file": "src\\api\\routers\\idea_url.py",
      "line": 43,
      "signature": "(url_data: UrlPreviewRequest, idea_service: IdeaService)",
      "is_async": true,
      "decorators": [
        "router.post('/preview', response_model=Dict[str, Any])"
      ]
    },
    {
      "function": "import_idea_from_url",
      "file": "src\\api\\routers\\ideas.py",
      "line": 260,
      "signature": "(import_data: IdeaImport, idea_service: IdeaService)",
      "is_async": true,
      "decorators": [
        "router.post('/import', response_model=Dict[str, str])"
      ]
    },
    {
      "function": "get_trending_models",
      "file": "src\\api\\routers\\ideas.py",
      "line": 342,
      "signature": "(platform: str, category: Optional[str], idea_service: IdeaService)",
      "is_async": true,
      "decorators": [
        "router.get('/trending/{platform}', response_model=List[Dict[str, Any]])"
      ]
    },
    {
      "function": "refresh_trending_cache",
      "file": "src\\api\\routers\\ideas.py",
      "line": 395,
      "signature": "(idea_service: IdeaService)",
      "is_async": true,
      "decorators": [
        "router.post('/trending/refresh', response_model=Dict[str, str])"
      ]
    },
    {
      "function": "get_library_service",
      "file": "src\\api\\routers\\library.py",
      "line": 82,
      "signature": "()",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "reprocess_library_file",
      "file": "src\\api\\routers\\library.py",
      "line": 206,
      "signature": "(checksum: str, library_service)",
      "is_async": true,
      "decorators": [
        "router.post('/files/{checksum}/reprocess', response_model=ReprocessResponse)"
      ]
    },
    {
      "function": "library_health_check",
      "file": "src\\api\\routers\\library.py",
      "line": 375,
      "signature": "(library_service)",
      "is_async": true,
      "decorators": [
        "router.get('/health')"
      ]
    },
    {
      "function": "get_materials",
      "file": "src\\api\\routers\\materials.py",
      "line": 64,
      "signature": "(material_type: Optional[MaterialType], brand: Optional[MaterialBrand], color: Optional[MaterialColor], low_stock: bool, printer_id: Optional[str], material_service: MaterialService)",
      "is_async": true,
      "decorators": [
        "router.get('/', response_model=List[MaterialResponse])"
      ]
    },
    {
      "function": "get_material_stats",
      "file": "src\\api\\routers\\materials.py",
      "line": 114,
      "signature": "(material_service: MaterialService)",
      "is_async": true,
      "decorators": [
        "router.get('/stats', response_model=MaterialStats)"
      ]
    },
    {
      "function": "get_material_types",
      "file": "src\\api\\routers\\materials.py",
      "line": 125,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "router.get('/types')"
      ]
    },
    {
      "function": "get_consumption_report",
      "file": "src\\api\\routers\\materials.py",
      "line": 135,
      "signature": "(start_date: datetime, end_date: datetime, material_service: MaterialService)",
      "is_async": true,
      "decorators": [
        "router.get('/report', response_model=MaterialReport)"
      ]
    },
    {
      "function": "delete_material",
      "file": "src\\api\\routers\\materials.py",
      "line": 319,
      "signature": "(material_id: str, material_service: MaterialService)",
      "is_async": true,
      "decorators": [
        "router.delete('/{material_id}', status_code=204)"
      ]
    },
    {
      "function": "get_consumption_history",
      "file": "src\\api\\routers\\materials.py",
      "line": 329,
      "signature": "(material_id: Optional[str], job_id: Optional[str], printer_id: Optional[str], days: int, material_service: MaterialService)",
      "is_async": true,
      "decorators": [
        "router.get('/consumption/history')"
      ]
    },
    {
      "function": "get_printer_current_thumbnail",
      "file": "src\\api\\routers\\printers.py",
      "line": 494,
      "signature": "(printer_id: UUID, printer_service: PrinterService)",
      "is_async": true,
      "decorators": [
        "router.get('/{printer_id}/thumbnail')"
      ]
    },
    {
      "function": "get_printer_configurations",
      "file": "src\\api\\routers\\settings.py",
      "line": 141,
      "signature": "(config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.get('/printers')"
      ]
    },
    {
      "function": "add_or_update_printer",
      "file": "src\\api\\routers\\settings.py",
      "line": 166,
      "signature": "(printer_id: str, printer_config: PrinterConfigRequest, config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.post('/printers/{printer_id}')"
      ]
    },
    {
      "function": "get_gcode_optimization_settings",
      "file": "src\\api\\routers\\settings.py",
      "line": 274,
      "signature": "(config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.get('/gcode-optimization')"
      ]
    },
    {
      "function": "update_gcode_optimization_settings",
      "file": "src\\api\\routers\\settings.py",
      "line": 296,
      "signature": "(settings: GcodeOptimizationSettings, config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.put('/gcode-optimization')"
      ]
    },
    {
      "function": "reload_configuration",
      "file": "src\\api\\routers\\settings.py",
      "line": 322,
      "signature": "(config_service: ConfigService)",
      "is_async": true,
      "decorators": [
        "router.post('/reload')"
      ]
    },
    {
      "function": "get_trending_stats",
      "file": "src\\api\\routers\\trending.py",
      "line": 112,
      "signature": "(trending_service: TrendingService)",
      "is_async": true,
      "decorators": [
        "router.get('/stats', response_model=TrendingStats)"
      ]
    },
    {
      "function": "refresh_trending",
      "file": "src\\api\\routers\\trending.py",
      "line": 124,
      "signature": "(platform: Optional[str], trending_service: TrendingService)",
      "is_async": true,
      "decorators": [
        "router.post('/refresh', status_code=202)"
      ]
    },
    {
      "function": "get_platform_trending",
      "file": "src\\api\\routers\\trending.py",
      "line": 182,
      "signature": "(platform: str, category: Optional[str], limit: int, trending_service: TrendingService)",
      "is_async": true,
      "decorators": [
        "router.get('/{platform}')"
      ]
    },
    {
      "function": "get_trending_categories",
      "file": "src\\api\\routers\\trending.py",
      "line": 236,
      "signature": "(platform: Optional[str], trending_service: TrendingService)",
      "is_async": true,
      "decorators": [
        "router.get('/categories/list')"
      ]
    },
    {
      "function": "websocket_endpoint",
      "file": "src\\api\\routers\\websocket.py",
      "line": 90,
      "signature": "(websocket: WebSocket)",
      "is_async": true,
      "decorators": [
        "router.websocket('/')"
      ]
    },
    {
      "function": "websocket_endpoint_no_slash",
      "file": "src\\api\\routers\\websocket.py",
      "line": 96,
      "signature": "(websocket: WebSocket)",
      "is_async": true,
      "decorators": [
        "router.websocket('')"
      ]
    },
    {
      "function": "broadcast_job_update",
      "file": "src\\api\\routers\\websocket.py",
      "line": 170,
      "signature": "(job_id: UUID, job_data: dict)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "broadcast_system_event",
      "file": "src\\api\\routers\\websocket.py",
      "line": 179,
      "signature": "(event_type: str, event_data: dict)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_connection_manager",
      "file": "src\\api\\routers\\websocket.py",
      "line": 189,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "Database.transaction",
      "file": "src\\database\\database.py",
      "line": 296,
      "signature": "(self)",
      "is_async": true,
      "decorators": [
        "asynccontextmanager"
      ]
    },
    {
      "function": "Database.create_local_file",
      "file": "src\\database\\database.py",
      "line": 753,
      "signature": "(self, file_data: Dict[str, Any])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "Database.list_local_files",
      "file": "src\\database\\database.py",
      "line": 763,
      "signature": "(self, watch_folder_path: Optional[str])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "Database.get_library_file_sources",
      "file": "src\\database\\database.py",
      "line": 1315,
      "signature": "(self, checksum: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "lifespan",
      "file": "src\\main.py",
      "line": 88,
      "signature": "(app: FastAPI)",
      "is_async": true,
      "decorators": [
        "asynccontextmanager"
      ]
    },
    {
      "function": "create_application",
      "file": "src\\main.py",
      "line": 267,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "read_index",
      "file": "src\\main.py",
      "line": 333,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "app.get('/')"
      ]
    },
    {
      "function": "read_debug",
      "file": "src\\main.py",
      "line": 338,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "app.get('/debug')"
      ]
    },
    {
      "function": "metrics",
      "file": "src\\main.py",
      "line": 344,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "app.get('/metrics')"
      ]
    },
    {
      "function": "printernizer_exception_handler",
      "file": "src\\main.py",
      "line": 350,
      "signature": "(request: Request, exc: PrinternizerException)",
      "is_async": true,
      "decorators": [
        "app.exception_handler(PrinternizerException)"
      ]
    },
    {
      "function": "validation_exception_handler",
      "file": "src\\main.py",
      "line": 365,
      "signature": "(request: Request, exc: RequestValidationError)",
      "is_async": true,
      "decorators": [
        "app.exception_handler(RequestValidationError)"
      ]
    },
    {
      "function": "general_exception_handler",
      "file": "src\\main.py",
      "line": 379,
      "signature": "(request: Request, exc: Exception)",
      "is_async": true,
      "decorators": [
        "app.exception_handler(Exception)"
      ]
    },
    {
      "function": "setup_signal_handlers",
      "file": "src\\main.py",
      "line": 395,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "signal_handler",
      "file": "src\\main.py",
      "line": 397,
      "signature": "(signum, frame)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "Job.convert_progress_to_int",
      "file": "src\\models\\job.py",
      "line": 45,
      "signature": "(cls, v)",
      "is_async": false,
      "decorators": [
        "field_validator('progress', mode='before')"
      ]
    },
    {
      "function": "MaterialCreate.validate_remaining",
      "file": "src\\models\\material.py",
      "line": 116,
      "signature": "(cls, v, values)",
      "is_async": false,
      "decorators": [
        "field_validator('remaining_weight')"
      ]
    },
    {
      "function": "WatchFolder.get_display_name",
      "file": "src\\models\\watch_folder.py",
      "line": 106,
      "signature": "(self)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "WatchFolder.is_accessible",
      "file": "src\\models\\watch_folder.py",
      "line": 115,
      "signature": "(self)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "BambuLabPrinter.rank",
      "file": "src\\printers\\bambu_lab.py",
      "line": 1510,
      "signature": "(item)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "BasePrinter.remove_status_callback",
      "file": "src\\printers\\base.py",
      "line": 248,
      "signature": "(self, callback: Callable[[PrinterStatusUpdate], None])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "BasePrinter.get_connection_info",
      "file": "src\\printers\\base.py",
      "line": 261,
      "signature": "(self)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "BasePrinter.get_monitoring_metrics",
      "file": "src\\printers\\base.py",
      "line": 272,
      "signature": "(self)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "AnalyticsService.get_dashboard_stats",
      "file": "src\\services\\analytics_service.py",
      "line": 20,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "AnalyticsService.get_printer_usage",
      "file": "src\\services\\analytics_service.py",
      "line": 33,
      "signature": "(self, days: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "AnalyticsService.get_material_consumption",
      "file": "src\\services\\analytics_service.py",
      "line": 38,
      "signature": "(self, days: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "AnalyticsService.get_business_report",
      "file": "src\\services\\analytics_service.py",
      "line": 47,
      "signature": "(self, start_date: datetime, end_date: datetime)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "AnalyticsService.export_data",
      "file": "src\\services\\analytics_service.py",
      "line": 116,
      "signature": "(self, format_type: str, filters: Dict[str, Any])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "BambuFTPService.file_exists",
      "file": "src\\services\\bambu_ftp_service.py",
      "line": 368,
      "signature": "(self, filename: str, directory: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "create_bambu_ftp_service",
      "file": "src\\services\\bambu_ftp_service.py",
      "line": 433,
      "signature": "(ip_address: str, access_code: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "BambuParser.get_largest_thumbnail",
      "file": "src\\services\\bambu_parser.py",
      "line": 832,
      "signature": "(self, thumbnails: List[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "ConfigService.get_business_settings",
      "file": "src\\services\\config_service.py",
      "line": 384,
      "signature": "(self)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "EventService.unsubscribe",
      "file": "src\\services\\event_service.py",
      "line": 89,
      "signature": "(self, event_type: str, handler: Callable)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "EventService.set_services",
      "file": "src\\services\\event_service.py",
      "line": 476,
      "signature": "(self, printer_service, job_service, file_service, database)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "EventService.force_discovery",
      "file": "src\\services\\event_service.py",
      "line": 493,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "EventService.reset_monitoring_state",
      "file": "src\\services\\event_service.py",
      "line": 543,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "FileService.get_download_status",
      "file": "src\\services\\file_service.py",
      "line": 367,
      "signature": "(self, file_id: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "FileService.cleanup_download_status",
      "file": "src\\services\\file_service.py",
      "line": 782,
      "signature": "(self, max_age_hours: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "PrintFileHandler.on_created",
      "file": "src\\services\\file_watcher_service.py",
      "line": 92,
      "signature": "(self, event: FileSystemEvent)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "PrintFileHandler.on_modified",
      "file": "src\\services\\file_watcher_service.py",
      "line": 99,
      "signature": "(self, event: FileSystemEvent)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "PrintFileHandler.on_deleted",
      "file": "src\\services\\file_watcher_service.py",
      "line": 106,
      "signature": "(self, event: FileSystemEvent)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "PrintFileHandler.on_moved",
      "file": "src\\services\\file_watcher_service.py",
      "line": 112,
      "signature": "(self, event: FileSystemEvent)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "JobService.update_job_status",
      "file": "src\\services\\job_service.py",
      "line": 287,
      "signature": "(self, job_id: str, status: str, data: Dict[str, Any])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "JobService.get_business_jobs",
      "file": "src\\services\\job_service.py",
      "line": 426,
      "signature": "(self, limit: int, offset: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "JobService.get_private_jobs",
      "file": "src\\services\\job_service.py",
      "line": 430,
      "signature": "(self, limit: int, offset: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "JobService.calculate_material_costs",
      "file": "src\\services\\job_service.py",
      "line": 434,
      "signature": "(self, job_id: str, material_cost_per_gram: float, power_cost_per_hour: float)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "JobService.get_printer_jobs",
      "file": "src\\services\\job_service.py",
      "line": 467,
      "signature": "(self, printer_id: str, limit: int, offset: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "JobService.update_job_progress",
      "file": "src\\services\\job_service.py",
      "line": 471,
      "signature": "(self, job_id: str, progress: int, material_used: Optional[float])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MaterialService.get_materials_by_type",
      "file": "src\\services\\material_service.py",
      "line": 292,
      "signature": "(self, material_type: MaterialType)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MaterialService.get_materials_by_printer",
      "file": "src\\services\\material_service.py",
      "line": 296,
      "signature": "(self, printer_id: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MaterialService.get_low_stock_materials",
      "file": "src\\services\\material_service.py",
      "line": 300,
      "signature": "(self, threshold: float)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MigrationService.get_migration_status",
      "file": "src\\services\\migration_service.py",
      "line": 152,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MigrationService.force_run_migration",
      "file": "src\\services\\migration_service.py",
      "line": 177,
      "signature": "(self, migration_name: str)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "MonitoringService.get_monitoring_status",
      "file": "src\\services\\monitoring_service.py",
      "line": 317,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "PreviewRenderService.clear_cache",
      "file": "src\\services\\preview_render_service.py",
      "line": 499,
      "signature": "(self, older_than_days: Optional[int])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "PreviewRenderService.update_config",
      "file": "src\\services\\preview_render_service.py",
      "line": 551,
      "signature": "(self, config: Dict[str, Any])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "ThumbnailService.get_thumbnail",
      "file": "src\\services\\thumbnail_service.py",
      "line": 161,
      "signature": "(self, url: str, source_type: str, auto_download: bool)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "ThumbnailService.cache_multiple_thumbnails",
      "file": "src\\services\\thumbnail_service.py",
      "line": 181,
      "signature": "(self, url_list: list[Dict[str, str]], max_concurrent: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "ThumbnailService.get_cache_statistics",
      "file": "src\\services\\thumbnail_service.py",
      "line": 233,
      "signature": "(self)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "ThumbnailService.clear_cache",
      "file": "src\\services\\thumbnail_service.py",
      "line": 287,
      "signature": "(self, source_type: Optional[str])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "WatchFolderDbService.get_watch_folder_by_id",
      "file": "src\\services\\watch_folder_db_service.py",
      "line": 68,
      "signature": "(self, folder_id: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "WatchFolderDbService.delete_watch_folder",
      "file": "src\\services\\watch_folder_db_service.py",
      "line": 173,
      "signature": "(self, folder_id: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "WatchFolderDbService.update_folder_statistics",
      "file": "src\\services\\watch_folder_db_service.py",
      "line": 230,
      "signature": "(self, folder_path: str, file_count: int)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "WatchFolderDbService.validate_and_update_folder",
      "file": "src\\services\\watch_folder_db_service.py",
      "line": 253,
      "signature": "(self, folder_path: str, is_valid: bool, error_message: Optional[str])",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "PrinternizerSettings.validate_secret_key",
      "file": "src\\utils\\config.py",
      "line": 90,
      "signature": "(cls, v)",
      "is_async": false,
      "decorators": [
        "validator('secret_key')"
      ]
    },
    {
      "function": "PrinternizerSettings.validate_library_path",
      "file": "src\\utils\\config.py",
      "line": 105,
      "signature": "(cls, v)",
      "is_async": false,
      "decorators": [
        "validator('library_path')"
      ]
    },
    {
      "function": "reload_settings",
      "file": "src\\utils\\config.py",
      "line": 165,
      "signature": "()",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "get_database",
      "file": "src\\utils\\dependencies.py",
      "line": 19,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_config_service",
      "file": "src\\utils\\dependencies.py",
      "line": 24,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_event_service",
      "file": "src\\utils\\dependencies.py",
      "line": 29,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_printer_service",
      "file": "src\\utils\\dependencies.py",
      "line": 34,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_job_service",
      "file": "src\\utils\\dependencies.py",
      "line": 39,
      "signature": "(database: Database, event_service: EventService)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_file_service",
      "file": "src\\utils\\dependencies.py",
      "line": 47,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_analytics_service",
      "file": "src\\utils\\dependencies.py",
      "line": 52,
      "signature": "(database: Database)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_idea_service",
      "file": "src\\utils\\dependencies.py",
      "line": 59,
      "signature": "(database: Database)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_trending_service",
      "file": "src\\utils\\dependencies.py",
      "line": 66,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_thumbnail_service",
      "file": "src\\utils\\dependencies.py",
      "line": 71,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "get_url_parser_service",
      "file": "src\\utils\\dependencies.py",
      "line": 76,
      "signature": "(request: Request)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "handle_exceptions",
      "file": "src\\utils\\error_handling.py",
      "line": 233,
      "signature": "(category: ErrorCategory, severity: ErrorSeverity, user_message: Optional[str], reraise: bool)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "decorator",
      "file": "src\\utils\\error_handling.py",
      "line": 248,
      "signature": "(func: Callable)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "sync_wrapper",
      "file": "src\\utils\\error_handling.py",
      "line": 250,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "functools.wraps(func)"
      ]
    },
    {
      "function": "async_wrapper",
      "file": "src\\utils\\error_handling.py",
      "line": 270,
      "signature": "()",
      "is_async": true,
      "decorators": [
        "functools.wraps(func)"
      ]
    },
    {
      "function": "ErrorReportingMixin.report_error",
      "file": "src\\utils\\error_handling.py",
      "line": 297,
      "signature": "(self, error: Exception, category: ErrorCategory, severity: ErrorSeverity, context: Optional[Dict[str, Any]], user_message: Optional[str])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "handle_database_error",
      "file": "src\\utils\\error_handling.py",
      "line": 316,
      "signature": "(error: Exception, context: Optional[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "handle_api_error",
      "file": "src\\utils\\error_handling.py",
      "line": 326,
      "signature": "(error: Exception, context: Optional[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "handle_printer_error",
      "file": "src\\utils\\error_handling.py",
      "line": 336,
      "signature": "(error: Exception, context: Optional[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "handle_file_error",
      "file": "src\\utils\\error_handling.py",
      "line": 346,
      "signature": "(error: Exception, context: Optional[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "handle_validation_error",
      "file": "src\\utils\\error_handling.py",
      "line": 356,
      "signature": "(error: Exception, context: Optional[Dict[str, Any]])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "RequestTimingMiddleware.dispatch",
      "file": "src\\utils\\middleware.py",
      "line": 17,
      "signature": "(self, request: Request, call_next: Callable)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "SecurityHeadersMiddleware.dispatch",
      "file": "src\\utils\\middleware.py",
      "line": 46,
      "signature": "(self, request: Request, call_next: Callable)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "GermanComplianceMiddleware.dispatch",
      "file": "src\\utils\\middleware.py",
      "line": 79,
      "signature": "(self, request: Request, call_next: Callable)",
      "is_async": true,
      "decorators": []
    },
    {
      "function": "temp_database",
      "file": "tests\\conftest.py",
      "line": 20,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "db_connection",
      "file": "tests\\conftest.py",
      "line": 41,
      "signature": "(temp_database)",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "sample_printer_data",
      "file": "tests\\conftest.py",
      "line": 50,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "sample_job_data",
      "file": "tests\\conftest.py",
      "line": 84,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "sample_file_data",
      "file": "tests\\conftest.py",
      "line": 126,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "populated_database",
      "file": "tests\\conftest.py",
      "line": 158,
      "signature": "(db_connection, sample_printer_data, sample_job_data, sample_file_data)",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "mock_bambu_api",
      "file": "tests\\conftest.py",
      "line": 192,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "mock_prusa_api",
      "file": "tests\\conftest.py",
      "line": 234,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "mock_websocket",
      "file": "tests\\conftest.py",
      "line": 274,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "german_business_config",
      "file": "tests\\conftest.py",
      "line": 294,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "sample_cost_calculations",
      "file": "tests\\conftest.py",
      "line": 311,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "temp_download_directory",
      "file": "tests\\conftest.py",
      "line": 330,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "sample_3mf_file",
      "file": "tests\\conftest.py",
      "line": 339,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "test_utils",
      "file": "tests\\conftest.py",
      "line": 376,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "event_loop",
      "file": "tests\\conftest.py",
      "line": 416,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture(scope='session')"
      ]
    },
    {
      "function": "api_client",
      "file": "tests\\conftest.py",
      "line": 428,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "network_error_scenarios",
      "file": "tests\\conftest.py",
      "line": 444,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "performance_test_data",
      "file": "tests\\conftest.py",
      "line": 461,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "test_config",
      "file": "tests\\conftest.py",
      "line": 476,
      "signature": "()",
      "is_async": false,
      "decorators": [
        "pytest.fixture"
      ]
    },
    {
      "function": "create_idea_with_tags",
      "file": "tests\\fixtures\\ideas_fixtures.py",
      "line": 171,
      "signature": "(title: str, tags: List[str])",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "create_business_idea",
      "file": "tests\\fixtures\\ideas_fixtures.py",
      "line": 182,
      "signature": "(title: str, customer_name: str)",
      "is_async": false,
      "decorators": []
    },
    {
      "function": "create_external_idea",
      "file": "tests\\fixtures\\ideas_fixtures.py",
      "line": 197,
      "signature": "(title: str, platform: str, url: str)",
      "is_async": false,
      "decorators": []
    }
  ]
}