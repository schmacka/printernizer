# Docker Compose for Printernizer Production Deployment
# Professional 3D Print Management System for Porcus3D

version: '3.8'

services:
  # Backend API Service with WebSocket Support
  printernizer-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: printernizer-backend
    hostname: printernizer-backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - TZ=Europe/Berlin
      - PORT=8000
      - WORKERS=1  # Single worker for WebSocket support
      - LOG_LEVEL=info
      - DATABASE_PATH=/app/data/printernizer.db
      - CORS_ORIGINS=https://porcus3d.de,https://www.porcus3d.de
      - REDIS_URL=redis://printernizer-redis:6379
      - ENABLE_WEBSOCKETS=true
      - PRINTER_POLLING_INTERVAL=30
      - MAX_CONCURRENT_DOWNLOADS=5
    volumes:
      - printernizer-data:/app/data
      - printernizer-logs:/app/logs
      - printernizer-backups:/app/backups
      - printernizer-uploads:/app/uploads
      - printernizer-printer-files:/app/printer-files
      - printernizer-temp:/app/temp
    networks:
      - printernizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.printernizer-api.rule=Host(`api.porcus3d.de`) || PathPrefix(`/api/`)"
      - "traefik.http.routers.printernizer-api.tls=true"
      - "traefik.http.routers.printernizer-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.printernizer-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.printernizer-ws.rule=Host(`api.porcus3d.de`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.printernizer-ws.tls=true"
      - "traefik.http.routers.printernizer-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.printernizer-ws.loadbalancer.server.port=8000"
      - "traefik.http.services.printernizer-ws.loadbalancer.sticky.cookie=true"

  # Frontend Nginx Service
  printernizer-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: printernizer-frontend
    hostname: printernizer-frontend
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    volumes:
      - printernizer-nginx-cache:/var/cache/nginx
    networks:
      - printernizer-network
    depends_on:
      - printernizer-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.printernizer-web.rule=Host(`printernizer.porcus3d.de`)"
      - "traefik.http.routers.printernizer-web.tls=true"
      - "traefik.http.routers.printernizer-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.printernizer-web.loadbalancer.server.port=80"

  # Redis for Background Tasks and Caching
  printernizer-redis:
    image: redis:7-alpine
    container_name: printernizer-redis
    hostname: printernizer-redis
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - printernizer-redis-data:/data
    networks:
      - printernizer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for Monitoring
  printernizer-prometheus:
    image: prom/prometheus:latest
    container_name: printernizer-prometheus
    hostname: printernizer-prometheus
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - printernizer-prometheus-data:/prometheus
    networks:
      - printernizer-network
    ports:
      - "9090:9090"

  # Grafana for Dashboards
  printernizer-grafana:
    image: grafana/grafana:latest
    container_name: printernizer-grafana
    hostname: printernizer-grafana
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
      - GF_SECURITY_ADMIN_PASSWORD=admin123!
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - printernizer-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - printernizer-network
    ports:
      - "3000:3000"
    depends_on:
      - printernizer-prometheus

  # Backup Service
  printernizer-backup:
    image: alpine:latest
    container_name: printernizer-backup
    restart: unless-stopped
    environment:
      - TZ=Europe/Berlin
    command: >
      sh -c "
      apk add --no-cache sqlite curl &&
      while true; do
        echo 'Creating backup...' &&
        sqlite3 /app/data/printernizer.db '.backup /app/backups/printernizer_$(date +%Y%m%d_%H%M%S).db' &&
        find /app/backups -name '*.db' -mtime +7 -delete &&
        echo 'Backup completed.' &&
        sleep 86400
      done"
    volumes:
      - printernizer-data:/app/data:ro
      - printernizer-backups:/app/backups
    networks:
      - printernizer-network
    depends_on:
      - printernizer-backend

networks:
  printernizer-network:
    driver: bridge
    name: printernizer-network

volumes:
  printernizer-data:
    name: printernizer-data
    driver: local
  printernizer-logs:
    name: printernizer-logs
    driver: local
  printernizer-backups:
    name: printernizer-backups
    driver: local
  printernizer-uploads:
    name: printernizer-uploads
    driver: local
  printernizer-nginx-cache:
    name: printernizer-nginx-cache
    driver: local
  printernizer-redis-data:
    name: printernizer-redis-data
    driver: local
  printernizer-prometheus-data:
    name: printernizer-prometheus-data
    driver: local
  printernizer-grafana-data:
    name: printernizer-grafana-data
    driver: local
  printernizer-printer-files:
    name: printernizer-printer-files
    driver: local
  printernizer-temp:
    name: printernizer-temp
    driver: local