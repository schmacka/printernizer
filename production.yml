# Printernizer Production Configuration
# Kubernetes deployment configuration for German hosting

apiVersion: v1
kind: Namespace
metadata:
  name: printernizer
  labels:
    name: printernizer
    environment: production
    location: germany

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: printernizer-config
  namespace: printernizer
data:
  ENVIRONMENT: "production"
  TIMEZONE: "Europe/Berlin"
  CURRENCY: "EUR"
  VAT_RATE: "0.19"
  BUSINESS_NAME: "Porcus3D"
  BUSINESS_LOCATION: "Kornwestheim, Germany"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "https://porcus3d.de,https://www.porcus3d.de"
  PROMETHEUS_ENABLED: "true"
  GDPR_ENABLED: "true"
  DATA_RETENTION_DAYS: "2555"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: printernizer-secrets
  namespace: printernizer
type: Opaque
stringData:
  SECRET_KEY: "your-production-secret-key"
  SENTRY_DSN: ""
  SMTP_PASSWORD: ""
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""

---
# Persistent Volume for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: printernizer-data
  namespace: printernizer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: printernizer-backend
  namespace: printernizer
  labels:
    app: printernizer-backend
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: printernizer-backend
  template:
    metadata:
      labels:
        app: printernizer-backend
        tier: backend
    spec:
      containers:
      - name: printernizer-backend
        image: ghcr.io/porcus3d/printernizer-backend:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: printernizer-config
        - secretRef:
            name: printernizer-secrets
        env:
        - name: DATABASE_PATH
          value: "/app/data/printernizer.db"
        - name: PORT
          value: "8000"
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: backups
          mountPath: /app/backups
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: printernizer-data
      - name: logs
        emptyDir: {}
      - name: backups
        emptyDir: {}

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: printernizer-frontend
  namespace: printernizer
  labels:
    app: printernizer-frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: printernizer-frontend
  template:
    metadata:
      labels:
        app: printernizer-frontend
        tier: frontend
    spec:
      containers:
      - name: printernizer-frontend
        image: ghcr.io/porcus3d/printernizer-frontend:latest
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: printernizer-backend
  namespace: printernizer
  labels:
    app: printernizer-backend
spec:
  selector:
    app: printernizer-backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: printernizer-frontend
  namespace: printernizer
  labels:
    app: printernizer-frontend
spec:
  selector:
    app: printernizer-frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP

---
# Ingress for external access with German SSL
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: printernizer-ingress
  namespace: printernizer
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - printernizer.porcus3d.de
    secretName: printernizer-tls
  rules:
  - host: printernizer.porcus3d.de
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: printernizer-backend
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: printernizer-backend
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: printernizer-frontend
            port:
              number: 80

---
# HorizontalPodAutoscaler for backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: printernizer-backend-hpa
  namespace: printernizer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: printernizer-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: printernizer-network-policy
  namespace: printernizer
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  egress:
  - {} # Allow all egress for printer communication