#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: Printernizer Service Runner
# Starts the Printernizer 3D print management system
# ==============================================================================

# Wait for dependencies
s6-svwait -u -t 0 /var/run/s6/services/s6-fdholderd

bashio::log.info "Starting Printernizer 3D Print Management System..."

# Read addon configuration
export TIMEZONE=$(bashio::config 'timezone')
export LOG_LEVEL=$(bashio::config 'log_level')
export CORS_ORIGINS=$(bashio::config 'cors_origins' | jq -r 'join(",")')
export PRINTER_POLLING_INTERVAL=$(bashio::config 'printer_polling_interval')
export MAX_CONCURRENT_DOWNLOADS=$(bashio::config 'max_concurrent_downloads')
export ENABLE_WEBSOCKETS=$(bashio::config 'enable_websockets')

# Business features
export ENABLE_GERMAN_COMPLIANCE=$(bashio::config 'business_features.enable_german_compliance')
export VAT_RATE=$(bashio::config 'business_features.vat_rate')
export CURRENCY=$(bashio::config 'business_features.currency')

# Set timezone
export TZ="${TIMEZONE}"
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create printer configuration from addon config
bashio::log.info "Configuring printers from addon settings..."
PRINTERS_JSON="/data/printers.json"

if bashio::config.has_value 'printers'; then
    bashio::config 'printers' | jq '[.[] | {
        printer_id: .printer_id,
        name: .name,
        type: .type,
        ip_address: .ip_address,
        api_key: (.api_key // ""),
        access_code: (.access_code // ""),
        serial_number: (.serial_number // ""),
        is_active: (.is_active // true)
    }]' > "${PRINTERS_JSON}"
    bashio::log.info "Created printer configuration with $(jq length < ${PRINTERS_JSON}) printers"
else
    echo '[]' > "${PRINTERS_JSON}"
    bashio::log.warning "No printers configured in addon settings"
fi

# Set database path to persistent storage
export DATABASE_PATH="/data/printernizer.db"

# Create directories in persistent storage
mkdir -p /data/logs
mkdir -p /data/backups  
mkdir -p /data/uploads
mkdir -p /data/printer-files
mkdir -p /data/temp

# Link to application directories
ln -sf /data/logs /app/logs
ln -sf /data/backups /app/backups
ln -sf /data/uploads /app/uploads
ln -sf /data/printer-files /app/printer-files
ln -sf /data/temp /app/temp

# Initialize database if needed
if [ ! -f "${DATABASE_PATH}" ]; then
    bashio::log.info "Initializing database..."
    sqlite3 "${DATABASE_PATH}" < /app/database_schema.sql
fi

# Check for MQTT service
if bashio::services.available "mqtt"; then
    export MQTT_HOST=$(bashio::services "mqtt" "host")
    export MQTT_PORT=$(bashio::services "mqtt" "port") 
    export MQTT_USERNAME=$(bashio::services "mqtt" "username")
    export MQTT_PASSWORD=$(bashio::services "mqtt" "password")
    bashio::log.info "MQTT service available at ${MQTT_HOST}:${MQTT_PORT}"
else
    bashio::log.warning "MQTT service not available - printer MQTT features disabled"
fi

# Start Printernizer
cd /app
bashio::log.info "Starting Printernizer on port 8000..."

exec python3 -m uvicorn \
    src.main:app \
    --host 0.0.0.0 \
    --port 8000 \
    --log-level "${LOG_LEVEL}" \
    --workers 1 \
    --loop uvloop \
    --ws websockets