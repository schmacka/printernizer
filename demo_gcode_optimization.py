#!/usr/bin/env python3
"""
Demo script for G-code print optimization feature.
Shows before/after comparison of G-code analysis.
"""

import os
import sys
import tempfile
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.utils.gcode_analyzer import GcodeAnalyzer


def create_sample_gcode() -> str:
    """Create a sample G-code file with warmup phase."""
    gcode_content = """;Generated by PrusaSlicer 2.7.0+
;Filament used: 15.23m
;Total print time: 1h 32m

; === WARMUP PHASE ===
M140 S60 ; set bed temperature
M190 S60 ; wait for bed temperature
M104 S215 ; set hotend temperature  
M109 S215 ; wait for hotend temperature
G21 ; set units to millimeters
G90 ; use absolute coordinates
M82 ; use absolute distances for extrusion
G28 ; home all axes
G29 ; auto bed leveling
G92 E0 ; reset extruder position

; Priming line
G1 X2 Y2 Z0.3 F3000
G1 X2 Y50 E2.5 F1500
G1 X2.4 Y50 F3000
G1 X2.4 Y2 E2.5 F1500

; === ACTUAL PRINT STARTS HERE ===
;LAYER:0
;TYPE:WALL-OUTER
G1 X50 Y50 Z0.3 F3000
G1 X50 Y100 E5.2 F1800
G1 X100 Y100 E7.8 F1800
G1 X100 Y50 E10.4 F1800
G1 X50 Y50 E12.9 F1800
;TYPE:INFILL
G1 X60 Y60 F3000
G1 X90 Y60 E15.5 F1800
G1 X90 Y90 E18.1 F1800
G1 X60 Y90 E20.7 F1800

;LAYER:1
G1 Z0.6 F3000
;TYPE:WALL-OUTER
G1 X50 Y50 F3000
G1 X50 Y100 E23.3 F1800
G1 X100 Y100 E25.9 F1800
G1 X100 Y50 E28.5 F1800
G1 X50 Y50 E31.1 F1800

; End of print
M104 S0 ; turn off hotend
M140 S0 ; turn off bed
G28 X0 ; home X axis
M84 ; disable motors
"""
    return gcode_content


def demo_optimization():
    """Demonstrate G-code optimization functionality."""
    print("🔧 G-code Print Optimization Demo")
    print("=" * 50)
    
    # Create sample G-code file
    gcode_content = create_sample_gcode()
    lines = gcode_content.strip().split('\n')
    
    print(f"📄 Sample G-code file: {len(lines)} lines total")
    print()
    
    # Test with optimization enabled
    print("✅ WITH OPTIMIZATION ENABLED:")
    print("-" * 30)
    
    analyzer_enabled = GcodeAnalyzer(optimize_enabled=True)
    
    # Analyze the G-code
    analysis = analyzer_enabled.analyze_gcode_file_lines(lines)
    
    print(f"🔍 Analysis Results:")
    print(f"   • Total lines analyzed: {analysis['total_lines_analyzed']}")
    print(f"   • Print start found at line: {analysis['print_start_line'] + 1 if analysis['print_start_line'] else 'Not found'}")
    print(f"   • Warmup lines to skip: {analysis['warmup_lines']}")
    print(f"   • Optimization possible: {analysis['optimization_possible']}")
    
    # Get optimized lines
    optimized_lines = analyzer_enabled.get_optimized_gcode_lines(lines)
    print(f"📈 Optimization Result: {len(lines)} → {len(optimized_lines)} lines ({len(lines) - len(optimized_lines)} lines removed)")
    
    # Show what was removed
    if analysis['print_start_line']:
        print(f"🗑️  Removed warmup phase:")
        for i, line in enumerate(lines[:analysis['print_start_line']]):
            if line.strip() and not line.startswith(';'):
                print(f"   {i+1:2d}: {line}")
        
        print(f"✨ Print starts with:")
        for i, line in enumerate(optimized_lines[:5]):
            if line.strip():
                print(f"   {analysis['print_start_line'] + i + 1:2d}: {line}")
    
    print()
    
    # Test with optimization disabled
    print("❌ WITH OPTIMIZATION DISABLED:")
    print("-" * 30)
    
    analyzer_disabled = GcodeAnalyzer(optimize_enabled=False)
    disabled_lines = analyzer_disabled.get_optimized_gcode_lines(lines)
    
    print(f"📄 Result: {len(disabled_lines)} lines (no optimization)")
    print(f"💡 All original content preserved")
    
    print()
    
    # Performance comparison
    print("⚡ PERFORMANCE IMPACT:")
    print("-" * 30)
    
    reduction_percent = ((len(lines) - len(optimized_lines)) / len(lines)) * 100
    print(f"📊 Data reduction: {reduction_percent:.1f}%")
    print(f"🚀 Expected render speedup: {reduction_percent * 0.7:.1f}%")  # Estimated
    print(f"💾 Memory savings: ~{reduction_percent * 0.5:.1f}%")  # Estimated
    
    print()
    
    # Write example files for comparison
    print("💾 CREATING EXAMPLE FILES:")
    print("-" * 30)
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='_original.gcode', delete=False) as f:
        f.write('\n'.join(lines))
        original_path = f.name
        
    with tempfile.NamedTemporaryFile(mode='w', suffix='_optimized.gcode', delete=False) as f:
        f.write('\n'.join(optimized_lines))
        optimized_path = f.name
        
    print(f"📁 Original G-code:  {original_path}")
    print(f"📁 Optimized G-code: {optimized_path}")
    print(f"💡 Compare these files to see the difference!")
    
    return original_path, optimized_path


def analyze_gcode_file_lines(self, lines):
    """Helper method to analyze lines directly (for demo)."""
    start_line = self.find_print_start_line(lines)
    
    return {
        'total_lines_analyzed': len(lines),
        'print_start_line': start_line,
        'warmup_lines': start_line if start_line else 0,
        'optimization_possible': start_line is not None,
        'optimization_enabled': self.optimize_enabled
    }


# Monkey patch for demo
GcodeAnalyzer.analyze_gcode_file_lines = analyze_gcode_file_lines


if __name__ == "__main__":
    try:
        original_file, optimized_file = demo_optimization()
        
        print()
        print("🎉 Demo completed successfully!")
        print(f"🧹 Cleanup: rm {original_file} {optimized_file}")
        
        # Clean up temporary files
        os.unlink(original_file)
        os.unlink(optimized_file)
        
    except Exception as e:
        print(f"❌ Demo failed: {e}")
        sys.exit(1)